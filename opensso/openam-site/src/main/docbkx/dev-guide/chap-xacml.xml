<?xml version="1.0" encoding="UTF-8"?>
<!--
  ! CCPL HEADER START
  !
  ! This work is licensed under the Creative Commons
  ! Attribution-NonCommercial-NoDerivs 3.0 Unported License.
  ! To view a copy of this license, visit
  ! http://creativecommons.org/licenses/by-nc-nd/3.0/
  ! or send a letter to Creative Commons, 444 Castro Street,
  ! Suite 900, Mountain View, California, 94041, USA.
  !
  ! You can also obtain a copy of the license at
  ! src/main/resources/legal-notices/CC-BY-NC-ND.txt.
  ! See the License for the specific language governing permissions
  ! and limitations under the License.
  !
  ! If applicable, add the following below this CCPL HEADER, with the fields
  ! enclosed by brackets "[]" replaced with your own identifying information:
  !      Portions Copyright [yyyy] [name of copyright owner]
  !
  ! CCPL HEADER END
  !
  !      Copyright 2011 ForgeRock AS
  !    
-->
<chapter xml:id='chap-xacml'
 xmlns='http://docbook.org/ns/docbook'
 version='5.0' xml:lang='en'
 xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
 xsi:schemaLocation='http://docbook.org/ns/docbook http://docbook.org/xml/5.0/xsd/docbook.xsd'
 xmlns:xlink='http://www.w3.org/1999/xlink'
 xmlns:xinclude='http://www.w3.org/2001/XInclude'>
 <title>Requesting a XACML Policy Decision Using OpenAM Java SDK</title>

 <para>This chapter shows how to request a XACML policy decision with OpenAM
 Java SDK, using the sample client, <filename>XACMLClientSample.java</filename>.
 The sample client relies on an OpenAM server acting as a policy decision point
 and another OpenAM server acting as a policy enforcement point.</para>
 
 <para>The sample client uses the XACML <literal>ContextFactory</literal> to
 create the XACML request. It then uses the
 <literal>XACMLRequestProcessor</literal> to get a decision as XACML
 <literal>Response</literal> from OpenAM. Most of the work in the sample
 is done setting up the request.</para>
 
 <para>The implementation of the <literal>XACMLClientSample</literal> class
 follows.</para>

 <programlisting language="java">package samples.xacml;

import com.sun.identity.saml2.common.SAML2Exception;

import com.sun.identity.xacml.client.XACMLRequestProcessor;
import com.sun.identity.xacml.common.XACMLConstants;
import com.sun.identity.xacml.common.XACMLException;
import com.sun.identity.xacml.context.ContextFactory;
import com.sun.identity.xacml.context.Action;
import com.sun.identity.xacml.context.Attribute;
import com.sun.identity.xacml.context.Environment;
import com.sun.identity.xacml.context.Request;
import com.sun.identity.xacml.context.Resource;
import com.sun.identity.xacml.context.Response;
import com.sun.identity.xacml.context.Subject;

import java.net.URI;
import java.net.URISyntaxException;

import java.io.PrintWriter;

import java.util.ArrayList;
import java.util.Enumeration;
import java.util.List;
import java.util.MissingResourceException;
import java.util.Properties;
import java.util.ResourceBundle;

public class XACMLClientSample {


    public XACMLClientSample() {
    }

    public static void main(String[] args) throws Exception {
        XACMLClientSample clientSample = new XACMLClientSample();
        clientSample.runSample(args);
        System.exit(0);
    }

    public void runSample(String[] args) throws Exception {
        if (args.length == 0 || args.length &gt; 1) {
            System.out.println("Missing argument:"
                    + "properties file name not specified");
        } else {
            System.out.println("Using properties file:" + args[0]);
            Properties sampleProperties = getProperties(args[0]);
            testProcessRequest(
                (String)sampleProperties.get("pdp.entityId"),
                (String)sampleProperties.get("pep.entityId"),
                (String)sampleProperties.get("subject.id"),
                (String)sampleProperties.get("subject.id.datatype"),
                (String)sampleProperties.get("subject.category"),
                (String)sampleProperties.get("resource.id"),
                (String)sampleProperties.get("resource.id.datatype"),
                (String)sampleProperties.get("resource.servicename"),
                (String)sampleProperties.get("resource.servicename.datatype"),
                (String)sampleProperties.get("action.id"),
                (String)sampleProperties.get("action.id.datatype")
            );
        }
    }

    private void testProcessRequest(
            String pdpEntityId, String pepEntityId,
            String subjectId, String subjectIdType,
            String subjectCategory,
            String resourceId, String resourceIdType,
            String serviceName, String serviceNameType,
            String actionId, String actionIdType) 
            throws XACMLException, SAML2Exception, 
            URISyntaxException, Exception {

        Request xacmlRequest = createSampleXacmlRequest(
            subjectId, subjectIdType,
            subjectCategory,
            resourceId, resourceIdType,
            serviceName, serviceNameType,
            actionId, actionIdType); 

        System.out.println("\ntestProcessRequest():xacmlRequest:\n" 
                + xacmlRequest.toXMLString(true, true));

        Response xacmlResponse = XACMLRequestProcessor.getInstance()
                .processRequest(xacmlRequest, pdpEntityId, pepEntityId);

        System.out.println("testProcessRequest():xacmlResponse:\n"
                + xacmlResponse.toXMLString(true, true));
    }

    private Request createSampleXacmlRequest(
            String subjectId, String subjectIdType,
            String subjectCategory,
            String resourceId, String resourceIdType,
            String serviceName, String serviceNameType,
            String actionId, String actionIdType) 
            throws XACMLException, URISyntaxException {

        Request request = ContextFactory.getInstance().createRequest();

        //Subject
        Subject subject = ContextFactory.getInstance().createSubject();
        subject.setSubjectCategory(new URI(subjectCategory));

        //set subject id
        Attribute attribute = ContextFactory.getInstance().createAttribute();
        attribute.setAttributeId(new URI(XACMLConstants.SUBJECT_ID));
        attribute.setDataType(new URI(subjectIdType));
        List valueList = new ArrayList();
        valueList.add(subjectId); 
        attribute.setAttributeStringValues(valueList);
        List attributeList = new ArrayList();
        attributeList.add(attribute);
        subject.setAttributes(attributeList);


        //set Subject in Request
        List subjectList = new ArrayList();
        subjectList.add(subject);
        request.setSubjects(subjectList);

        //Resource
        Resource resource = ContextFactory.getInstance().createResource();

        //set resource id
        attribute = ContextFactory.getInstance().createAttribute();
        attribute.setAttributeId(new URI(XACMLConstants.RESOURCE_ID));
        attribute.setDataType( new URI(resourceIdType));
        valueList = new ArrayList();
        valueList.add(resourceId);
        attribute.setAttributeStringValues(valueList);
        attributeList = new ArrayList();
        attributeList.add(attribute);

        //set serviceName
        attribute = ContextFactory.getInstance().createAttribute();
        attribute.setAttributeId(new URI(XACMLConstants.TARGET_SERVICE));
        attribute.setDataType(new URI(serviceNameType));
        valueList = new ArrayList();
        valueList.add(serviceName);
        attribute.setAttributeStringValues(valueList);
        attributeList.add(attribute);
        resource.setAttributes(attributeList);

        //set Resource in Request
        List resourceList = new ArrayList();
        resourceList.add(resource);
        request.setResources(resourceList);

        //Action
        Action action = ContextFactory.getInstance().createAction();
        attribute = ContextFactory.getInstance().createAttribute();
        attribute.setAttributeId(new URI(XACMLConstants.ACTION_ID));
        attribute.setDataType(new URI(actionIdType));

        //set actionId
        valueList = new ArrayList();
        valueList.add(actionId);
        attribute.setAttributeStringValues(valueList);
        attributeList = new ArrayList();
        attributeList.add(attribute);
        action.setAttributes(attributeList);

        //set Action in Request
        request.setAction(action);

        //Enviornment, our PDP does not use environment now
        Environment environment = ContextFactory.getInstance()
            .createEnvironment();
        request.setEnvironment(environment);
        return request;
    }

    private Properties getProperties(String file)
        throws MissingResourceException {
        Properties properties = new Properties();
        ResourceBundle bundle = ResourceBundle.getBundle(file);
        Enumeration e = bundle.getKeys();
        System.out.println("sample properties:");
        while (e.hasMoreElements()) {
            String key = (String) e.nextElement();
            String value = bundle.getString(key);
            properties.put(key, value);
            System.out.println(key + ":" + value);
        }
        return properties;
    }
}</programlisting>

 <para>Before running the sample client, you must set up the configuration as
 described in the comments at the outset of the
 <filename>scripts/run-xacml-client-sample.sh</filename> script. The client
 accesses an OpenAM server acting as the policy enforcement point, configured
 in a circle of trust with the OpenAM server acting as the policy decision
 point. When you setup the sample clients, you pointed them to an OpenAM
 server, which functions in this example as the policy enforcement point.
 Therefore, set up another OpenAM server to act as the policy decision point.
 The user profile and policy is stored on the OpenAM server acting as the
 policy decision point.</para>

 <para>Also set up the configuration for sample client. The relevant lines
 from <filename>resources/xacmlClientSample.properties</filename> follow.</para>

 <programlisting language="java">pdp.entityId=xacmlPdpEntity
pep.entityId=xacmlPepEntity
subject.id=id=demo,ou=user,dc=opensso,dc=java,dc=net
subject.id.datatype=urn:oasis:names:tc:xacml:1.0:data-type:x500Name
subject.category=urn:oasis:names:tc:xacml:1.0:subject-category:access-subject
resource.id=http://www.example.com:80/banner.html
resource.id.datatype=http://www.w3.org/2001/XMLSchema#string
resource.servicename=iPlanetAMWebAgentService
resource.servicename.datatype=http://www.w3.org/2001/XMLSchema#string
action.id=GET
action.id.datatype=http://www.w3.org/2001/XMLSchema#string</programlisting>

 <para>What follows here is described in the comments of the script. In OpenAM
 console on the policy decision point OpenAM server, browse to Configuration
 &gt; Global &gt; SAMLv2 SOAP Binding, and configure a new request handler with
 Key <literal>/xacmlPdp</literal> and Class
 <literal>com.sun.identity.xacml.plugins.XACMLAuthzDecisionQueryHandler</literal>.</para>

 <para>On the policy enforcement point OpenAM server, set up the circle of
 trust, and then create and import the metadata.</para>

 <screen>$ ssoadm
 create-cot
 --adminid amadmin
 --password-file /tmp/pwd.txt
 --cot xacml-cot

Circle of trust, xacml-cot was created.
$ ssoadm
 create-metadata-templ
 --adminid amadmin
 --password-file /tmp/pwd.txt
 --entityid xacmlPepEntity
 --xacmlpep /xacmlPep
 --meta-data-file xacmlPep.xml
 --extended-data-file xacmlPep-extended.xml

Hosted entity configuration was written to xacmlPep-extended.xml.
Hosted entity descriptor was written to xacmlPep.xml.
$ ssoadm
 import-entity
 --adminid amadmin
 --password-file /tmp/pwd.txt
 --cot xacml-cot
 --meta-data-file xacmlPep.xml
 --extended-data-file xacmlPep-extended.xml

Import file, xacmlPep.xml.
Import file, xacmlPep-extended.xml.</screen>

 <para>On the policy decision point OpenAM server, set up the circle of trust,
 and then create and import the metadata.</para>

 <screen>$ ssoadm
 create-cot
 --adminid amadmin
 --password-file /tmp/pwd.txt
 --cot xacml-cot

Circle of trust, xacml-cot was created.
$ ssoadm
 create-metadata-templ
 --adminid amadmin
 --password-file /tmp/pwd.txt
 --entityid xacmlPdpEntity
 --xacmlpep /xacmlPdp
 --meta-data-file xacmlPdp.xml
 --extended-data-file xacmlPdp-extended.xml

Hosted entity configuration was written to xacmlPdp-extended.xml.
Hosted entity descriptor was written to xacmlPdp.xml.
$ ssoadm
 import-entity
 --adminid amadmin
 --password-file /tmp/pwd.txt
 --cot xacml-cot
 --meta-data-file xacmlPdp.xml
 --extended-data-file xacmlPdp-extended.xml

Import file, xacmlPdp.xml.
Import file, xacmlPdp-extended.xml.</screen>

 <para>On the policy enforcement point OpenAM server, import the metadata
 from the policy decision point OpenAM server.</para>

 <screen>$ ssoadm
 import-entity
 --adminid amadmin
 --password-file /tmp/pwd.txt
 --cot xacml-cot
 --meta-data-file xacmlPdp.xml
 --extended-data-file xacmlPdp-extended.xml

Import file, xacmlPdp.xml.
Import file, xacmlPdp-extended.xml.</screen>

 <para>On the policy decision point OpenAM server, import the metadata from
 the policy enforcement point server. Also create an entitlement that allows
 authenticated users to perform an HTTP <literal>GET</literal> on the sample
 <literal>resource.id</literal> URL you configured, such as
 <literal>http://www.example.com:80/banner.html</literal>.</para>

 <screen>$ ssoadm
 import-entity
 --adminid amadmin
 --password-file /tmp/pwd.txt
 --cot xacml-cot
 --meta-data-file xacmlPep.xml
 --extended-data-file xacmlPep-extended.xml

Import file, xacmlPep.xml.
Import file, xacmlPep-extended.xml.</screen>

 <para>Run the sample client script.</para>

 <screen>$ scripts/run-xacml-client-sample.sh 
Using properties file:xacmlClientSample
sample properties:
resource.servicename.datatype:http://www.w3.org/2001/XMLSchema#string
resource.id:http://www.example.com:80/banner.html
action.id.datatype:http://www.w3.org/2001/XMLSchema#string
resource.id.datatype:http://www.w3.org/2001/XMLSchema#string
action.id:GET
subject.id:id=demo,ou=user,dc=opensso,dc=java,dc=net
------------------------------------------------------------------------------:
subject.id.datatype:urn:oasis:names:tc:xacml:1.0:data-type:x500Name
pdp.entityId:xacmlPdpEntity
resource.servicename:iPlanetAMWebAgentService
subject.category:urn:oasis:names:tc:xacml:1.0:subject-category:access-subject
pep.entityId:xacmlPepEntity

testProcessRequest():xacmlRequest:

&lt;xacml-context:Request
 xmlns:xacml-context=&quot;urn:oasis:names:tc:xacml:2.0:context:schema:os&quot;
 xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
 xsi:schemaLocation=&quot;urn:oasis:names:tc:xacml:2.0:context:schema:os
 http://docs.oasis-open.org/xacml/
 access_control-xacml-2.0-context-schema-os.xsd&quot;&gt;
&lt;Subject SubjectCategory=
 &quot;urn:oasis:names:tc:xacml:1.0:subject-category:access-subject&quot;&gt;
&lt;Attribute AttributeId=&quot;urn:oasis:names:tc:xacml:1.0:subject:subject-id&quot;
 DataType=&quot;urn:oasis:names:tc:xacml:1.0:data-type:x500Name&quot; &gt;
&lt;AttributeValue&gt;id=demo,ou=user,dc=opensso,dc=java,dc=net&lt;/AttributeValue&gt;
&lt;/Attribute&gt;
&lt;/Subject&gt;
&lt;xacml-context:Resource&gt;
&lt;Attribute AttributeId=&quot;ResourceId&quot;
 DataType=&quot;http://www.w3.org/2001/XMLSchema#string&quot; &gt;
&lt;AttributeValue&gt;http://www.example.com:80/banner.html&lt;/AttributeValue&gt;
&lt;/Attribute&gt;
&lt;Attribute AttributeId=&quot;urn:sun:names:xacml:2.0:resource:target-service&quot;
 DataType=&quot;http://www.w3.org/2001/XMLSchema#string&quot; &gt;
&lt;AttributeValue&gt;iPlanetAMWebAgentService&lt;/AttributeValue&gt;
&lt;/Attribute&gt;
&lt;/xacml-context:Resource&gt;
&lt;xacml-context:Action&gt;
&lt;Attribute AttributeId=&quot;urn:oasis:names:tc:xacml:1.0:action:action-id&quot;
 DataType=&quot;http://www.w3.org/2001/XMLSchema#string&quot; &gt;
&lt;AttributeValue&gt;GET&lt;/AttributeValue&gt;
&lt;/Attribute&gt;
&lt;/xacml-context:Action&gt;
&lt;xacml-context:Environment&gt;&lt;/xacml-context:Environment&gt;
&lt;/xacml-context:Request&gt;

Exception in thread &quot;main&quot; com.sun.identity.saml2.common.SAML2Exception
 at com.sun.identity.saml2.soapbinding.QueryClient.processXACMLQuery(QueryClient.java:255)
 at com.sun.identity.xacml.client.XACMLRequestProcessor.processRequest(XACMLRequestProcessor.java:120)
 at samples.xacml.XACMLClientSample.testProcessRequest(XACMLClientSample.java:112)
 at samples.xacml.XACMLClientSample.runSample(XACMLClientSample.java:76)
 at samples.xacml.XACMLClientSample.main(XACMLClientSample.java:65)
 
 TODO: Figure out is wrong with the setup.</screen>
</chapter>
