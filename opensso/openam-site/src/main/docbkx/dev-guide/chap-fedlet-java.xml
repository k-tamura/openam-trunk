<?xml version="1.0" encoding="UTF-8"?>
<!--
  ! CCPL HEADER START
  !
  ! This work is licensed under the Creative Commons
  ! Attribution-NonCommercial-NoDerivs 3.0 Unported License.
  ! To view a copy of this license, visit
  ! http://creativecommons.org/licenses/by-nc-nd/3.0/
  ! or send a letter to Creative Commons, 444 Castro Street,
  ! Suite 900, Mountain View, California, 94041, USA.
  !
  ! You can also obtain a copy of the license at
  ! src/main/resources/legal-notices/CC-BY-NC-ND.txt.
  ! See the License for the specific language governing permissions
  ! and limitations under the License.
  !
  ! If applicable, add the following below this CCPL HEADER, with the fields
  ! enclosed by brackets "[]" replaced with your own identifying information:
  !      Portions Copyright [yyyy] [name of copyright owner]
  !
  ! CCPL HEADER END
  !
  !      Copyright 2011-2012 ForgeRock AS
  !    
-->
<chapter xml:id='chap-fedlet-java'
 xmlns='http://docbook.org/ns/docbook'
 version='5.0' xml:lang='en'
 xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
 xsi:schemaLocation='http://docbook.org/ns/docbook http://docbook.org/xml/5.0/xsd/docbook.xsd'
 xmlns:xlink='http://www.w3.org/1999/xlink'
 xmlns:xinclude='http://www.w3.org/2001/XInclude'>
 <title>Using Fedlets in Java Web Applications</title>
 <indexterm>
  <primary>Fedlets</primary>
  <secondary>Java</secondary>
 </indexterm>
 <para>This chapter introduces OpenAM Fedlets, and shows how to use the Fedlet
 as part of your Java web application.</para>

 <para>An OpenAM <firstterm>Fedlet</firstterm> is a small web application that
 can do federation in your service provider application with OpenAM acting as
 the identity provider. The Fedlet does not require an entire OpenAM
 installation alongside your application, but instead can redirect to OpenAM
 for single sign on, and to retrieve SAML assertions.</para>

 <procedure xml:id="create-a-java-fedlet">
  <title>To Create a Fedlet</title>
  <para>The OpenAM administrator running the identity provider server creates
  a <filename>Fedlet.zip</filename> file for your service provider application,
  and then sends you the .zip.</para>
  
  <step performance="optional">
   <para>Before creating the Fedlet, create a Hosted Identity Provider if
   you have not already done so.</para>
  </step>
  <step>
   <para>On the Common Tasks page of the OpenAM console, click Create
   Fedlet.</para>
  </step>
  <step>
   <para>Note that the Circle of Trust includes your hosted identity provider,
   and that Identity Provider is set to your to hosted identity
   provider.</para>
  </step>
  <step>
   <para>Name the Fedlet, and also set the Destination URL.</para>
   <para>You can use the deployment URL, such as
   <literal>http://www.example.com:8080/fedlet</literal> as both the name and
   the destination URL.</para>
  </step>
  <step>
   <para>If you must map attributes to match profiles on the service provider,
   set up the attribute mapping.</para>
   <para>To prepare to perform the Fedlet Attribute Query example, set
   <literal>CommonName=cn</literal>, <literal>GivenName=sn</literal>, and
   <literal>UserStatus=inetUserStatus</literal>.</para>
  </step>
  <step>
   <para>Click create to generate the Fedlet.zip file, such as
   <filename>$HOME/openam/myfedlets/httpwwwexamplecom8080fedlet/Fedlet.zip</filename>.</para>
  </step>
  <step>
   <para>Provide the Fedlet to the service provider.</para>
  </step>
 </procedure>
 
 <procedure xml:id="install-fedlet-as-demo">
  <title>To Install the Fedlet as a Demo Application</title>
  <para><filename>Fedlet.zip</filename> includes the
  <filename>fedlet.war</filename> archive corresponding to the identity
  provider, and a <filename>README</filename> file.</para>
  <itemizedlist>
   <listitem>
    <para>The <filename>fedlet.war</filename> archive contains both the Fedlet
    as a demo web application, and also the files you use to include the Fedlet
    in your service provider application.</para>
   </listitem>
   <listitem>
    <para>The README file describes how to use the Fedlet.</para>
   </listitem>
  </itemizedlist>

  <step>
   <para>Deploy the Fedlet in your web container.</para>
   <screen>$ unzip Fedlet.zip
$ mv fedlet.war /path/to/tomcat/webapps</screen>
  </step>
  <step>
   <para>Browse to the Fedlet URL, and then click the links to set up the
   configuration directory in <filename>$HOME/fedlet</filename>, where $HOME
   corresponds to the user running the web application container.</para>
  </step>
  <step>
   <para>In the Fedlet configuration directory, set up a JKS keystore file,
   keystore password file, and key password file.</para>
   <para>For demo purposes, you can copy the test
   <filename>keystore.jks</filename>, <filename>.keypass</filename>, and
   <filename>.storepass</filename> from the OpenAM identity provider.</para>
   <screen>$ cd /home/user/openam/openam
$ scp keystore.jks .keypass .storepass www.example.com:/home/user/fedlet/
user@www.example.com's password:
keystore.jks                                   100% 1348     1.3KB/s   00:00
.keypass                                       100%   36     0.0KB/s   00:00
.storepass                                     100%   36     0.0KB/s   00:00</screen>
  </step>
  <step>
   <para>Try one or more examples from the Fedlet home page to validate Fedlet
   setup.</para>
   <mediaobject xml:id="figure-fedlet-demo">
    <alt>Home page for demo Fedlet</alt>
    <imageobject>
     <imagedata fileref="images/fedlet-demo.png" format="PNG" />
    </imageobject>
    <textobject>
     <para>The home page for the demo Fedlet lets you try Fedlet and IDP
     initiated single sign on.</para>
    </textobject>
   </mediaobject>
   <para>After setting up OpenAM with the default subjects, you can login on
   the identity provider with user name <literal>demo</literal> and password
   <literal>changeit</literal>.</para>
  </step>
 </procedure>

 <procedure xml:id="hello-world-with-fedlet">
  <title>To Add Your Application</title>
  
  <variablelist>
   <para>The Fedlet includes the following files that you use when building
   your own service provider application based on the demo web application,
   including a set of JavaServer Pages (JSP) examples.</para>
   <varlistentry>
    <term><filename>conf/</filename></term>
    <listitem>
     <para>Configuration files copied to <filename>$HOME/fedlet</filename> when
     you first deploy and configure the Fedlet. When deploying your application,
     you can move these to an alternate location passed to the Java virtual
     machine for the web application container at startup. For example, if
     you store the configuration under <filename>/export/fedlet/</filename>,
     then you could pass the following property to the JVM.</para>
     <literallayout class="monospaced"
     >-Dcom.sun.identity.fedlet.home=/export/fedlet/conf</literallayout>
     <para>You do not need to include these files in your application.</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><filename>fedletAttrQuery.jsp</filename></term>
    <term><filename>fedletAttrResp.jsp</filename></term>
    <listitem>
     <para>Sample SAML attribute query and response handlers. See the Fedlet
     README file for more information.</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><filename>fedletEncode.jsp</filename></term>
    <listitem>
     <para>Utility JSP to encode a password, such as the password used to
     protect a Java keystore</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><filename>fedletSampleApp.jsp</filename></term>
    <term><filename>index.jsp</filename></term>
    <listitem>
     <para>Demo application. You can remove these before deployment to replace
     them with your application.</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><filename>fedletXACMLQuery.jsp</filename></term>
    <term><filename>fedletXACMLResp.jsp</filename></term>
    <listitem>
     <para>Sample SAML XACML query and response handlers. See the Fedlet
     README file for more information.</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><filename>logout.jsp</filename></term>
    <listitem>
     <para>Utility page to perform single log out</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><filename>saml2/jsp/</filename></term>
    <listitem>
     <para>JSPs to initiate single sign on and single logout, and to handle
     error, and also a JSP for obtaining Fedlet metadata,
     <filename>saml2/jsp/exportmetadata.jsp</filename></para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><filename>WEB-INF/classes/</filename></term>
    <listitem>
     <para>Localized Java properties files for strings used in the Fedlet user
     interface</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><filename>WEB-INF/lib/</filename></term>
    <listitem>
     <para>Fedlet libraries required by your application</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><filename>WEB-INF/web.xml</filename></term>
    <listitem>
     <para>Fedlet web application configuration, showing how JSPs map to URLs
     used in the Fedlet. Add mappings for your application before
     deployment.</para>
     <para>In the <filename>web.xml</filename> mappings, your application must
     be mapped to <literal>/fedletapplication</literal>, as this is the
     assertion consumer URL set in the Fedlet metadata.</para>
     <programlisting language="xml">&lt;servlet&gt;
    &lt;servlet-name&gt;yourApp&lt;/servlet-name&gt;
    &lt;jsp-file&gt;/fedletSampleApp.jsp&lt;/jsp-file&gt;
&lt;/servlet&gt;
&lt;servlet-mapping&gt;
    &lt;servlet-name&gt;yourApp&lt;/servlet-name&gt;
    &lt;url-pattern&gt;/fedletapplication&lt;/url-pattern&gt;
&lt;/servlet-mapping&gt;</programlisting>
    </listitem>
   </varlistentry>
  </variablelist>

  <!-- Here, it would be nice to demo a page that returns to the identity
  provider to login, then shows a Hello, user page with the common name from
  the provider. But if I could get the attribute query to work, I might have
  to retire in order to celebrate. -->
  <para>Follow these steps for a very simple demonstration of how to customize
  the Fedlet.</para>
  <step>
   <para>Backup <filename>fedletSampleApp.jsp</filename>.</para>
   <screen>$ cd /path/to/tomcat/webapps/fedlet/
$ cp fedletSampleApp.jsp fedletSampleApp.jsp.orig</screen>
  </step>
  <step>
   <para>Edit <filename>fedletSampleApp.jsp</filename> to reduce it to a single
   redirection to <filename>myapp.jsp</filename>. An implementation of the
   &lt;html&gt; element of the file follows below.</para>
   <programlisting language="html">&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;Fedlet Sample Application&lt;/title&gt;
    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=iso-8859-1&quot; /&gt;
&lt;/head&gt;

&lt;body&gt;
&lt;%
    // BEGIN : following code is a must for Fedlet (SP) side application
    Map map;
    try {
        // invoke the Fedlet processing logic. this will do all the
        // necessary processing conforming to SAMLv2 specifications,
        // such as XML signature validation, Audience and Recipient
        // validation etc.  
        map = SPACSUtils.processResponseForFedlet(request, response);
        response.sendRedirect(&quot;myapp.jsp&quot;);
    } catch (SAML2Exception sme) {
        SAMLUtils.sendError(request, response,
            response.SC_INTERNAL_SERVER_ERROR, &quot;failedToProcessSSOResponse&quot;,
            sme.getMessage());
        return;
    } catch (IOException ioe) {
        SAMLUtils.sendError(request, response,
            response.SC_INTERNAL_SERVER_ERROR, &quot;failedToProcessSSOResponse&quot;,
            ioe.getMessage());
        return;
    } catch (SessionException se) {
        SAMLUtils.sendError(request, response, 
            response.SC_INTERNAL_SERVER_ERROR, &quot;failedToProcessSSOResponse&quot;,
            se.getMessage());
        return;
    } catch (ServletException se) {
        SAMLUtils.sendError(request, response,
            response.SC_BAD_REQUEST, &quot;failedToProcessSSOResponse&quot;,
            se.getMessage());
        return;
    }
    // END : code is a must for Fedlet (SP) side application
%&gt;
&lt;/body&gt;
&lt;/html&gt;</programlisting>
  </step>
  <step>
   <para>Add a <filename>myapp.jsp</filename> page to the Fedlet, such as the
   following.</para>
   <programlisting language="html">&lt;html&gt;
&lt;head&gt;
&lt;title&gt;My Application&lt;/title&gt;
&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html&quot; /&gt;
&lt;/head&gt;

&lt;body&gt;
&lt;h1&gt;My Application&lt;/h1&gt;
&lt;p&gt;After you change the &lt;code&gt;fedletSampleApp.jsp&lt;/code&gt;,
   all it does is redirect to this home page after
   successful login.&lt;/p&gt;
&lt;p&gt;See the fedlet README file and example JSPs for hints
   on how to retrieve attributes from OpenAM, or to send
   XACML queries for policy decisions.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</programlisting>
  </step>
  <step>
   <para>Browse to the Fedlet URL, such as
   <literal>http://www.example.com:8080/fedlet/</literal>, and try one
   of the login methods.</para>
   <para>After login you are redirected to <filename>myapp.jsp</filename>.</para>
  </step>
 </procedure>

 <section xml:id="fedlet-signing-encryption">
  <title>Signing &amp; Encryption</title>

  <para>By default when you create the Java Fedlet, signing and encryption are
  not configured. You can however set up OpenAM and the fedlet to sign and
  to verify XML signatures and to encrypt and to decrypt data such as SAML
  assertions.</para>

  <itemizedlist>
   <para>Enable signing and encryption for the Java Fedlet involves the
   following high level stages.</para>
   <listitem>
    <para>Before you create the Fedlet, configure the IDP to sign and encrypt
    data. See Federation &gt; Entity Providers &gt; <replaceable>IDP
    Name</replaceable> &gt; Signing and Encryption in the OpenAM console.</para>
    <para>For evaluation, you can use the <literal>test</literal> certificate
    delivered with OpenAM.</para>
   </listitem>
   <listitem>
    <para>Initially deploy and configure the Fedlet, but do not use the Fedlet
    until you finish.</para>
   </listitem>
   <listitem>
    <para>On the Fedlet side set up a JKS keystore used for signing and
    encryption. For evaluation, you can use copy the
    <filename>keystore.jks</filename> file delivered with OpenAM. You can find
    the file under the configuration directory for OpenAM, such as
    <filename>$HOME/openam/openam/</filename> for a server instance with
    base URI <literal>openam</literal>. The built-in keystore includes the
    <literal>test</literal> certificate.</para>
    <para>You must also set up <filename>.storepass</filename> and
    <filename>.keypass</filename> files using the
    <filename>fedletEncode.jsp</filename> page, such as
    <literal>http://www.example.com:8080/fedlet/fedletEncode.jsp</literal>, to
    encode passwords on the Fedlet side. The passwords for the test key store
    and private key are both <literal>changeit</literal>.</para>
   </listitem>
   <listitem>
    <para>Configure the Fedlet to perform signing and encryption by ensuring
    the Fedlet has access to the key store, and by updating the SP metadata
    for the Fedlet.</para>
   </listitem>
   <listitem>
    <para>Import the updated SP metadata into the IDP to replace the default
    Fedlet configuration.</para>
   </listitem>
   <listitem>
    <para>Restart the Fedlet or container in which the Fedlet runs for the
    changes you made on the Fedlet side to take effect.</para>
   </listitem>
  </itemizedlist>

  <procedure xml:id="fedlet-conf-signing-encryption">
   <title>To Configure the Fedlet For Signing &amp; Encryption</title>

   <para>The <filename>FederationConfig.properties</filename> file specifies
   the paths to the JKS keystore holding the signing or encryption keys for
   the Fedlet, the keystore password file, and the private key password
   file.</para>

   <step>
    <para>After setting up your keystore and password files as described above,
    edit the properties file in the configuration directory, such as
    <filename>$HOME/fedlet/FederationConfig.properties</filename>, to point
    to the keystore and password files.</para>
   </step>
   <step>
    <para>Export the certificate to use for signing and encryption
    purposes.</para>

    <screen>$ keytool -export -rfc -keystore keystore.jks -alias test
Enter keystore password:
-----BEGIN CERTIFICATE-----
MIICQDCCAakCBEeNB0swDQYJKoZIhvcNAQEEBQAwZzELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNh
bGlmb3JuaWExFDASBgNVBAcTC1NhbnRhIENsYXJhMQwwCgYDVQQKEwNTdW4xEDAOBgNVBAsTB09w
ZW5TU08xDTALBgNVBAMTBHRlc3QwHhcNMDgwMTE1MTkxOTM5WhcNMTgwMTEyMTkxOTM5WjBnMQsw
CQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEUMBIGA1UEBxMLU2FudGEgQ2xhcmExDDAK
BgNVBAoTA1N1bjEQMA4GA1UECxMHT3BlblNTTzENMAsGA1UEAxMEdGVzdDCBnzANBgkqhkiG9w0B
AQEFAAOBjQAwgYkCgYEArSQc/U75GB2AtKhbGS5piiLkmJzqEsp64rDxbMJ+xDrye0EN/q1U5Of+
RkDsaN/igkAvV1cuXEgTL6RlafFPcUX7QxDhZBhsYF9pbwtMzi4A4su9hnxIhURebGEmxKW9qJNY
Js0Vo5+IgjxuEWnjnnVgHTs1+mq5QYTA7E6ZyL8CAwEAATANBgkqhkiG9w0BAQQFAAOBgQB3Pw/U
QzPKTPTYi9upbFXlrAKMwtFf2OW4yvGWWvlcwcNSZJmTJ8ARvVYOMEVNbsT4OFcfu2/PeYoAdiDA
cGy/F2Zuj8XJJpuQRSE6PtQqBuDEHjjmOQJ0rV/r8mO1ZCtHRhpZ5zYRjhRC9eCbjx9VrFax0JDC
/FfwWigmrW0Y0Q==</screen>
   </step>

   <step>
    <para>Edit the standard metadata file for the Fedlet, such as
    <filename>$HOME/fedlet/sp.xml</filename>, to include the certificate
    in KeyDescriptor elements, that are children of the SPSSODescriptor
    element.</para>

    <programlisting language="xml">&lt;EntityDescriptor
 xmlns=&quot;urn:oasis:names:tc:SAML:2.0:metadata&quot;
 entityID=&quot;http://www.example.com:8080/fedlet&quot;&gt;
 &lt;SPSSODescriptor
  AuthnRequestsSigned=&quot;true&quot;
  WantAssertionsSigned=&quot;true&quot;
  protocolSupportEnumeration=&quot;urn:oasis:names:tc:SAML:2.0:protocol&quot;&gt;
  &lt;KeyDescriptor use=&quot;signing&quot;&gt;
   &lt;ds:KeyInfo xmlns:ds=&quot;http://www.w3.org/2000/09/xmldsig#&quot;&gt;
    &lt;ds:X509Data&gt;
     &lt;ds:X509Certificate&gt;
MIICQDCCAakCBEeNB0swDQYJKoZIhvcNAQEEBQAwZzELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNh
bGlmb3JuaWExFDASBgNVBAcTC1NhbnRhIENsYXJhMQwwCgYDVQQKEwNTdW4xEDAOBgNVBAsTB09w
ZW5TU08xDTALBgNVBAMTBHRlc3QwHhcNMDgwMTE1MTkxOTM5WhcNMTgwMTEyMTkxOTM5WjBnMQsw
CQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEUMBIGA1UEBxMLU2FudGEgQ2xhcmExDDAK
BgNVBAoTA1N1bjEQMA4GA1UECxMHT3BlblNTTzENMAsGA1UEAxMEdGVzdDCBnzANBgkqhkiG9w0B
AQEFAAOBjQAwgYkCgYEArSQc/U75GB2AtKhbGS5piiLkmJzqEsp64rDxbMJ+xDrye0EN/q1U5Of+
RkDsaN/igkAvV1cuXEgTL6RlafFPcUX7QxDhZBhsYF9pbwtMzi4A4su9hnxIhURebGEmxKW9qJNY
Js0Vo5+IgjxuEWnjnnVgHTs1+mq5QYTA7E6ZyL8CAwEAATANBgkqhkiG9w0BAQQFAAOBgQB3Pw/U
QzPKTPTYi9upbFXlrAKMwtFf2OW4yvGWWvlcwcNSZJmTJ8ARvVYOMEVNbsT4OFcfu2/PeYoAdiDA
cGy/F2Zuj8XJJpuQRSE6PtQqBuDEHjjmOQJ0rV/r8mO1ZCtHRhpZ5zYRjhRC9eCbjx9VrFax0JDC
/FfwWigmrW0Y0Q==
     &lt;/ds:X509Certificate&gt;
    &lt;/ds:X509Data&gt;
   &lt;/ds:KeyInfo&gt;
  &lt;/KeyDescriptor&gt;
  &lt;KeyDescriptor use=&quot;encryption&quot;&gt;
   &lt;ds:KeyInfo xmlns:ds=&quot;http://www.w3.org/2000/09/xmldsig#&quot;&gt;
    &lt;ds:X509Data&gt;
     &lt;ds:X509Certificate&gt;
MIICQDCCAakCBEeNB0swDQYJKoZIhvcNAQEEBQAwZzELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNh
bGlmb3JuaWExFDASBgNVBAcTC1NhbnRhIENsYXJhMQwwCgYDVQQKEwNTdW4xEDAOBgNVBAsTB09w
ZW5TU08xDTALBgNVBAMTBHRlc3QwHhcNMDgwMTE1MTkxOTM5WhcNMTgwMTEyMTkxOTM5WjBnMQsw
CQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEUMBIGA1UEBxMLU2FudGEgQ2xhcmExDDAK
BgNVBAoTA1N1bjEQMA4GA1UECxMHT3BlblNTTzENMAsGA1UEAxMEdGVzdDCBnzANBgkqhkiG9w0B
AQEFAAOBjQAwgYkCgYEArSQc/U75GB2AtKhbGS5piiLkmJzqEsp64rDxbMJ+xDrye0EN/q1U5Of+
RkDsaN/igkAvV1cuXEgTL6RlafFPcUX7QxDhZBhsYF9pbwtMzi4A4su9hnxIhURebGEmxKW9qJNY
Js0Vo5+IgjxuEWnjnnVgHTs1+mq5QYTA7E6ZyL8CAwEAATANBgkqhkiG9w0BAQQFAAOBgQB3Pw/U
QzPKTPTYi9upbFXlrAKMwtFf2OW4yvGWWvlcwcNSZJmTJ8ARvVYOMEVNbsT4OFcfu2/PeYoAdiDA
cGy/F2Zuj8XJJpuQRSE6PtQqBuDEHjjmOQJ0rV/r8mO1ZCtHRhpZ5zYRjhRC9eCbjx9VrFax0JDC
/FfwWigmrW0Y0Q==
     &lt;/ds:X509Certificate&gt;
    &lt;/ds:X509Data&gt;
   &lt;/ds:KeyInfo&gt;
   &lt;EncryptionMethod Algorithm=&quot;http://www.w3.org/2001/04/xmlenc#aes128-cbc&quot;&gt;
    &lt;xenc:KeySize xmlns:xenc=&quot;http://www.w3.org/2001/04/xmlenc#&quot;&gt;
     128
    &lt;/xenc:KeySize&gt;
   &lt;/EncryptionMethod&gt;
  &lt;/KeyDescriptor&gt;
  &lt;SingleLogoutService
   Binding=&quot;urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect&quot;
   Location=&quot;http://www.example.com:8080/fedlet/fedletSloRedirect&quot;
   ResponseLocation=&quot;http://www.example.com:8080/fedlet/fedletSloRedirect&quot; /&gt;
  &lt;SingleLogoutService
   Binding=&quot;urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST&quot;
   Location=&quot;http://www.example.com:8080/fedlet/fedletSloPOST&quot;
   ResponseLocation=&quot;http://www.example.com:8080/fedlet/fedletSloPOST&quot; /&gt;
  &lt;SingleLogoutService
   Binding=&quot;urn:oasis:names:tc:SAML:2.0:bindings:SOAP&quot;
   Location=&quot;http://www.example.com:8080/fedlet/fedletSloSoap&quot; /&gt;
  &lt;NameIDFormat&gt;
   urn:oasis:names:tc:SAML:2.0:nameid-format:transient
  &lt;/NameIDFormat&gt;
  &lt;AssertionConsumerService
   index=&quot;0&quot;
   isDefault=&quot;true&quot;
   Binding=&quot;urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST&quot;
   Location=&quot;http://www.example.com:8080/fedlet/fedletapplication&quot; /&gt;
  &lt;AssertionConsumerService
   index=&quot;1&quot;
   Binding=&quot;urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Artifact&quot;
   Location=&quot;http://www.example.com:8080/fedlet/fedletapplication&quot; /&gt;
 &lt;/SPSSODescriptor&gt;
 &lt;RoleDescriptor
  xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
  xmlns:query=&quot;urn:oasis:names:tc:SAML:metadata:ext:query&quot;
  xsi:type=&quot;query:AttributeQueryDescriptorType&quot;
  protocolSupportEnumeration=&quot;urn:oasis:names:tc:SAML:2.0:protocol&quot;&gt;
 &lt;/RoleDescriptor&gt;
 &lt;XACMLAuthzDecisionQueryDescriptor
  WantAssertionsSigned=&quot;false&quot;
  protocolSupportEnumeration=&quot;urn:oasis:names:tc:SAML:2.0:protocol&quot; /&gt;
&lt;/EntityDescriptor&gt;</programlisting>
   </step>
   <step>
    <para>Edit the extended metadata file for the Fedlet, such as
    <filename>$HOME/fedlet/sp-extended.xml</filename>, to set the certificate
    alias names to the alias for the Fedlet certificate, and the
    <literal>want*Signed</literal> and <literal>want*Encrypted</literal> values
    to <literal>true</literal>.</para>

    <para>If you reformat the file, take care not to add white space around
    string values in elements.</para>

    <programlisting language="xml" width="88"><?dbfo pgwide="1"?>
&lt;EntityConfig xmlns=&quot;urn:sun:fm:SAML:2.0:entityconfig&quot;
 xmlns:fm=&quot;urn:sun:fm:SAML:2.0:entityconfig&quot; hosted=&quot;1&quot;
 entityID=&quot;http://www.example.com:8080/fedlet&quot;&gt;
 &lt;SPSSOConfig metaAlias=&quot;/sp&quot;&gt;
  &lt;Attribute name=&quot;description&quot;&gt;
   &lt;Value&gt;&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;signingCertAlias&quot;&gt;
   &lt;Value&gt;test&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;encryptionCertAlias&quot;&gt;
   &lt;Value&gt;test&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;basicAuthOn&quot;&gt;
   &lt;Value&gt;false&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;basicAuthUser&quot;&gt;
   &lt;Value&gt;&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;basicAuthPassword&quot;&gt;
   &lt;Value&gt;&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;autofedEnabled&quot;&gt;
   &lt;Value&gt;false&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;autofedAttribute&quot;&gt;
   &lt;Value&gt;&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;transientUser&quot;&gt;
   &lt;Value&gt;anonymous&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;spAdapter&quot;&gt;
   &lt;Value&gt;&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;spAdapterEnv&quot;&gt;
   &lt;Value&gt;&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;fedletAdapter&quot;&gt;
   &lt;Value&gt;com.sun.identity.saml2.plugins.DefaultFedletAdapter&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;fedletAdapterEnv&quot;&gt;
   &lt;Value&gt;&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;spAccountMapper&quot;&gt;
   &lt;Value&gt;com.sun.identity.saml2.plugins.DefaultLibrarySPAccountMapper&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;useNameIDAsSPUserID&quot;&gt;
   &lt;Value&gt;false&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;spAttributeMapper&quot;&gt;
   &lt;Value&gt;com.sun.identity.saml2.plugins.DefaultSPAttributeMapper&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;spAuthncontextMapper&quot;&gt;
   &lt;Value&gt;com.sun.identity.saml2.plugins.DefaultSPAuthnContextMapper&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;spAuthncontextClassrefMapping&quot;&gt;
   &lt;Value
   &gt;urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport|0|default&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;spAuthncontextComparisonType&quot;&gt;
   &lt;Value&gt;exact&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;attributeMap&quot;&gt;
   &lt;Value&gt;*=*&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;saml2AuthModuleName&quot;&gt;
   &lt;Value&gt;&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;localAuthURL&quot;&gt;
   &lt;Value&gt;&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;intermediateUrl&quot;&gt;
   &lt;Value&gt;&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;defaultRelayState&quot;&gt;
   &lt;Value&gt;&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;appLogoutUrl&quot;&gt;
   &lt;Value&gt;http://www.example.com:8080/fedlet/logout&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;assertionTimeSkew&quot;&gt;
   &lt;Value&gt;300&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;wantAttributeEncrypted&quot;&gt;
   &lt;Value&gt;true&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;wantAssertionEncrypted&quot;&gt;
   &lt;Value&gt;true&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;wantNameIDEncrypted&quot;&gt;
   &lt;Value&gt;true&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;wantPOSTResponseSigned&quot;&gt;
   &lt;Value&gt;&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;wantArtifactResponseSigned&quot;&gt;
   &lt;Value&gt;&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;wantLogoutRequestSigned&quot;&gt;
   &lt;Value&gt;&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;wantLogoutResponseSigned&quot;&gt;
   &lt;Value&gt;&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;wantMNIRequestSigned&quot;&gt;
   &lt;Value&gt;&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;wantMNIResponseSigned&quot;&gt;
   &lt;Value&gt;&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;responseArtifactMessageEncoding&quot;&gt;
   &lt;Value&gt;URI&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;cotlist&quot;&gt;
   &lt;Value&gt;fedlet-cot&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;saeAppSecretList&quot;&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;saeSPUrl&quot;&gt;
   &lt;Value&gt;&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;saeSPLogoutUrl&quot;&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;ECPRequestIDPListFinderImpl&quot;&gt;
   &lt;Value&gt;com.sun.identity.saml2.plugins.ECPIDPFinder&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;ECPRequestIDPList&quot;&gt;
   &lt;Value&gt;&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;ECPRequestIDPListGetComplete&quot;&gt;
   &lt;Value&gt;&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;enableIDPProxy&quot;&gt;
   &lt;Value&gt;false&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;idpProxyList&quot;&gt;
   &lt;Value&gt;&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;idpProxyCount&quot;&gt;
   &lt;Value&gt;0&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;useIntroductionForIDPProxy&quot;&gt;
   &lt;Value&gt;false&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;spSessionSyncEnabled&quot;&gt;
   &lt;Value&gt;false&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;relayStateUrlList&quot;&gt;
  &lt;/Attribute&gt;
 &lt;/SPSSOConfig&gt;
 &lt;AttributeQueryConfig metaAlias=&quot;/attrQuery&quot;&gt;
  &lt;Attribute name=&quot;signingCertAlias&quot;&gt;
   &lt;Value&gt;test&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;encryptionCertAlias&quot;&gt;
   &lt;Value&gt;test&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;wantNameIDEncrypted&quot;&gt;
   &lt;Value&gt;true&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;cotlist&quot;&gt;
   &lt;Value&gt;fedlet-cot&lt;/Value&gt;
  &lt;/Attribute&gt;
 &lt;/AttributeQueryConfig&gt;
 &lt;XACMLAuthzDecisionQueryConfig metaAlias=&quot;/pep&quot;&gt;
  &lt;Attribute name=&quot;signingCertAlias&quot;&gt;
   &lt;Value&gt;test&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;encryptionCertAlias&quot;&gt;
   &lt;Value&gt;test&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;basicAuthOn&quot;&gt;
   &lt;Value&gt;false&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;basicAuthUser&quot;&gt;
   &lt;Value&gt;&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;basicAuthPassword&quot;&gt;
   &lt;Value&gt;&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;wantXACMLAuthzDecisionResponseSigned&quot;&gt;
   &lt;Value&gt;false&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;wantAssertionEncrypted&quot;&gt;
   &lt;Value&gt;true&lt;/Value&gt;
  &lt;/Attribute&gt;
  &lt;Attribute name=&quot;cotlist&quot;&gt;
   &lt;Value&gt;fedlet-cot&lt;/Value&gt;
  &lt;/Attribute&gt;
 &lt;/XACMLAuthzDecisionQueryConfig&gt;
&lt;/EntityConfig&gt;</programlisting>
   </step>

   <step>
    <para>In OpenAM console delete the original SP entity configuration for the
    Fedlet, and then import the updated metadata for the new configuration into
    OpenAM on the IDP side.</para>
   </step>

   <step>
    <para>Restart the Fedlet or the container in which it runs in order for
    the Fedlet to pick up the changes to the configuration properties and the
    metadata.</para>
   </step>
  </procedure>
 </section>
</chapter>
