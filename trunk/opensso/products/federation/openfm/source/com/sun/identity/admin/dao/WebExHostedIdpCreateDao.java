/** * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER. * * Copyright (c) 2009 Sun Microsystems Inc. All Rights Reserved * * The contents of this file are subject to the terms * of the Common Development and Distribution License * (the License). You may not use this file except in * compliance with the License. * * You can obtain a copy of the License at * https://opensso.dev.java.net/public/CDDLv1.0.html or * opensso/legal/CDDLv1.0.txt * See the License for the specific language governing * permission and limitations under the License. * * When distributing Covered Code, include this CDDL * Header Notice in each file and include the License file * at opensso/legal/CDDLv1.0.txt. * If applicable, add the following below the CDDL Header, * with the fields enclosed by brackets [] replaced by * your own identifying information: * "Portions Copyrighted [year] [name of copyright owner]" * * $Id: WebExHostedIdpCreateDao.java,v 1.1 2009/12/08 02:02:29 babysunil Exp $ */package com.sun.identity.admin.dao;import com.sun.identity.cot.COTException;import com.sun.identity.saml2.common.SAML2Constants;import com.sun.identity.saml2.jaxb.entityconfig.AttributeElement;import com.sun.identity.saml2.jaxb.entityconfig.EntityConfigElement;import com.sun.identity.saml2.jaxb.entityconfig.IDPSSOConfigElement;import com.sun.identity.saml2.jaxb.metadata.EntityDescriptorElement;import com.sun.identity.saml2.jaxb.metadata.IDPSSODescriptorElement;import com.sun.identity.saml2.meta.SAML2MetaException;import com.sun.identity.saml2.meta.SAML2MetaManager;import com.sun.identity.saml2.meta.SAML2MetaUtils;import com.sun.identity.workflow.AddProviderToCOT;import com.sun.identity.workflow.CreateSAML2HostedProviderTemplate;import com.sun.identity.workflow.ImportSAML2MetaData;import com.sun.identity.workflow.MetaTemplateParameters;import com.sun.identity.workflow.WorkflowException;import java.io.Serializable;import java.util.HashMap;import java.util.HashSet;import java.util.Iterator;import java.util.List;import java.util.Map;import java.util.Set;public class WebExHostedIdpCreateDao    implements Serializable {    private static String nameidMapping =        "urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified=uid";    public WebExHostedIdpCreateDao() {    }    public boolean createSamlv2HostedIdp(        String realm,        String entityId,        String cot,        String key,        List attrMapping) {        String metadata = null;        String extendedData = null;        String metaAlias = generateMetaAliasForIDP(realm);        if (metaAlias == null) {            return false;        }        Map map = new HashMap();        map.put(MetaTemplateParameters.P_IDP, metaAlias);        map.put(MetaTemplateParameters.P_IDP_S_CERT, key);        try {            metadata =                CreateSAML2HostedProviderTemplate.buildMetaDataTemplate(                entityId, map, SamlV2CreateSharedDao.getInstance().getRequestURL());            extendedData =                CreateSAML2HostedProviderTemplate.createExtendedDataTemplate(                entityId, map, SamlV2CreateSharedDao.getInstance().getRequestURL());        } catch (SAML2MetaException ex) {            throw new RuntimeException(ex);        }        try {            String[] results =                ImportSAML2MetaData.importData(null, metadata, extendedData);        } catch (WorkflowException ex) {            throw new RuntimeException(ex);        }        if ((cot != null) && (cot.length() > 0)) {            return (addIdptoCot(realm, cot, entityId));        }        if (!attrMapping.isEmpty()) {            if (!addAttributeMapping(realm, entityId, attrMapping)) {                return false;            }        }        return true;    }    public boolean importSamlv2HostedIdp(        String cot,        String stdMetadata,        String extMetadata,        List attrMapping) {        String realm = null;        String entityId = null;        try {            String[] results = ImportSAML2MetaData.importData(                null, stdMetadata, extMetadata);            realm = results[0];            entityId = results[1];        } catch (WorkflowException ex) {            throw new RuntimeException(ex);        }        if ((cot != null) && (cot.length() > 0)) {            return (addIdptoCot(realm, cot, entityId));        }        if (!attrMapping.isEmpty()) {            if (!addAttributeMapping(realm, entityId, attrMapping)) {                return false;            }        }        return true;    }    private boolean addAttributeMapping(String realm,        String entityId, List attrMapping) {        try {            SAML2MetaManager manager = new SAML2MetaManager();            EntityConfigElement config =                manager.getEntityConfig(realm, entityId);            IDPSSOConfigElement ssoConfig =                manager.getIDPSSOConfig(realm, entityId);            Map attribConfig = SAML2MetaUtils.getAttributes(ssoConfig);            List mappedAttributes = (List) attribConfig.get(                SAML2Constants.ATTRIBUTE_MAP);            mappedAttributes.addAll(attrMapping);            manager.setEntityConfig(realm, config);        } catch (SAML2MetaException ex) {            throw new RuntimeException(ex);        }        return true;    }    private String generateMetaAliasForIDP(String realm) {        try {            Set metaAliases = new HashSet();            SAML2MetaManager mgr = new SAML2MetaManager();            metaAliases.addAll(                mgr.getAllHostedIdentityProviderMetaAliases(realm));            metaAliases.addAll(                mgr.getAllHostedServiceProviderMetaAliases(realm));            String metaAliasBase = (realm.equals("/")) ? "/idp" : realm + "/idp";            String metaAlias = metaAliasBase;            int counter = 1;            while (metaAliases.contains(metaAlias)) {                metaAlias = metaAliasBase + Integer.toString(counter);                counter++;            }            return metaAlias;        } catch (SAML2MetaException ex) {            throw new RuntimeException(ex);        }    }    public boolean addIdptoCot(String realm, String cot, String entityId) {        boolean cotResult = false;        if ((cot != null) && (cot.length() > 0)) {            try {                AddProviderToCOT.addToCOT(realm, cot, entityId);                cotResult = true;            } catch (COTException ex) {                throw new RuntimeException(ex);            }        }        return cotResult;    }    public boolean updateIdpforWebEx(        String realm, String entityId, boolean signAuthnreq) {        boolean updateResult = false;        try {            SAML2MetaManager samlManager = new SAML2MetaManager();            EntityConfigElement entityConfig =                samlManager.getEntityConfig(realm, entityId);            IDPSSOConfigElement idpssoConfig =                samlManager.getIDPSSOConfig(realm, entityId);            EntityDescriptorElement entityDescriptor =                samlManager.getEntityDescriptor(realm, entityId);            IDPSSODescriptorElement idpssoDescriptor =                samlManager.getIDPSSODescriptor(realm, entityId);            if (idpssoDescriptor != null) {                if (signAuthnreq) {                    idpssoDescriptor.setWantAuthnRequestsSigned(true);                }                samlManager.setEntityDescriptor(realm, entityDescriptor);            }            List attrList = idpssoConfig.getAttribute();            if (idpssoConfig != null) {                for (Iterator it = attrList.iterator(); it.hasNext();) {                    AttributeElement avpnew = (AttributeElement) it.next();                    String name = avpnew.getName();                    if (name.equals("nameIDFormatMap")) {                        for (Iterator itt = avpnew.getValue().listIterator();                            itt.hasNext();) {                            String temp = (String) itt.next();                            if (temp.contains("unspecified")) {                                itt.remove();                            }                        }                        avpnew.getValue().add(0, nameidMapping);                    }                }            }            updateResult = true;            samlManager.setEntityConfig(realm, entityConfig);        } catch (SAML2MetaException ex) {            throw new RuntimeException(ex);        }        return updateResult;    }}
