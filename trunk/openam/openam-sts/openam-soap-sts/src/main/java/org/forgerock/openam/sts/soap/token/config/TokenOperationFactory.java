/*
 * The contents of this file are subject to the terms of the Common Development and
 * Distribution License (the License). You may not use this file except in compliance with the
 * License.
 *
 * You can obtain a copy of the License at legal/CDDLv1.0.txt. See the License for the
 * specific language governing permission and limitations under the License.
 *
 * When distributing Covered Software, include this CDDL Header Notice in each file and include
 * the License file at legal/CDDLv1.0.txt. If applicable, add the following below the CDDL
 * Header, with the fields enclosed by brackets [] replaced by your own identifying
 * information: "Portions Copyrighted [year] [name of copyright owner]".
 *
 * Copyright 2013-2015 ForgeRock AS.
 */

package org.forgerock.openam.sts.soap.token.config;

import org.apache.cxf.sts.token.provider.TokenProvider;
import org.apache.cxf.sts.token.renewer.TokenRenewer;
import org.apache.cxf.sts.token.validator.TokenValidator;
import org.forgerock.openam.sts.STSInitializationException;
import org.forgerock.openam.sts.TokenType;
import org.forgerock.openam.sts.config.user.TokenTransformConfig;

/**
 * Interface consumed by the Token*OperationProvider classes to obtain instances of the TokenValidator, TokenProvider,
 * or TokenRenewer classes for the various token types generated by the sts.
 */
public interface TokenOperationFactory {
    /**
     * Called to obtain the set of TokenValidator instances to perform pure token validation (not transformation).
     */
    TokenValidator getTokenStatusValidatorForType(TokenType tokenType) throws STSInitializationException;

    /**
     * Called to obtain the set of TokenProvider instances to create a new token in the context of token transformation -
     * the validate operation called with a TokenType other than STATUS.
     */
    TokenProvider getTokenProviderForTransformOperation(TokenTransformConfig tokenTransformConfig) throws STSInitializationException;

    /**
     * Called to obtain the set of TokenValidate instances to validate the initial token in the context of token transformation -
     * the validate operation called with a TokenType other than STATUS.
     */
    TokenValidator getTokenValidatorForTransformOperation(TokenTransformConfig tokenTransformConfig) throws STSInitializationException;

    /**
     * Called to obtain the set of of TokenProvider instances to satisfy the issue operation.
     */
    TokenProvider getTokenProviderForType(TokenType tokenType) throws STSInitializationException;

    /**
     * Called to obtain a TokenValidator used in the context of token renewal.
     * TODO: are we supporting renew?
     */
    TokenValidator getTokenValidatorForRenewal(TokenType tokenType) throws STSInitializationException;
    /**
     * Called to obtain the set of TokenRenewer instances to satisfy the renew operation.
     * Note that the TokenRenewOperation encapsulates a set of TokenValidators and TokenRenewers, as the
     * process of renewing a token first involves validating the existing token, and then renewing the existing token.
     * TODO: are we supporting renew?
     */
    TokenRenewer getTokenRenewerForType(TokenType tokenType) throws STSInitializationException;
}
