<?xml version="1.0" encoding="UTF-8"?>
<!--
  ! CCPL HEADER START
  !
  ! This work is licensed under the Creative Commons
  ! Attribution-NonCommercial-NoDerivs 3.0 Unported License.
  ! To view a copy of this license, visit
  ! http://creativecommons.org/licenses/by-nc-nd/3.0/
  ! or send a letter to Creative Commons, 444 Castro Street,
  ! Suite 900, Mountain View, California, 94041, USA.
  !
  ! You can also obtain a copy of the license at
  ! src/main/resources/legal-notices/CC-BY-NC-ND.txt.
  ! See the License for the specific language governing permissions
  ! and limitations under the License.
  !
  ! If applicable, add the following below this CCPL HEADER, with the fields
  ! enclosed by brackets "[]" replaced with your own identifying information:
  !      Portions Copyright [yyyy] [name of copyright owner]
  !
  ! CCPL HEADER END
  !
  !      Copyright 2011-2014 ForgeRock AS
  !    
-->
<chapter xml:id='chap-about-jee-agents'
 xmlns='http://docbook.org/ns/docbook'
 version='5.0' xml:lang='en'
 xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
 xsi:schemaLocation='http://docbook.org/ns/docbook
                     http://docbook.org/xml/5.0/xsd/docbook.xsd'
 xmlns:xlink='http://www.w3.org/1999/xlink'
 xmlns:xinclude='http://www.w3.org/2001/XInclude'>
 <title>About OpenAM Java EE Policy Agents</title>
 
 <para>
  A <firstterm>Java EE policy agent</firstterm> is an OpenAM add-on component that
  functions as a Policy Enforcement Point (PEP) for applications
  deployed on a Java EE-based servlet container or application server.
  The policy agent protects web-based applications
  and implements single sign-on (SSO) capabilities
  for the applications deployed in the container.
 </para>

 <para>
  OpenAM Java EE policy agents provide medium touch integration
  and run on a wide variety of servlet containers and
  application servers.

  The installation process for Java EE policy agents differ slightly for each
  container type and may
  require some configuration and code changes to the configuration files.
  The installation procedures for each container type are presented later in this
  guide.
 </para>

 <para>
  This chapter covers what Java EE policy agents do, their key features,
  and how they work.</para>

 <note xml:id="one-agent-per-container">
  <para>
   A single policy agent can work with multiple applications.
   You therefore install only one policy agent per application server.
  </para>

  <para>
   Installing more than one policy agent in an application server is not supported.
  </para>
 </note>
 
 <section xml:id="example-j2ee-agent-components">
  <title>Java EE Policy Agent Components</title>

  <para>The OpenAM Java EE policy agent is comprised
   of four main components: the <firstterm>policy agent filter</firstterm>,
   a container-specific <firstterm>Java Authentication and Authorization Server (JAAS) realm
   implementation</firstterm>, an agent application war file,
   and an <firstterm>agent installer</firstterm>.</para>
  <para>
   The installer integrates the other three components within the
   container, after which the components run transparently to the client,
   connecting to OpenAM through its client SDK for
   authentication, authorization, session, policy, logging and other services.
  </para>

  <itemizedlist>
   <listitem>
    <para><emphasis role="bold">Java EE Policy Agent Filter</emphasis>.
     The Java EE Policy Agent filter is a
     servlet filter referenced within the deployment descriptor file,
     <filename>web.xml</filename> of each protected application in the
     container. Applications that do not have their deployment descriptor file
     updated to use the agent servlet filter will not be protected.
     The filter's main function is to intercept an inbound client access request
     for a protected resource and run through a set of task handlers, including
     determining if the user has a session ID or token.
     If the user does not have a session token in the browser cookie,
     <literal>iPlanetDirectoryPro</literal>,
     then the policy agent immediately
     redirects the user to OpenAM for authentication.
     Once the user has a session token, the agent retrieves the agent profile from
     OpenAM and continues to process the request based on the property settings
     defined in the agent profile.
    </para>
   </listitem>
   <listitem>
    <!-- Based on blogs.forgerock.com/petermajor/2013/088/java-ee-agent-internals/ -->
    <para><emphasis role="bold">Agent Realm</emphasis>. The Agent
     <emphasis>realm</emphasis> is not strictly a "component," but is a container-specific
     integration to allow support for Java Authentication and Authorization Service
     (JAAS).
     The Agent Realm, or more accurately the <emphasis>JAAS Realm</emphasis>,
     leverages the underlying
     Java EE container's ability to retrieve the user's identity and populate the
     principal in the <literal>HTTPServletRequest</literal> object.

     The realm also allows you to take advantage of the Java EE container's declarative and programmatic
     security settings that define role-based access control over the web resources.
     You can define the roles in the descriptor files and then define
     the user's roles within OpenAM, allowing the application to check authorization.
     JAAS support provides another powerful feture in that you can implement
     Java EE permissions-related annotations, such as @RolesAllowed and @DeclareRoles,
     which are specifically designed to secure Enterprise Java Bean (EJB) modules
     for authenticated users.
    </para>
   </listitem>
   <listitem>
    <para><emphasis role="bold">Agent Application</emphasis>.
     The Agent application, deployed as <literal>agentapp.war</literal>,
     processes notifications from OpenAM, refreshes the caches, and runs
     processes for cross-domain single sign-on (CDSSO). The <literal>agentapp.war</literal>
     file also displays error messages if the cross site scripting (XSS) detector is enabled.

     Note that there are some subtle container-dependent configuration differences
     that may affect the installation of <literal>agentapp.war</literal>.
     For certain containers, the installer installs the <literal>agentapp.war</literal>
     file; for others, you must manually install the file as part of the
     agent installation.
    </para>
    <note><para>Technically,
     the <literal>agentapp.war</literal> is not a required component if you have no
     plans to use CDSSO and notifications, but
     it is strongly recommended that you deploy this <literal>agentapp.war</literal>
     as notifications from OpenAM are extremely useful.
    </para></note>
   </listitem>
   <listitem>
    <para><emphasis role="bold">Agent Installer</emphasis>.
     The agent installer, invoked by the <command>agentadmin</command> tool,
     automates the policy agent installation within a container.
     The agent installer's configuration is set in an XML descriptor file,
     (<filename>config/configure.xml</filename>), defining the user interactions
     when the install, custom-install, migrate, and uninstall subcommands are
     run, and the tasks needed to complete installation process, such as
     creating the agent directory layout, creating backups for the container's
     configuration files, and encrypting the agent profile's password and saving it
     in the agent bootstrap configuration file plus other tasks.
    </para>
   </listitem>
   <listitem>
    <para><emphasis role="bold">openssoclientsdk.jar</emphasis>.
     Although not technically
     a part of the Java EE policy agent, the Java EE agent
     bundles the OpenAM Client SDK for the
     container. The SDK provides the set of APIs that are designed
     to work with OpenAM's service and security infrastructure.
    </para>
   </listitem>
  </itemizedlist>

  <figure xml:id="figure-j2ee-policy-agent" >
   <title>Java EE Policy Agent</title>
   <mediaobject >
    <alt>Java EE Policy Agent</alt>
    <imageobject>
     <imagedata fileref="images/j2ee-policy-agent.png"
                format="PNG" />
    </imageobject>
    <textobject>
     <para>The Java EE policy agent is installed in an application server.
     </para>
    </textobject>
   </mediaobject>
  </figure>

  </section>

 <section xml:id="about-j2ee-agent-properties">
  <title>About Java EE Policy Agent Properties</title>
  <para>All Java EE policy agent configuration settings can be stored centrally
   in the OpenAM configuration store, which allows you
   to configure your policy agents on the OpenAM console for easier management and
   convenience.
   Any property change made
   in OpenAM using the console or the <command>ssoadm</command> command-line tool is
   immediately communicated to the agent cache via a notification.
   Many policy agent properties are hot-swap enabled, allowing the change
   to take effect immediately without a server restart.
  </para>
  <para>Policy agent configuration settings can also be stored locally in a
   Java properties flat-file, such as
   <filename>Agent_001/config/OpenSSOAgentConfiguration.properties</filename>,
   which is created when you install the agent.
   If you implement a local properties file, you must make all
   configuration changes by modifying property values in the file.
  </para>
  <para>While the majority of agent properties are hot swap-enabled, there are
   a number that are not. These non-hot swappable properties are indicated in the
   OpenAM console or local properties file as such. Any changes to these non-hot swappable
   properties require a container restart. To avoid any configuration errors that
   could take effect immediately, you can lock the properties by setting the
   <literal>com.sun.identity.agents.config.lock.enable</literal> to <literal>true</literal>
   in the OpenAM bootstrap file, <filename>OpenAMAgentBootstrap.properties</filename>,
   and then re-start the container.
  </para>

 </section>

 <section xml:id="filter-modes">
   <title>Java EE Agent Filter Modes of Operation</title>
   <para>The agent filter intercepts all inbound client requests
    to access a protected resource and processes the request based on
    a global configuration property,
    <literal>com.sun.identity.agents.config.filter.mode</literal>, set in
    the policy agent profile on OpenAM.
    The configuration setting determines the
    filter mode of operation that should be carried out on the intercepted
    inbound request.
   </para>

  <!--figure xml:id="figure-agent-filter-modes" >
   <title>Java EE Policy Agent Filter Modes</title>
   <mediaobject >
    <alt>Java EE Policy Agent Filter Modes</alt>
    <imageobject>
     <imagedata fileref="images/agent-filter-modes.png"
                format="PNG" />
    </imageobject>
    <textobject>
     <para>The Java EE policy agent filter mode determines the operation taken
      for the inbound client request. For production environments, it is
      recommended that the filter be set to <literal>ALL</literal>.
     </para>
    </textobject>
   </mediaobject>
  </figure-->

   <para>The filter mode property can be set to one of the following values:</para>

   <itemizedlist>
    <listitem>
     <para><emphasis role="bold">NONE</emphasis>.
      Specifies that nothing should be done with the inbound request.
      This mode is primarily used in development or testing environments and
      should never be used in production.

      If logging is enabled, the agent filter
      logs all intercepted requests for auditing purposes.</para>
    </listitem>
    <listitem>
     <para><emphasis role="bold">SSO_ONLY</emphasis>.
      Specifies that authentication should be enforced to all users who try
      to access protected web resources. The filter invokes the OpenAM
      Authentication service to verify the identity of the user.
      If the user's identity is verified, the user is issued a session token
      through OpenAM's Session service.
     </para>
    </listitem>
    <listitem>
     <para><emphasis role="bold">J2EE_POLICY</emphasis>.
      Specifies that authorization should be enforced through the
      container's Java EE security
      policies, which may be configured declaratively by means of the
      XML deployment descriptor files using <literal>auth-constraint</literal>,
      <literal>security-constraint</literal> and other <literal>web.xml</literal>
      elements, or programmatically through methods calls to the Security APIs.
      The user identity is determined exactly in the same way as SSO_ONLY, but
      is additionally authenticated into the specific container realm, where
      authorization will be run from the container.

      When the filter mode is <literal>J2EE_POLICY</literal>,
      no OpenAM-based URL policies will be enforced.
      </para>
    </listitem>
    <listitem>
     <para><emphasis role="bold">URL_POLICY</emphasis>.
      Specifies that authorization should be enforced only
      by OpenAM's URL resource-based policies.
      When the filter mode is <literal>URL_POLICY</literal>,
      no Jave EE policies will be enforced.

      The <literal>URL_POLICY</literal> mode is commonly used
      in production deployments.
     </para>
    </listitem>

    <listitem>
     <para><emphasis role="bold">ALL</emphasis>.
      Specifies that SSO_ONLY, J2EE_POLICY, and URL_POLICY should be
      enforced. This setting ensures that the user gets properly authenticated
      with a valid session token ID and then authorized through the J2EE container's
      declarative or programmatic security settings and OpenAM's URL-based
      policies to access the web resource.
     </para>
    </listitem>
   </itemizedlist>

   <para>For more information, see
    <link xlink:show="new"
          xlink:href="jee-users-guide#chap-agents#j2ee-agent-general-properties"
          xlink:role="http://docbook.org/xlink/role/olink"
     ><citetitle>Configuring J2EE Policy Agent Global Properties</citetitle></link>.
   </para>
  </section>

 <section xml:id="jee-agent-not-enforced-list">
  <title>Not-Enforced URI and Client IP Lists</title>
   <para>The Java EE policy agent supports properties to bypass authentication
    and grant immediate access to resources not requiring protection, such
    as images, stylesheets, or static HTML pages.</para>

   <para>
    You can configure a Not-Enforced URI List using the
    <literal>com.sun.identity.agents.config.notenforced.uri</literal> property
    that grants the user access to resources whose URIs match those in the list.
   </para>
   <para>
    For example, you can set URI patterns with wildcards in the OpenAM console as follows:</para>
    <screen>
     /logout.html
     /images/*
     /css/-*-
     /*.jsp?locale=*
    </screen>
    <para>The Java EE policy agent also supports a Not-Enforced Client IP List, which
      specifies the client IP addresses that can be excluded from authentication
      and authorization. This property is useful to allow administrators access
      to the web site from a certain IP address or allow a search engine access
      to the web resources.
    </para>

   <para>For more information on the Not-Enforced URI and Not-Enforced Client IP
    Lists and other related properties, see
    <link xlink:show="new"
          xlink:href="jee-users-guide#j2ee-agent-not-enforced-uri-properties"
          xlink:role="http://docbook.org/xlink/role/olink"
     ><citetitle>Not Enforced URI Processing Properties</citetitle></link>.</para>
  </section>

 <section xml:id="j2ee-process-flow">
  <title>Java EE Process Flow</title>
  <para>To illustrate how Java EE policy agents work, it is first instructive to understand
   a simplified and generic web application example with OpenAM. While the specific
   configuration settings differ depending on the container or application server,
   the architectural components that make up the OpenAM Java EE policy agent are the
   same.</para>

  <para>
   Imagine a web application, such as an e-commerce site,
   deployed in multiple containers: a client application server (not fully displayed),
   a web container and an Enterprise Java Bean
   (EJB) container for the business logic.
   After the user is granted access to a resource through the Java EE policy agent
   and OpenAM,
   the servlet instance processes the request and
   determines which business logic objects or Java bean classes to invoke
   from the Enterprise Java Beans (EJB) container.
   The EJB container may have dedicated EJB components that provide specific transactions,
   such as sales order creation or processing.
   The EJB processes the transactions and retrieves any data from the database.
   The servlet constructs a response and then forwards a JavaServer Page (JSP)
   or JavaServer Face page to the client.
  </para>

  <figure xml:id="figure-j2ee-components" >
   <title>Java EE Policy Agent</title>
   <mediaobject >
    <alt>Java EE Policy Agent</alt>
    <imageobject>
     <imagedata fileref="images/j2ee-components.png"
                format="PNG" />
    </imageobject>
    <textobject>
     <para>The Java EE policy agent is installed in an application server.
     </para>
    </textobject>
   </mediaobject>
  </figure>

  <important>
   <para>Do not install the Java EE policy agent in the same container as OpenAM.

    OpenAM must be up and running before the Java EE policy agent starts.
    This cannot be guaranteed when both run in the same container.

    ForgeRock does not support configurations where
    OpenAM and the Java EE policy agent are installed in the same container.
   </para>
  </important>

  <para>The following sequence diagram shows how the pieces fit together when a Java
   EE client accesses a resource protected by a policy agent. This diagram is
   simplified to show only the Java EE policy agent steps rather than to describe
   every possible case.</para>

  <figure xml:id="figure-jee-agent-process-flow" >
   <title>Java EE Policy Agent Process Flow</title>
   <mediaobject >
    <alt>Java EE Policy Agent Process Flow</alt>
    <imageobject>
     <imagedata fileref="images/jee-agent-process-flow.png"
                format="PNG" />
    </imageobject>
    <textobject>
     <para>The sequence diagram as described in images/jee-agent-process-flow.txt.
     </para>
    </textobject>
   </mediaobject>
  </figure>

  <!-- Need to verify this stuff -->
  <orderedlist>
   <listitem>
    <para>The web client or user attempts to access a protected resource
     at <literal>www.example.com</literal> by pointing her browser to a page
     in a protected application. The agent filter intercepts the inbound
     request to the server.
    </para>
   </listitem>
   <listitem>
    <para>The agent filter authenticates the agent account and retrieves the
     agent profile from OpenAM.
    </para>
   </listitem>
   <listitem>
    <para>The agent profile is returned. For this example, we assume that the
     filter mode is set to <literal>ALL</literal>.</para>
   </listitem>
   <listitem>
    <para>The agent filter checks if the requested resource is on the Not-Enforced
     URI list. If yes, skip to step 18.
    </para>
   </listitem>
   <listitem>
    <para>The agent filter checks if the session cookie, <literal>iPlanetDirectoryPro</literal>,
     is present. If yes, skip to step 11.
    </para>
   </listitem>
   <listitem>
    <para>The filter redirects the client browser to the OpeAM Authentication
     Service, which displays a login page.</para>
   </listitem>
   <listitem>
    <para>The client must input her credentials.</para>
   </listitem>
   <listitem>
    <para>Once the client has been authenticated, create a session ID.
     Re-direct back to the web server with a newly issued session ID,
     contained in the <literal>iPlanetDirectoryPro</literal> browser cookie.</para>
   </listitem>
   <listitem>
    <para>The request is once again intercepted by the servlet filter.
    </para>
   </listitem>
   <listitem>
    <para>The agent filter checks for the session ID, which is found.</para>
   </listitem>
   <listitem>
    <para>The session token ID gets validated by OpenAM's Session Service. If not valid,
     go back to step 5.</para>
   </listitem>
   <listitem>
    <para>OpenAM validates the session ID.</para>
   </listitem>
   <listitem>
    <para>The agent filter authenticates into the container's security realm
     and has the correct roles assigned, the container determines if the
     user's role has authorization to access the resource. Assume authorization
     is allowed.
    </para>
   </listitem>
   <listitem>
    <para>The agent filter checks the URL_BASED policy in OpenAM.
    </para>
   </listitem>
   <listitem>
    <para>OpenAM's Policy Service
     is called to return an authorization decision to allow the client or user
     access to the protected resource. The Policy Service returns an
     <literal>ALLOW</literal>.
    </para>
   </listitem>
   <listitem>
    <para>The agent filter writes the policy decision to an audit log.</para>
   </listitem>
   <listitem>
    <para>Pass through to the web resource.
    </para>
   </listitem>
   <listitem>
    <para>The decision and request is logged.</para>
   </listitem>
   <listitem>
    <para>Pass through to the web resource.</para>
   </listitem>
   <listitem>
    <para>The web resource performs the Java EE security checks.</para>
   </listitem>
   <listitem>
    <para>Response returns the resource from <literal>www.example.com</literal></para>
   </listitem>
  </orderedlist>

 </section>

 <section xml:id="j2ee-agent-features">
  <title>Java EE Policy Agent Features</title>
  <para>The Java EE policy agent provides a number of additional features
   useful for your deployment.
  </para>

  <section xml:id="jee-agent-attribute-fetching">
   <title>Attribute Fetch Modes</title>

   <!-- TODO: Add examples/user cases of each type of attribute fetch -->
   <para>Java EE policy agents provides the capability
    to fetch and inject user information into HTTP headers, request objects, and
    cookies and pass them on to the protected client applications.
    The client applications can then personalize content using these attributes
    in their web pages or responses.
   </para>
   <para>Specifically, you can configure the type of
    attributes to be fetched and the associated mappings for the attributes
    names used on OpenAM to those values used in the containers. The Java EE
    policy agents securely fetches the user and session data from the
    authenticated user as well as policy response attributes.
   </para>
   <para>For more details, see
    <link xlink:show="new"
          xlink:href="jee-users-guide#configuring-j2ee-policy-agents"
          xlink:role="http://docbook.org/xlink/role/olink">
     <citetitle>Configuring Java EE Policy Agents</citetitle></link>.</para>
  </section>

  <section xml:id="agent-login-attempt-limits">
   <title>Login Attempt Limits</title>
   <para>When the user-agent does not present a valid SSO token, the agent
    will redirect the user to the login URL configured in OpenAM.

    The Java EE policy agent can be configured to limit the login attempts
    made to the policy agent to mitigate against any redirect loops that may result
    in an error page presented to the end-user.</para>
   <para>
    You can use the <literal>com.sun.identity.agents.config.login.attempt.limit</literal>
    property to specify a non-zero value for the number of login attempts.
    For example, if the property is set to 3, then the agent will block the access
    request to the protected resource on the fourth login request.
   </para>
   <para>
    You can also limit the number of redirections the agent can take for a single
    browser session by setting the
    <literal>com.sun.identity.agents.config.redirect.attempt.limit</literal>.
   </para>
   <para>For more details, see
    <link xlink:show="new"
          xlink:href="jee-users-guide#chap-agents.html#j2ee-agent-general-properties"
          xlink:role="http://docbook.org/xlink/role/olink">
     <citetitle>General Properties</citetitle></link>.</para>
  </section>

  <section xml:id="fqdn-checking">
   <title>FQDN Checking</title>
   <para>The Java EE policy agent requires that clients accessing
    protected resources use valid URLs with fully qualified domain names (FQDNs).
    If invalid URLs are referenced, policy evaluation can
    fail as the fully qualified domain name (FQDN) will not match the requested
    URL, leading to blocked access to the resource.
    Misconfigured URLs can also result in incorrect policy evaluation for
    subsequent access requests.
   </para>
   <para>There are cases where clients may specify resource URLs that differ from
    the FQDNs stored in OpenAM policies, for example, in load
    balanced and virtual host environments. To handle these cases,
    the Java EE policy agent supports FQDN Checking properties:
    <literal>FQDN Default</literal>
    and <literal>FQDN Virtual Host Map</literal> properties.
   </para>
   <para>The <literal>FQDN Default</literal> property specifies the default URL
    with valid hostname.
    The property ensures that the policy agent can redirect to
    a URL with a valid hostname should it discover an invalid URL in the client request.</para>
   <para>The <literal>FQDN Virtual Host Map</literal> property stores map keys
    and their corresponding values, allowing invalid URLs, load balanced URLs,
    and virtual host URLs to be correctly mapped to valid URLs.
    Each entry in the Map has precedence over the <literal>FQDN Default</literal>
    setting, so that if no valid URLs exist in the <literal>FQDN Virtual Host Map</literal>
    property, the agent redirects to
    the value specified in the <literal>FQDN Default</literal> property.
   </para>
   <para>If you want the agent to redirect to a URL other than the one specified
    in the <literal>FQDN Default</literal> property, then it is good practice to
    include any anticipated invalid URLs in the <literal>FQDN Virtual Host Map</literal> property
    and map it to a valid URL.
   </para>
   <para>For more details, see
    <link xlink:show="new"
          xlink:href="jee-users-guide#chap-agents.html#j2ee-agent-fqdn-properties"
          xlink:role="http://docbook.org/xlink/role/olink">
     <citetitle>Fully Qualified Domain Name Checking Properties</citetitle></link>.</para>
  </section>

  <section xml:id="cookie-reset">
   <title>Cookie Reset Properties</title>
   <para>OpenAM provides cookie reset properties that the agent carries out
    prior to redirecting the client to a login page for authentication.
   </para>
   <para>Cookie reset is typically used when multiple parallel authentication
    mechanisms are in play with the policy agent and another authentication system.
    The policy agent can reset the cookies set by the other mechanism before
    redirecting the client to a login page.
   </para>
   <para>The cookie reset properties include a name list specifying all of the
    cookies that will reset, a domain map specifying the domains set for each cookie,
    and a path map specifying the path from which the cookie will be reset.
   </para>
   <para>If you have enabled attribute fetching using cookies to retrieve user
    data, it is good practice to use cookie reset, which will reset once you want
    to access an enforced URL without a valid session.
   </para>
   <para>For more details, see
    <link xlink:show="new"
          xlink:href="jee-users-guide#chap-agents.html#j2ee-agent-cookie-reset-properties"
          xlink:role="http://docbook.org/xlink/role/olink">
     <citetitle>Cookie Reset Properties</citetitle></link>.</para>
  </section>

  <section xml:id="agent-cdsso">
   <title>Java EE Policy Agent and CDSSO</title>
   <para>Cross domain single sign-on (CDSSO) allows the Java EE policy agent
    to handle a validated session cookie between multiple domains.
    CDSSO is best implemented in an environment where Java EE policy agents
    protect applications accessible by partners and other trusted parties.
   </para>
   <para>
    The Java EE policy agent works with an OpenAM component called
    a <literal>CDCServlet</literal> that generates a
    self-submitting form containing
    the valid session token from one domain.
    The form gets auto-submitted to the policy agent endpoint via a POST
    operation.
    The policy agent processes the request and extracts the session ID, which is
    again validated by OpenAM. If validation is successful,
    the policy agent sets the cookie in alternate domain. The
    client can now access a resource in that domain.
   </para>

   <para>For more details, see
    <link xlink:show="new"
          xlink:href="admin-guide#chap-agents.html#chap-cdsso"
          xlink:role="http://docbook.org/xlink/role/olink">
     <citetitle>Configuring Cross Domain Single Sign-On</citetitle></link>.</para>
  </section>

 </section>

 <section xml:id="j2ee-agent-configuration">
  <title>How Java EE Policy Agents are Configured</title>

  <para>You install Java EE policy agents in the web application containers
   serving web applications that you want to protect. Java EE policy agents are
   themselves web applications running in the container whose applications you
   configure OpenAM to protect. By default, the Java EE policy agent has only
   enough configuration at installation time to connect to OpenAM in order to
   get the rest of its configuration from the OpenAM configuration store. With
   nearly all configuration stored centrally, you can manage policy agents
   centrally from the OpenAM console.<footnote><para>You can opt to store the
    agent configuration locally if necessary.</para></footnote></para>

  <para>
   For each web application that you protect,
   you also configure at least the deployment descriptor
   to filter requests through the policy agent.
   ForgeRock delivers the Java EE policy agents with a sample application .war file
   under
   <filename>j2ee_agents/<replaceable>container</replaceable>_agent/sampleapp/</filename>
   demonstrating the configuration to use to protect your web application.
   In the <filename>WEB-INF/web.xml</filename> deployment descriptor file
   for the sample application,
   you find an example of the filter configuration
   that you must add to the deployment descriptors of your applications.
  </para>

  <para>You configure Java EE policy agents per OpenAM realm. Thus to access
   centralized configuration, you select Access Control &gt; <replaceable>Realm
    Name</replaceable> &gt; Agents &gt; Java EE &gt; <replaceable>Agent
    Name</replaceable>. Java EE policy agent configuration is distinct from
   policy configuration. The only policy-like configuration that you apply to
   Java EE policy agents is indicating which URLs in the web server can be
   ignored (<firstterm>not enforced URLs</firstterm>) and which client IP
   address are exempt from policy enforcement (<firstterm>not enforced
    IPs</firstterm>).</para>

  <para>For each aspect of Java EE policy agent configuration, you can configure
   the policy agent through the OpenAM console during testing, and then
   export the resulting configuration in order to script configuration in
   your production environment.</para>
 </section>
</chapter>
