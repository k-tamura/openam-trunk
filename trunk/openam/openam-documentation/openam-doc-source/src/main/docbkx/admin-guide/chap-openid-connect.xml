<?xml version="1.0" encoding="UTF-8"?>
<!--
  ! CCPL HEADER START
  !
  ! This work is licensed under the Creative Commons
  ! Attribution-NonCommercial-NoDerivs 3.0 Unported License.
  ! To view a copy of this license, visit
  ! http://creativecommons.org/licenses/by-nc-nd/3.0/
  ! or send a letter to Creative Commons, 444 Castro Street,
  ! Suite 900, Mountain View, California, 94041, USA.
  !
  ! You can also obtain a copy of the license at
  ! src/main/resources/legal-notices/CC-BY-NC-ND.txt.
  ! See the License for the specific language governing permissions
  ! and limitations under the License.
  !
  ! If applicable, add the following below this CCPL HEADER, with the fields
  ! enclosed by brackets "[]" replaced with your own identifying information:
  !      Portions Copyright [yyyy] [name of copyright owner]
  !
  ! CCPL HEADER END
  !
  !      Copyright 2013-2014 ForgeRock AS
  !      Copyright 2014 Nomura Research Institute, Ltd
  !    
-->
<chapter xml:id='chap-openid-connect'
         xmlns='http://docbook.org/ns/docbook'
         version='5.0' xml:lang='en'
         xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
         xsi:schemaLocation='http://docbook.org/ns/docbook
                             http://docbook.org/xml/5.0/xsd/docbook.xsd'
         xmlns:xlink='http://www.w3.org/1999/xlink'>
 <title>Managing OpenID Connect 1.0 Authorization</title>
 <indexterm>
  <primary>Authorization</primary>
  <secondary>Configuring</secondary>
 </indexterm>
 <indexterm>
  <primary>OpenID Connect 1.0</primary>
 </indexterm>

 <para>
  This chapter covers OpenAM support for OpenID Connect 1.0.
  <link
   xlink:href="http://openid.net/connect/"
   xlink:show="new"
  >OpenID Connect</link> 1.0 is an authentication layer built on OAuth 2.0.
  OpenID Connect 1.0 is a specific implementation of OAuth 2.0
  where the identity provider that runs the authorization server
  also holds the protected resource
  that the third-party application aims to access.
  This resource is the <emphasis>UserInfo</emphasis>,
  information about the authenticated end user expressed in a standard format.
  In this way OpenID Connect 1.0 allows relying parties
  both to verify the identity of the end user
  and also to obtain user information using REST.
  This contrasts with OAuth 2.0, which only defines the authorization mechanism.
 </para>

 <itemizedlist>
  <para>
   The names used in OpenID Connect 1.0 differ from those used in OAuth 2.0.
   In OpenID Connect 1.0, the key entities are the following.
  </para>

  <listitem>
   <para>
    The <firstterm>end user</firstterm> (OAuth 2.0 resource owner)
    whose user information the application needs to access.
   </para>

   <para>
    The end user wants to use an application
    through existing identity provider account
    without signing up to and creating credentials for yet another web service.
   </para>
  </listitem>

  <listitem>
   <para>
    The <firstterm>Relying Party</firstterm> (RP) (OAuth 2.0 client)
    needs access to the end user's protected user information.
   </para>

   <para>
    For example, an online mail application needs to know which end user
    is accessing the application in order to present the correct inbox.
   </para>

   <para>
    As another example, an online shopping site needs to know which end user
    is accessing the site in order to present
    the right offerings, account, and shopping cart.
   </para>
  </listitem>

  <listitem>
   <para>
    The <firstterm>OpenID Provider</firstterm> (OP)
    (OAuth 2.0 authorization server and also resource server)
    that holds the user information and grants access.
   </para>

   <para>
    OpenAM can play this role in an OpenID Connect deployment.
   </para>

   <para>
    The OP effectively has the end user's consent to providing the RP
    with access to some of its user information.
    As OpenID Connect 1.0 defines unique identification for an account
    (subject identifier + issuer identifier),
    the RP can use this as a key to its own user profile.
   </para>

   <para>
    In the case of the online mail application,
    this key could be used to access the mailboxes
    and related account information.
    In the case of the online shopping site,
    this key could be used to access
    the offerings, account, shopping cart and so forth.
    The key makes it possible to serve users as if they had local accounts.
   </para>
  </listitem>
 </itemizedlist>

 <para>
  In OpenID Connect the relying party can verify claims
  about the identity of the end user,
  and log the user out at the end of a session.
  OpenID Connect also makes it possible
  to discover the OpenID Provider for an end user,
  and to register relying party client applications dynamically.
  OpenID connect services are built on
  OAuth 2.0, JSON Web Token (JWT), WebFinger and Well-Known URIs.
 </para>

 <section xml:id="about-openid-connect-support">
  <title>About OpenID Connect 1.0 Support in OpenAM</title>

  <para>
   In its role as OpenID Provider, OpenAM
   lets OpenID Connect relying parties (clients) discover its capabilities,
   handles both dynamic and static registration of OpenID Connect relying parties,
   responds to relying party requests with authorization codes, access tokens,
   and user information
   according to the Authorization Code and Implicit flows of OpenID Connect,
   and manages sessions.
  </para>

  <para>
   This section describes how OpenAM fits into the OpenID Connect picture
   in terms of the roles that it plays
   in the authorization code and implicit flows,
   provider discovery, client registration, and session management.
  </para>

  <section xml:id="openam-openid-basic-client-profile">
   <title>OpenID Connect Authorization Code Flow</title>

   <para>
    The OpenID Connect Authorization Code Flow specifies
    how the relying party interacts with the OpenID Provider,
    in this case OpenAM,
    based on use of the OAuth 2.0 authorization grant.
    The following sequence diagram shows successful processing
    from the authorization request,
    through grant of the authorization code, access token, and ID token,
    and optional use of the access token to get information about the end user.
   </para>

   <mediaobject xml:id="figure-openid-connect-basic">
    <alt>OpenAM in OpenID Connect Authorization Code Flow</alt>
    <imageobject>
     <imagedata fileref="images/openid-connect-basic.png" format="PNG"/>
    </imageobject>
    <textobject>
     <para>
      OpenAM supports the OpenID Connect Authorization Code Flow.
     </para>
    </textobject>
   </mediaobject>

   <para>
    In addition to what OAuth 2.0 specifies,
    OpenID Connect uses an ID token
    so the relying party can validate claims about the end user.
    It also defines how to get user information
    such as profile, email, address, and phone details
    from the UserInfo endpoint with a valid access token.
   </para>
  </section>

  <section xml:id="openam-openid-implicit-client-profile">
   <title>OpenID Connect Implicit Flow</title>

   <para>
    The OpenID Connect Implicit Flow specifies
    how the relying party interacts with the OpenID Provider,
    in this case OpenAM,
    based on use of the OAuth 2.0 implicit grant.
    The following sequence diagram shows successful processing
    from the authorization request,
    through grant of the access and ID tokens,
    and optional use of the access token to get information about the end user.
   </para>

   <mediaobject xml:id="figure-openid-connect-implicit">
    <alt>OpenAM in OpenID Connect Implicit Flow</alt>
    <imageobject>
     <imagedata fileref="images/openid-connect-implicit.png" format="PNG"/>
    </imageobject>
    <textobject>
     <para>
      OpenAM supports the OpenID Connect Implicit Flow.
     </para>
    </textobject>
   </mediaobject>

   <para>
    As for the Authorization Code Flow, the Implicit Flow specifies
    an ID token so that the relying party can validate claims about the end user.
    It also defines how to get user information
    such as profile, email, address, and phone details
    from the UserInfo endpoint with a valid access token.
   </para>
  </section>

  <section xml:id="openam-openid-discovery">
   <title>OpenID Connect Discovery</title>

   <para>OpenID Connect defines how a relying party can discover the
   OpenID Provider and corresponding OpenID Connect configuration for
   an end user. The discovery mechanism relies on WebFinger to get the
   information based on the end user's identifier. The server returns the
   information in JSON Resource Descriptor (JRD) format.</para>
  </section>

  <section xml:id="openam-openid-client-registration">
   <title>OpenID Connect Relying Party Registration</title>

   <para>
    OpenID Connect relying parties register OAuth 2.0 client profiles with OpenAM.
    Relying parties can register with OpenAM as a provider both statically,
    as for other OAuth 2.0 clients,
    and also dynamically as specified by OpenID Connect Discovery.
    To allow dynamic registration, you register an initial OAuth 2.0 client
    that other relying parties can use to get access tokens for registration.
   </para>

   <para>
    You can also enable OpenID Connect relying parties to register dynamically
    without having to provide an access token.
    For details, see the documentation on the advanced server property,
    <literal>org.forgerock.openam.openidconnect.allow.open.dynamic.registration</literal>,
    in the <citetitle>OpenAM Reference</citetitle> section,
    <link
     xlink:show="new"
     xlink:href="reference#servers-advanced-configuration"
     xlink:role="http://docbook.org/xlink/role/olink"
    ><citetitle>Servers > Advanced</citetitle></link>.
    Take care to limit or throttle dynamic registration
    if you enable this capability on production systems.
   </para>
  </section>

  <section xml:id="openam-openid-session-management">
   <title>OpenID Connect Session Management</title>

   <para>OpenID Connect lets the relying party track whether the end user is logged in
   at the provider, and also initiate end user logout at the provider. The
   specification has the relying party monitor session state using an
   invisible iframe and communicate status using the HTML 5 postMessage
   API.</para>
  </section>

 </section>

 <section xml:id="configure-openid-connect-provider">
  <title>Configuring OpenAM As OpenID Provider</title>

  <para>You can configure OpenAM's OAuth 2.0 authorization service to double
  as an OpenID Provider. To do so, make sure that the Response Type
  Plugins list includes at least the default plugin classes.</para>

  <para>
   Custom plugins should implement the
   <link
    xlink:href="${javadocBase}?org/forgerock/oauth2/core/ResponseTypeHandler.html"
    xlink:show="new"
   ><literal>ResponseTypeHandler</literal></link> interface.
  </para>

  <para>See <link xlink:href="admin-guide#configure-oauth2-authz"
  xlink:show="new" xlink:role="http://docbook.org/xlink/role/olink"
  ><citetitle>Configuring the OAuth 2.0 Authorization Service</citetitle></link>
  for detailed instructions on configuring the service.</para>
 </section>

 <section xml:id="configure-openid-connect-discovery">
  <title>Configuring OpenAM For OpenID Connect Discovery</title>

  <para>
   In order to allow relying parties to discover
   the OpenID Provider for an end user,
   OpenAM supports OpenID Connect Discovery 1.0.
   In addition to discovering the OpenID Provider for an end user,
   the relying party can also request the OpenID Provider configuration.
  </para>
  
  <para>OpenAM as OpenID Provider exposes two endpoints for
  discovery:</para>

  <simplelist type="vert" columns="1">
   <member><literal>/.well-known/webfinger</literal></member>
   <member><literal>/.well-known/openid-configuration</literal></member>
  </simplelist>
  
  <para>
   A relying party needs to be able to discover the OpenID provider for an end user.
   In this case you should consider redirecting requests to URIs at the server root,
   such as <literal>http://www.example.com/.well-known/webfinger</literal>
   and <literal>http://www.example.com/.well-known/openid-configuration</literal>,
   to these Well-Known URIs in OpenAM's space.
  </para>

  <para>Discovery relies on <link xlink:show="new"
  xlink:href="http://tools.ietf.org/html/draft-ietf-appsawg-webfinger"
  >WebFinger</link>, a protocol to discover information about people and other
  entities using standard HTTP methods. WebFinger uses <link xlink:show="new"
  xlink:href="http://tools.ietf.org/html/rfc5785">Well-Known URIs</link>,
  which defines the path prefix <literal>/.well-known/</literal> for the
  URLs defined by OpenID Connect Discovery.</para>
  
  <para>Unless you deploy OpenAM in the root context of a container listening
  on port 80 on the primary host for your domain, relying parties need to find
  the right <replaceable>host:port/deployment-uri</replaceable> combination
  to locate the well-known endpoints. Therefore you must manage the redirection
  to OpenAM. If you are using WebFinger for something else than OpenID Connect
  Discovery, then you probably also need proxy logic to route the requests.</para>

  <para>
   To retrieve the OpenID Provider for an end user,
   the relying party needs the following.
  </para>

  <variablelist>
   <varlistentry>
    <term><literal>host</literal></term>
    <listitem>
     <para>The server where the relying party can access the WebFinger service.</para>

     <para>Notice that this is a host name rather than a URL to the endpoint,
     which is why you might need to redirect relying parties appropriately as described
     above.</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>resource</literal></term>
    <listitem>
     <para>Identifies the end user that is the subject of the request.</para>

     <para>The relying party must percent-encode the resource value when using it in
     the query string of the request, so when using the "acct" URI scheme and
     the resource is <literal>acct:user@example.com</literal>, then the value
     to use is <literal>acct%3Auser%40example.com</literal>.</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>rel</literal></term>
    <listitem>
     <para>URI identifying the type of service whose location is requested.</para>

     <para>In this case <literal>http://openid.net/specs/connect/1.0/issuer</literal>,
     which is <literal>http%3A%2F%2Fopenid.net%2Fspecs%2Fconnect%2F1.0%2Fissuer</literal>.</para>
    </listitem>
   </varlistentry>
  </variablelist>

  <para>Ignoring the question of redirection, you can test the endpoint for the
  demo user account (output lines folded to make them easier to read).</para>

  <screen>
$ <userinput>curl \
 "https://openam.example.com:8443/openam/.well-known/webfinger\
?resource=acct%3Ademo%40example.com\
&amp;rel=http%3A%2F%2Fopenid.net%2Fspecs%2Fconnect%2F1.0%2Fissuer"</userinput>
<computeroutput>{
  "subject": "acct:demo@example.com",
  "links": [
    {
      "rel": "http://openid.net/specs/connect/1.0/issuer",
      "href": "https://openam.example.com:8443/openam"
    }
  ]
}</computeroutput>
  </screen>

  <para>This shows that the OpenID Provider for the OpenAM demo user is
  indeed the OpenAM server.</para>

  <para>
   The relying party can also discover the OpenID provider configuration.
   Ignoring the question of redirection, you can test this
   (output lines folded to make them easier to read).
  </para>

  <informalexample>

  <screen>
$ <userinput>curl https://openam.example.com:8443/openam/.well-known/openid-configuration</userinput>
<computeroutput>{
    "response_types_supported": [
    "id_token|org.forgerock.oauth2.reslet.responseTypes.IDTokenResponseType",
    "token|org.forgerock.oauth2.reslet.responseTypes.TokenResponseType",
    "code|org.forgerock.oauth2.reslet.responseTypes.CodeResponseType"
    ],
    "registration_endpoint": "https://openam.example.com:8443/openam/oauth2/connect/register",
    "token_endpoint": "https://openam.example.com:8443/openam/oauth2/access_token",
    "end_session_endpoint": "https://openam.example.com:8443/openam/oauth2/connect/endSession",
    "version": "3.0",
    "userinfo_endpoint": "https://openam.example.com:8443/openam/oauth2/userinfo",
    "subject_types_supported": [
    "public"
    ],
    "issuer": "https://openam.example.com:8443/openam",
    "jwks_uri": "",
    "id_token_siging_alg_values_supported": [
    "HmacSHA256",
    "HmacSHA512",
    "HmacSHA384"
    ],
    "check_session_iframe": "https://openam.example.com:8443/openam/oauth2/connect/checkSession",
    "claims_supported": [
    "phone",
    "email",
    "address",
    "openid",
    "profile"
    ],
    "authorization_endpoint": "https://openam.example.com:8443/openam/oauth2/authorize"
}</computeroutput>
  </screen>
  </informalexample>
 </section>

 <section xml:id="register-openid-connect-clients">
  <title>Registering OpenID Connect Relying Parties</title>

  <para>
   OpenID Connect relying parties can register with OpenAM
   both statically through OpenAM console for example,
   and also dynamically using OpenID Connect 1.0 Dynamic Registration.
  </para>

  <procedure xml:id="register-openid-connect-client-static">
   <title>To Register a Relying Party With OpenAM Console</title>

   <para>Registering a relying party by using the OpenAM console consists of first
   creating an OAuth 2.0 Client agent profile, and then editing the profile
   for the settings pertinent to OpenID Connect 1.0.</para>

   <step>
    <para>In the OpenAM console under Access Control &gt; <replaceable>Realm
    Name</replaceable> &gt; Agents &gt; OAuth 2.0 Client &gt; Agent, click
    New..., then provide the client identifier and client password, and
    finally click Create to create the profile.</para>
   </step>

   <step>
    <para>Follow the hints in the section, <link xlink:show="new"
    xlink:href="admin-guide#configure-oauth2-client"
    xlink:role="http://docbook.org/xlink/role/olink"><citetitle>Configuring
    OAuth 2.0 &amp; OpenID Connect 1.0 Clients</citetitle></link> to edit
    the profile to match the relying party configuration.</para>

    <para>In order to read and edit the relying party profile dynamically later
    without using OpenAM console, be sure to set an access token in the Access
    Token field.</para>
   </step>
  </procedure>

  <procedure xml:id="register-openid-connect-client-dynamic">
   <title>To Register a Relying Party Dynamically</title>

   <para>For dynamic registration you need the relying party profile data,
   and an access token to write the configuration to OpenAM by HTTP POST. To
   obtain the access token, register an initial client statically after creating
   the provider, as described in
   <xref linkend="register-openid-connect-client-static" />. Relying parties can
   then use that client to obtain the access token needed to perform dynamic
   registration.</para>

   <tip>
    <para>
     As described in <xref linkend="openam-openid-client-registration" />,
     You can allow relying parties to register without having an access token
     by setting the advanced server property,
     <literal>org.forgerock.openam.openidconnect.allow.open.dynamic.registration</literal>,
     to <literal>true</literal>.
     When using that setting in production systems,
     take care to limit or throttle dynamic registration.
    </para>
   </tip>

   <para>On successful registration, OpenAM responds with information including
   an access token to allow the relying party subsequently to read and edit its
   profile.</para>

   <step>
    <para>Register an initial OAuth 2.0 client statically with a client ID
    such as <literal>masterClient</literal> and client secret such as
    <literal>password</literal>.</para>
   </step>

   <step>
    <para>Obtain an access token using the client you registered.</para>

    <para>For example, if you created the client as described in the previous
    step, and OpenAM administrator <literal>amadmin</literal> has password
    <literal>password</literal>, you can use the OAuth 2.0 resource owner
    password grant as in the following example.</para>

    <screen>
$ <userinput>curl \
 --request POST \
 --user "masterClient:password" \
 --data "grant_type=password&amp;username=amadmin&amp;password=password" \
 https://openam.example.com:8443/openam/oauth2/access_token</userinput>
<computeroutput>{
    "expires_in": 59,
    "token_type": "Bearer",
    "refresh_token": "26938cd0-6870-4e31-ade9-df31afc37ee1",
    "access_token": "515d6551-4512-4279-98b6-c0ef3f03a722"
}</computeroutput>
    </screen>
   </step>

   <step>
    <para>HTTP POST the relying party registration profile to the
    <literal>/oauth2/connect/register</literal> endpoint, using bearer token
    authorization with the access token you obtained from OpenAM.</para>

    <para>For an example written in JavaScript, see the registration page in
    the examples <link xlink:show="new"
    xlink:href="https://github.com/markcraig/openid/">available online</link>.
    Successful registration shows a response that includes the client ID and
    client secret. Lines are folded in the following example.</para>

    <programlisting language="javascript">
{
  "issued_at": 1392364349,
  "expires_at": 0,
  "client_secret": "7f446ca9-3f1f-48fb-bf8c-150b9e643f29",
  "redirect_uris": [
    "https://openam.example.com:8443/openid/cb-basic.html",
    "https://openam.example.com:8443/openid/cb-implicit.html"
  ],
  "registration_access_token": "515d6551-4512-4279-98b6-c0ef3f03a722",
  "client_id": "6e4abd50-3f03-41dc-b807-c6705c3e45d7",
  "registration_client_uri":
     "https://openam.example.com:8443/openam/oauth2/connect/register
     ?client_id=6e4abd50-3f03-41dc-b807-c6705c3e45d7"
}
    </programlisting>
   </step>
  </procedure>
 </section>

 <section xml:id="manage-sessions-openid-connect">
  <title>Managing User Sessions</title>

  <para>OpenID Connect Session Management 1.0 allows the relying party to manage
  OpenID Connect sessions, making it possible to know when the end user should
  be logged out.</para>

  <para>As described in the <link
  xlink:href="http://openid.net/specs/openid-connect-session-1_0.html"
  xlink:show="new">OpenID Connect Session Management 1.0</link> specification,
  OpenAM's OpenID Provider exposes both a "check_session_iframe" URL
  that allows the relying party to receive notifications when the end user's session
  state changes at the provider, and also an "end_session_endpoint" URL to
  which to redirect an end user for logout.</para>

  <para>When registering your relying party that uses session management, you set the
  OAuth 2.0 client agent profile properties Post Logout Redirect URI and
  Client Session URI, described in <link xlink:show="new"
  xlink:href="admin-guide#configure-oauth2-client"
  xlink:role="http://docbook.org/xlink/role/olink"><citetitle>Configuring
  OAuth 2.0 &amp; OpenID Connect 1.0 Clients</citetitle></link>. The Post
  Logout Redirect URI is used to redirect the end user user-agent after logout.
  The Client Session URI is the relying party URI where OpenAM sends notifications
  when the end user's session state changes.</para>
 </section>

 <section xml:id="openid-connect-examples">
  <title>Relying Party Examples</title>

  <para>OpenID Connect Authorization Code Flow and Implicit Flow define how clients
  interact with the provider to obtain end user authorization and profile
  information. Although you can run the simple example relying parties mentioned in
  this section without setting up Transport Layer Security, do not deploy
  relying parties in production without securing the transport.</para>

  <para>Code for the relying party examples shown here is <link xlink:show="new"
  xlink:href="https://github.com/markcraig/openid/">available online</link>.
  Clone the example project to deploy it in the same web container as
  OpenAM. Edit the configuration at the outset of the .js files in the project,
  register a corresponding profile for the example relying party as described in
  <xref linkend="register-openid-connect-clients"/>, and browse the deployment
  URL to see the initial page.</para>

  <mediaobject xml:id="figure-openid-connect-example-start-page">
   <alt>OpenID Connect Client Profiles Start Page</alt>
   <imageobject>
    <imagedata fileref="images/openid-connect-example-start-page.png" format="PNG" />
   </imageobject>
   <textobject>
    <para>The OpenID Connect Client Profiles Start Page lets you choose whether
    to try the Basic Client Profile (Authorization Code Flow)
     or the Implicit Client Profile (Implicit Code Flow).</para>
   </textobject>
  </mediaobject>

  <section xml:id="openid-basic-profile-example">
   <title>Authorization Code Flow Example</title>

   <para>OpenID Connect Authorization Code Flow is designed for web-based
   relying parties that use the OAuth 2.0 Authorization Code grant type.
   This grant type makes it possible for the relying party to get the access code
   by using the authorization code directly, without passing through the end
   user's browser. To protect its client secret (password), part of the
   relying party must run on a server.</para>

   <para>In the example, the Basic Client Profile Start Page describes the
   prerequisite configuration, which must be part of the relying party profile stored
   in the OpenAM realm where you set up the OpenID Provider. In OpenAM console,
   check that the OAuth 2.0 client profile matches the settings described.</para>

   <mediaobject xml:id="figure-openid-connect-basic-start-page">
    <alt>OpenID Connect Basic Client Profile Start Page</alt>
    <imageobject>
     <imagedata fileref="images/openid-connect-basic-start-page.png" format="PNG" />
    </imageobject>
    <textobject>
     <para>The Basic Client Profile start page describes the configuration
     required.</para>
    </textobject>
   </mediaobject>

   <para>Logout of OpenAM, and click the link at the bottom of the page to
   request authorization. The link sends an HTTP GET request asking for
   <literal>openid profile</literal> scopes to the OpenID Provider
   authorization URI.</para>

   <para>If everything is configured correctly, OpenAM's OpenID Provider
   has you authenticate as an end user, such as the demo user with username
   <literal>demo</literal> and password <literal>changeit</literal>, and
   grant (Allow) the relying party access to your profile.</para>

   <para>If you successfully authenticate and allow the example relying party access
   to your profile, OpenAM returns an authorization code to the example relying party.
   The example relying party then uses the authorization code to request an access
   token and an ID token. It shows the response to that request, and also
   decodes the ID token to show the content and to perform some validation.
   Finally it uses the access token to request information about the end user
   who authenticated, and displays the result.</para>

   <mediaobject xml:id="figure-openid-connect-basic-response-page">
    <alt>OpenID Connect Basic Client Profile Response Page</alt>
    <imageobject>
     <imagedata fileref="images/openid-connect-basic-response-page.png" format="PNG" />
    </imageobject>
    <textobject>
     <para>
      The Basic Client Profile response page for the Authorization Code Flow
      shows responses from OpenAM's OpenID Provider.
     </para>
    </textobject>
   </mediaobject>

   <para>Notice that in addition to the standard payload, the ID token indicates
   the end user's OpenAM realm, in this case <literal>"realm": "/"</literal>.</para>
  </section>

  <section xml:id="openid-implicit-profile-example">
   <title>Implicit Flow Example</title>

   <para>OpenID Connect Implicit Flow is designed for relying
   parties that use the OAuth 2.0 Implicit grant type. This grant type is
   designed for relying parties implemented in a browser. Rather than protect a
   client secret, the client profile must register a protected redirect URI
   in advance with the OpenID Provider.</para>

   <para>In the example, the Implicit Client Profile Start Page describes the
   prerequisite configuration, which must be part of the relying party profile stored
   in the OpenAM realm where you set up the OpenID Provider. In OpenAM console,
   check that the OAuth 2.0 client profile matches the settings described.
   If you have already configured the agent profile for the Authorization Code Flow example
   then you still need to add the redirect URI for the Implicit Flow.</para>

   <mediaobject xml:id="figure-openid-connect-implicit-start-page">
    <alt>OpenID Connect Implicit Client Profile Start Page</alt>
    <imageobject>
     <imagedata fileref="images/openid-connect-implicit-start-page.png" format="PNG" />
    </imageobject>
    <textobject>
     <para>
      The Implicit Client Profile start page for the Implicit Flow
      describes the configuration required.
     </para>
    </textobject>
   </mediaobject>

   <para>Logout of OpenAM, and click the link at the bottom of the page to
   request authorization. The link sends an HTTP GET request asking for
   <literal>id_token token</literal> response types and <literal>openid
   profile</literal> scopes to the OpenID Provider authorization
   URI.</para>

   <para>If everything is configured correctly, OpenAM's OpenID Provider
   has you authenticate as an end user, such as the demo user with username
   <literal>demo</literal> and password <literal>changeit</literal>, and
   grant (Allow) the relying party access to your profile.</para>

   <para>If you successfully authenticate and allow the example relying party access
   to your profile, OpenAM returns the access token and ID token directly in
   the fragment (after <literal>#</literal>) of the redirect URI. The relying party
   does not get an authorization code. The relying party shows the response to the
   request, and also decodes the ID token to show the content and to perform
   some validation (though it does not check the ID token signature). Finally
   the relying party uses the access token to request information about the end user
   who authenticated, and displays the result.</para>

   <mediaobject xml:id="figure-openid-connect-implicit-response-page">
    <alt>OpenID Connect Implicit Client Profile Response Page</alt>
    <imageobject>
     <imagedata fileref="images/openid-connect-implicit-response-page.png" format="PNG" />
    </imageobject>
    <textobject>
     <para>
      The Implicit Client Profile response page for the Implicit Flow
      shows responses from OpenAM's OpenID Provider.
     </para>
    </textobject>
   </mediaobject>

   <para>
    As for the Authorization Code Flow example,
    the ID Token indicates the end user's
   OpenAM realm in addition to the standard information.
   </para>
  </section>
 </section>

 <section xml:id="openid-connect-security-considerations">
  <title>Security Considerations</title>

  <para>As for other OAuth 2.0 applications, you must protect messages going
  across the network. OpenID Connect 1.0 requires Transport Layer Security
  (TLS). The chapter on <link xlink:show="new"
  xlink:href="admin-guide#chap-certs-keystores"
  xlink:role="http://docbook.org/xlink/role/olink"><citetitle>Managing
  Certificates</citetitle></link> includes some discussion of protecting
  traffic in the container where OpenAM runs. Also see the documentation for
  your web application container.</para>

  <para>Also take into account the points developed in the section on <link
  xlink:href="http://openid.net/specs/openid-connect-messages-1_0.html#security-considerations"
  xlink:show="new"><citetitle>Security Considerations</citetitle></link> in
  the OpenID Connect Messages draft specification.</para>
 </section>
</chapter>
