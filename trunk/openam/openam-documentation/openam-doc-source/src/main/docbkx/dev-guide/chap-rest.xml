<?xml version="1.0" encoding="UTF-8"?>
<!--
  ! CCPL HEADER START
  !
  ! This work is licensed under the Creative Commons
  ! Attribution-NonCommercial-NoDerivs 3.0 Unported License.
  ! To view a copy of this license, visit
  ! http://creativecommons.org/licenses/by-nc-nd/3.0/
  ! or send a letter to Creative Commons, 444 Castro Street,
  ! Suite 900, Mountain View, California, 94041, USA.
  !
  ! You can also obtain a copy of the license at
  ! src/main/resources/legal-notices/CC-BY-NC-ND.txt.
  ! See the License for the specific language governing permissions
  ! and limitations under the License.
  !
  ! If applicable, add the following below this CCPL HEADER, with the fields
  ! enclosed by brackets "[]" replaced with your own identifying information:
  !      Portions Copyright [yyyy] [name of copyright owner]
  !
  ! CCPL HEADER END
  !
  !      Copyright 2011-2014 ForgeRock AS
  !    
-->
<chapter xml:id='chap-rest'
 xmlns='http://docbook.org/ns/docbook'
 version='5.0' xml:lang='en'
 xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
 xsi:schemaLocation='http://docbook.org/ns/docbook
                     http://docbook.org/xml/5.0/xsd/docbook.xsd'
 xmlns:xlink='http://www.w3.org/1999/xlink'
 xmlns:xinclude='http://www.w3.org/2001/XInclude'>
 <title>Using RESTful Web Services</title>
 <indexterm><primary>REST API</primary></indexterm>
 <para>This chapter shows how to use the OpenAM RESTful interfaces for direct
 integration between web client applications and OpenAM.</para>
 
 <section xml:id="about-openam-rest-api">
  <title>About the RESTful API</title>

  <para>Interface Stability: <link xlink:show="new"
  xlink:href="admin-guide#interface-stability"
  xlink:role="http://docbook.org/xlink/role/olink">Evolving</link></para>

  <para>OpenAM offers a RESTful API for these access and identity management
  operations:</para>
  <itemizedlist>
   <listitem>
    <para><link linkend="rest-api-auth">Authentication</link> (login)</para>
   </listitem>
   <listitem>
    <para><link linkend="rest-api-auth">Logout</link></para>
   </listitem>
   <listitem>
    <para><link linkend="rest-api-cookie-info">Cookie information</link></para>
   </listitem>
   <listitem>
    <para><link linkend="rest-api-tokens">Token attribute retrieval</link></para>
   </listitem>
   <listitem>
    <para><link linkend="rest-api-tokens">Token validation</link></para>
   </listitem>
   <listitem>
    <para><link linkend="rest-api-authz">Authorization</link></para>
   </listitem>
   <listitem>
    <para><link linkend="rest-api-oauth2">OAuth 2.0 Authorization</link></para>
   </listitem>
   <listitem>
    <para><link linkend="rest-api-openid-connect">OpenID Connect 1.0</link></para>
   </listitem>
   <listitem>
    <para><link linkend="rest-api-self-registration">User self-registration</link></para>
   </listitem>
   <listitem>
    <para><link linkend="rest-api-password-reset">Resetting forgotten passwords</link></para>
   </listitem>
   <listitem>
    <para><link linkend="rest-api-logging">Logging</link></para>
   </listitem>
   <listitem>
    <para><link linkend="rest-api-crud-identity">Identity management</link> (creating,
    reading, updating, deleting identities)</para>
   </listitem>
   <listitem>
    <para><link linkend="rest-api-crud-realm">Realm management</link> (creating,
    reading, updating, deleting realms)</para>
   </listitem>
   <listitem>
    <para><link linkend="rest-dashboard">Displaying Dashboard Applications</link></para>
   </listitem>
  </itemizedlist>

  <para>This chapter also includes a section on <xref linkend="rest-api-status-codes" />.</para>

  <para>In this chapter, long URLs are wrapped to fit the printed page, as some
  of the output is formatted for easier reading.</para>
 </section>

 <section xml:id="c66-encoding">
  <title>Token Encoding</title>

  <para>Valid tokens in OpenAM requires configuration either in percent encoding or in <emphasis>C66Encode</emphasis>
  format. C66Encode format is encouraged. It is the default token format for OpenAM, and is used in this chapter.
  The following is an example token that has not been encoded:</para>

  <literallayout class="monospaced">AQIC5wM2LY4SfczntBbXvEAOuECbqMY3J4NW3byH6xwgkGE=@AAJTSQACMDE=#</literallayout>

  <para>This token includes reserved characters such as <literal>+</literal>, <literal>/</literal>,
  and <literal>=</literal> (The <literal>@</literal>, <literal>#</literal>, and <literal>*</literal> are not
  reserved characters per se, but substitutions are still required). To c66encode this token,
  you would substitute certain characters for others, as follows:</para>

  <programlisting language="none">+ is replaced with -
/ is replaced with _
= is replaced with .
@ is replaced with *
# is replaced with *
* (first instance) is replaced with @
* (subsequent instances) is replaced with #</programlisting>

  <para>In this case, the translated token would appear as shown here:</para>

  <literallayout class="monospaced">AQIC5wM2LY4SfczntBbXvEAOuECbqMY3J4NW3byH6xwgkGE.*AAJTSQACMDE.*</literallayout>

 </section>
 
 <section xml:id="rest-api-auth">
  <title>Authentication &amp; Logout</title>
  <indexterm>
   <primary>Authentication</primary>
   <secondary>REST API</secondary>
  </indexterm>
  <indexterm>
   <primary>Session tokens</primary>
   <secondary>REST API</secondary>
  </indexterm>

  <para>OpenAM provides REST APIs for authentication and for logout.</para>

  <itemizedlist>
   <listitem>
    <para>Under <literal>/json/authenticate</literal> and
    <literal>/json/sessions</literal>, you find the newer JSON-based APIs.</para>

    <para>See <xref linkend="rest-api-auth-json" /> below.</para>
   </listitem>

   <listitem>
    <para>Under <literal>/identity/authenticate</literal> and
    <literal>/identity/logout</literal>, you find the backwards-compatible,
    legacy API.</para>

    <para>See <xref linkend="rest-api-auth-legacy" /> below.</para>
   </listitem>
  </itemizedlist>

  <tip>
   <para>
    When authentication depends on the client IP address,
    and OpenAM lies behind a load balancer or proxy layer,
    configure the load balancer or proxy to send the address
    by using the <literal>X-Forwarded-For</literal> header,
    and configure OpenAM to consume and forward the header as necessary.
    For details, see the <citetitle>Installation Guide</citetitle> section,
    <link
    xlink:show="new"
    xlink:href="install-guide#handle-request-headers"
    xlink:role="http://docbook.org/xlink/role/olink"
    ><citetitle>Handling HTTP Request Headers</citetitle></link>.
   </para>
  </tip>

  <section xml:id="rest-api-auth-json">
   <title>Authentication &amp; Logout</title>

   <para>The simplest user name/password authentication returns a
   <literal>tokenId</literal> that applications can present as a cookie
   value for other operations that require authentication. In this case use
   HTTP POST to prevent the web container from logging the credentials.
   Pass the user name in an <literal>X-OpenAM-Username</literal> header, and
   the password in an <literal>X-OpenAM-Password</literal> header.</para>

   <screen>
$ <userinput>curl \
 --request POST \
 --header "X-OpenAM-Username: demo" \
 --header "X-OpenAM-Password: changeit" \
 --header "Content-Type: application/json" \
 --data "{}" \
 https://openam.example.com:8443/openam/json/authenticate</userinput>
<computeroutput>{ "tokenId": "AQIC5w...NTcy*", "successUrl": "/openam/console" }</computeroutput>
   </screen>

   <para>This "zero page login" mechanism works only for name/password
   authentication. If you include a POST body with the request, it must
   be an empty JSON string as shown in the example. Alternatively, you can
   leave the POST body empty. Otherwise, OpenAM interprets the body as a
   continuation of an existing authentication attempt, one that uses a
   supported callback mechanism.</para>

   <para>The authentication service at <literal>/json/authenticate</literal>
   supports callback mechanisms that make it possible to perform other types of
   authentication in addition to simple user name/password login.</para>

   <para>Callbacks that are not completed based on the content of the client
   HTTP request are returned in JSON as a response to the request. Each
   callback has an array of output suitable for displaying to the end user,
   and input which is what the client must complete and send back to
   OpenAM. The default is still user name/password authentication.</para>

   <screen>
$ <userinput>curl \
 --request POST \
 --header "Content-Type: application/json" \
 https://openam.example.com:8443/openam/json/authenticate</userinput>
<computeroutput>
{
    "authId": "...jwt-value...",
    "template": "",
    "stage": "DataStore1",
    "callbacks": [
        {
            "type": "NameCallback",
            "output": [
                {
                    "name": "prompt",
                    "value": " User Name: "
                }
            ],
            "input": [
                {
                    "name": "IDToken1",
                    "value": ""
                }
            ]
        },
        {
            "type": "PasswordCallback",
            "output": [
                {
                    "name": "prompt",
                    "value": " Password: "
                }
            ],
            "input": [
                {
                    "name": "IDToken2",
                    "value": ""
                }
            ]
        }
    ]
}</computeroutput>
   </screen>

   <para>The "authId" value is a JSON Web Token (JWT) that uniquely identifies
   the authentication context to OpenAM, and so must also be sent back with the
   requests.</para>

   <para>To respond to the callback, send back the JSON object with the missing
   values filled, as in this case where the user name is <literal>demo</literal>
   and the password is <literal>changeit</literal>.</para>

   <informalexample><?dbfo pgwide="1"?>
   <screen>
$ <userinput>curl \
 --request POST \
 --header "Content-Type: application/json" \
 --data '{ "authId": "...jwt-value...", "template": "", "stage": "DataStore1",
   "callbacks": [ { "type": "NameCallback", "output": [ { "name": "prompt",
   "value": " User Name: " } ], "input": [ { "name": "IDToken1", "value": "demo" } ] },
   { "type": "PasswordCallback", "output": [ { "name": "prompt", "value": " Password: " } ],
   "input": [ { "name": "IDToken2", "value": "changeit" } ] } ] }' \
 https://openam.example.com:8443/openam/json/authenticate</userinput>
<computeroutput>
{ "tokenId": "AQIC5wM2...U3MTE4NA..*", "successUrl": "/openam/console" }</computeroutput>
   </screen>
   </informalexample>

   <para>The response is a token ID holding the SSO Token value.</para>

   <para>Alternatively, you can authenticate without requesting a session
   using the <literal>noSession</literal> query string parameter.</para>

   <informalexample><?dbfo pgwide="1"?>
   <screen>
$ <userinput>curl \
 --request POST \
 --header "Content-Type: application/json" \
 --data '{ "authId": "...jwt-value...", "template": "", "stage": "DataStore1",
   "callbacks": [ { "type": "NameCallback", "output": [ { "name": "prompt",
   "value": " User Name: " } ], "input": [ { "name": "IDToken1", "value": "demo" } ] },
   { "type": "PasswordCallback", "output": [ { "name": "prompt", "value": " Password: " } ],
   "input": [ { "name": "IDToken2", "value": "changeit" } ] } ] }' \
 https://openam.example.com:8443/openam/json/authenticate?noSession=true</userinput>
<computeroutput>
{ "message": "Authentication Successful", "successUrl": "/openam/console" }</computeroutput>
   </screen>
   </informalexample>

   <para>OpenAM can be configured to return a failure URL value when
   authentication fails. No failure URL is configured by default. The Default
   Failure Login URL can be configured for the <link xlink:show="new"
   xlink:href="admin-guide#core-module-conf-hints"
   xlink:role="http://docbook.org/xlink/role/olink">Core</link> authentication
   module. Alternatively, failure URLs can be configured per authentication
   chain, which your client can specify using the <literal>service</literal>
   parameter described below. On failure OpenAM then returns HTTP status
   code 401 Unauthorized, and the JSON in the reply indicates the failure
   URL.</para>

   <screen>
$ <userinput>curl \
 --request POST \
 --header "Content-Type: application/json" \
 --header "X-OpenAM-Username: demo" \
 --header "X-OpenAM-Password: badpassword" \
 https://openam.example.com:8443/openam/json/authenticate</userinput>
<computeroutput>{
  "code":401,
  "reason":"Unauthorized",
  "message":"Invalid Password!!",
  "failureUrl": "http://www.example.com/401.html"
}</computeroutput>
   </screen>

   <para>To specify a realm in your request, first make sure that the name of your realm does not match
       an endpoint name to avoid any potential routing errors.
       Then, specify the realm in one of two ways. For example, if you have a realm
       titled "<literal>myRealm</literal>," you can use it in your request as follows:</para>
    <itemizedlist>
        <listitem>
            <para>Using the realm in the URI to the endpoint (preferred method):</para>
            <literallayout class="monospaced"
            >https://openam.example.com:8443/openam/json/<literal>myRealm</literal>/authenticate</literallayout>
        </listitem>
        <listitem>
            <para>Using the realm query string parameter:</para>
            <literallayout class="monospaced"
            >https://openam.example.com:8443/openam/json/authenticate?realm=<literal>myRealm</literal></literallayout>
        </listitem>
    </itemizedlist>

   <variablelist>
    <para>You can use the <literal>authIndexType</literal> and
    <literal>authIndexValue</literal> query string parameters as a pair
    to provide additional information about how you are authenticating.
    The <literal>authIndexType</literal> can be one of the following
    types.</para>

    <varlistentry>
     <term>composite</term>
     <listitem>
      <para>Set the value to a composite advice string.</para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>level</term>
     <listitem>
      <para>Set the value to the authentication level.</para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>module</term>
     <listitem>
      <para>Set the value to the name of an authentication module.</para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>resource</term>
     <listitem>
      <para>Set the value to a URL protected by an OpenAM policy.</para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>role</term>
     <listitem>
      <para>Set the value to an OpenAM role.</para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>service</term>
     <listitem>
      <para>Set the value to the name of an authentication chain.</para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>user</term>
     <listitem>
      <para>Set the value to an OpenAM user ID.</para>
     </listitem>
    </varlistentry>
   </variablelist>

   <para>
    You can use the query string parameter,
    <literal>sessionUpgrade=<replaceable>tokenId</replaceable></literal>,
    to request session upgrade.
    For an explanation of session upgrade,
    see the <citetitle>Administration Guide</citetitle> section on,
    <link
     xlink:show="new"
     xlink:href="admin-guide#session-upgrade"
     xlink:role="http://docbook.org/xlink/role/olink"
    ><citetitle>Authentication Levels &amp; Session Upgrade</citetitle></link>.
   </para>

   <itemizedlist>
    <para>OpenAM uses the following callback types depending on the
    authentication module in use.</para>

    <listitem>
     <para>ChoiceCallback</para>
    </listitem>

    <listitem>
     <para>ConfirmationCallback</para>
    </listitem>

    <listitem>
     <para>HttpCallback</para>
    </listitem>

    <listitem>
     <para>LanguageCallback</para>
    </listitem>

    <listitem>
     <para>NameCallback</para>
    </listitem>

    <listitem>
     <para>PasswordCallback</para>
    </listitem>

    <listitem>
     <para>RedirectCallback</para>
    </listitem>

    <listitem>
     <para>TextInputCallback</para>
    </listitem>

    <listitem>
     <para>TextOutputCallback</para>
    </listitem>

    <listitem>
     <para>X509CertificateCallback</para>
    </listitem>
   </itemizedlist>

   <para>Authenticated users can log out with the token cookie value and an HTTP
   POST to <literal>/json/sessions/?_action=logout</literal>.</para>

   <screen>
$ <userinput>curl \
 --request POST \
 --header "iplanetDirectoryPro: AQIC5wM2...U3MTE4NA..*" \
 --header "Content-Type: application/json" \
 "https://openam.example.com:8443/openam/json/sessions/?_action=logout"</userinput>
<computeroutput>
{"result":"Successfully logged out"}</computeroutput>
   </screen>
  </section>

  <section xml:id="rest-api-auth-legacy">
   <title>Authentication &amp; Logout (Legacy API)</title>

    <para>Interface Stability: <link xlink:show="new"
    xlink:href="admin-guide#interface-stability"
    xlink:role="http://docbook.org/xlink/role/olink">Deprecated</link></para>

    <para>Simple authentication with a user name and password returns a
    token.</para>

    <screen>
$ <userinput>curl \
 --request POST \
 --data "username=bjensen&amp;password=hifalutin" \
 https://openam.example.com:8443/openam/identity/authenticate</userinput>
<computeroutput>
token.id=AQIC5wM2LY4SfcxvdvHOXjtC_eWSs2RB54tgvgK8SuYi7aQ.*AAJTSQACMDE.*</computeroutput>
    </screen>

    <para>If you must specify parameters as when authenticating to
    <literal>/UI/Login</literal>, you provide a percent encoded string of the
    parameters as the value of the <literal>uri</literal> parameter. The
    <literal>/UI/Login</literal> parameter deals with the <literal>realm</literal>,
    <literal>module</literal>, and <literal>service</literal> parameters. Setting the
    <literal>client</literal> parameter sets the user's IP address as part of the
    token following successful authentication. The default for the <literal>client</literal>
    parameter is the IP of the machine making the REST request.</para>

    <screen>
$ <userinput>curl \
 --request POST \
 --data "username=bjensen&amp;password=hifalutin&amp;uri=realm%3D%2F%26module%3DDataStore\
&amp;client=192.168.1.1" \
 https://openam.example.com:8443/openam/identity/authenticate</userinput>
<computeroutput>
token.id=AQIC5wM2LY4SfcxvdvHOXjtC_eWSs2RB54tgvgK8SuYi7aQ.*AAJTSQACMDE.*</computeroutput>
    </screen>

    <para>You log out using the token to end the user session.</para>

    <screen>
$ <userinput>curl \
 --request POST \
 --data "subjectid=AQIC5w...*AAJTSQACMDE.*" \
 https://openam.example.com:8443/openam/identity/logout</userinput>
    </screen>
  </section>
 </section>

 <section xml:id="rest-api-cookie-info">
  <title>Cookie Information</title>

  <para>You can retrieve the cookie domains that OpenAM supports by HTTP GET on
  <literal>/json/serverinfo/cookieDomains</literal>.</para>

  <screen>
$ <userinput>curl https://openam.example.com:8443/openam/json/serverinfo/cookieDomains</userinput>
<computeroutput>{"domains":[".example.com"]}</computeroutput>
  </screen>

  <para>You can retrieve the name of the cookie used for storing the session
  token. By default it is <literal>iPlanetDirectoryPro</literal>.</para>

  <screen>
$ <userinput>curl https://openam.example.com:8443/openam/identity/getCookieNameForToken</userinput>
<computeroutput>string=iPlanetDirectoryPro</computeroutput>
  </screen>

  <para>You can also retrieve the name of the cookie used for storing the session
  token and the names of the cookies to forward with requests.</para>

  <screen>
$ <userinput>curl https://openam.example.com:8443/openam/identity/getCookieNamesToForward</userinput>
<computeroutput>string=iPlanetDirectoryPro
string=amlbcookie</computeroutput>
  </screen>
 </section>

 <section xml:id="rest-api-tokens">
  <title>Token Validation</title>

  <indexterm>
   <primary>Token validation</primary>
   <secondary>REST API</secondary>
  </indexterm>

  <para>
   OpenAM provides REST APIs for validating SSO tokens.
  </para>

  <itemizedlist>
   <listitem>
    <para>
     Under <literal>/json/sessions</literal>
     you find the newer JSON-based API.
    </para>

    <para>
     See <xref linkend="rest-api-token-validation" /> below.
    </para>
   </listitem>

   <listitem>
    <para>
     Under <literal>/identity/isTokenValid</literal>
     you find the backwards compatible, legacy APIs.
    </para>

    <para>
     See <xref linkend="rest-api-tokens-legacy" /> below.
    </para>
   </listitem>
  </itemizedlist>

  <section xml:id="rest-api-token-validation">
   <title>Token Validation</title>

   <para>
    To check over REST whether a token is valid,
    perform an HTTP POST
    to the resource URL,
    <literal>/json/sessions/<replaceable>tokenId</replaceable></literal>,
    using the <literal>validate</literal> action
    as shown in the following example.
   </para>

   <screen>
$ <userinput>curl \
 --request POST \
 --header "Content-Type: application/json" \
 http://openam.example.com:8080/openam/json/sessions/AQIC5...?_action=validate</userinput>
<computeroutput>{"valid":true,"uid":"demo","realm":"/realm"}</computeroutput>
   </screen>

   <para>
    An invalid token returns only information about the validity.
   </para>

   <screen>
$ <userinput>curl \
 --request POST \
 --header "Content-Type: application/json" \
 http://openam.example.com:8080/openam/json/sessions/AQIC5...?_action=validate</userinput>
<computeroutput>{"valid":false}</computeroutput>
   </screen>
  </section>

  <section xml:id="rest-api-tokens-legacy">
   <title>Token Validation, Attribute Retrieval (Legacy API)</title>

   <para>Interface Stability: <link xlink:show="new"
   xlink:href="admin-guide#interface-stability"
   xlink:role="http://docbook.org/xlink/role/olink">Deprecated</link></para>

   <para>You check whether a token is valid as follows.</para>

   <screen>
$ <userinput>curl \
 --request POST \
 --data "tokenid=AQIC5w...*AAJTSQACMDE.*" \
 https://openam.example.com:8443/openam/identity/isTokenValid</userinput>
<computeroutput>boolean=true</computeroutput>
   </screen>

   <para>An invalid token returns <literal>boolean=false</literal>.</para>

   <screen>
$ <userinput>curl \
 --request POST \
 --data "tokenid=INVALID" \
 https://openam.example.com:8443/openam/identity/isTokenValid</userinput>
<computeroutput>boolean=false</computeroutput>
   </screen>

  <para>With a valid token, you can retrieve attributes about the subject.
  OpenAM returns a series of <replaceable>name</replaceable>,
  <replaceable>value</replaceable> pairs.</para>

  <para>The newer API for retrieving user information is demonstrated in
  <xref linkend="rest-api-read-identity" />. What follows describes the
  legacy API.</para>

  <screen>
$ <userinput>curl \
 --request POST \
 --data "subjectid=AQIC5w...*AAJTSQACMDE.*" \
 https://openam.example.com:8443/openam/identity/attributes</userinput>
<computeroutput>userdetails.token.id=
 AQIC5wM2LY4SfcxuxIP0VnP2lVjs7ypEM6VDx6srk56CN1Q.*AAJTSQACMDE.*
userdetails.attribute.name=uid
userdetails.attribute.value=bjensen
userdetails.attribute.name=mail
userdetails.attribute.value=bjensen@example.com
userdetails.attribute.name=sn
userdetails.attribute.value=Jensen
userdetails.attribute.name=userpassword
userdetails.attribute.value={SSHA}rhusOfYpkapDWEHcfT2Y7y83LMuC++F4Abqvig==
userdetails.attribute.name=cn
userdetails.attribute.value=Babs Jensen
userdetails.attribute.value=Barbara Jensen
userdetails.attribute.name=givenname
userdetails.attribute.value=Barbara
userdetails.attribute.name=dn
userdetails.attribute.value=uid=bjensen,ou=people,dc=example,dc=com
userdetails.attribute.name=telephonenumber
userdetails.attribute.value=+1 408 555 1862
userdetails.attribute.name=objectclass
userdetails.attribute.value=organizationalPerson
userdetails.attribute.value=person
userdetails.attribute.value=posixAccount
userdetails.attribute.value=inetOrgPerson
userdetails.attribute.value=krbprincipalaux
userdetails.attribute.value=krbTicketPolicyAux
userdetails.attribute.value=top</computeroutput>
   </screen>

   <para>You can specify attributes to limit what you retrieve.</para>

   <screen>
$ <userinput>curl "https://openam.example.com:8443/openam/identity/attributes?\
subjectid=AQIC5wM2LY4SfcxuxIP0VnP2lVjs7ypEM6VDx6srk56CN1Q.*AAJTSQACMDE.*\
&amp;attributenames=mail\
&amp;attributenames=uid"</userinput>
<computeroutput>userdetails.token.id=
 AQIC5wM2LY4SfcxuxIP0VnP2lVjs7ypEM6VDx6srk56CN1Q.*AAJTSQACMDE.*
userdetails.attribute.name=uid
userdetails.attribute.value=bjensen
userdetails.attribute.name=mail
userdetails.attribute.value=bjensen@example.com</computeroutput>
   </screen>

   <para>When retrieving attributes, you can refresh the session thus setting
   the idle time to 0, by adding the boolean parameter
   <literal>refresh=true</literal> to the query string.</para>

   <screen>
$ <userinput>curl "https://openam.example.com:8443/openam/identity/attributes?\
subjectid=AQIC5wM2LY4SfcxuxIP0VnP2lVjs7ypEM6VDx6srk56CN1Q.*AAJTSQACMDE.*\
&amp;attributenames=cn\
&amp;refresh=true"</userinput>
<computeroutput>userdetails.token.id=
 AQIC5wM2LY4SfcxuxIP0VnP2lVjs7ypEM6VDx6srk56CN1Q.*AAJTSQACMDE.*
userdetails.attribute.name=cn
userdetails.attribute.value=Babs Jensen
userdetails.attribute.value=Barbara Jensen</computeroutput>
   </screen>

   <para>
    You can specify the following attributes to retrieve information
    about the user's session time limits and current session:
    <literal>maxsessiontime</literal> (maximum length of a session),
    <literal>maxidletime</literal> (maximum idle time allowed during a session),
    <literal>idletime</literal> (actual idle time during the current session),
    <literal>timeleft</literal> (actual time left in session).
    The unit for maximum times is minutes.
    The unit for actual times is seconds.
   </para>

   <para>
    Also use the parameter <literal>refresh=false</literal>
    to avoid changing the <literal>idletime</literal> with your request.
   </para>

   <screen>
$ <userinput>curl \
--data "subjectid=AQIC5w....*AAJTSQACMDE.*\
 &amp;attributenames=idletime\
 &amp;attributenames=maxidletime\
 &amp;attributenames=timeleft\
 &amp;attributenames=maxsessiontime\
 &amp;refresh=false" \
 https://openam.example.com:8443/openam/identity/attributes</userinput>
<computeroutput>
userdetails.token.id=AQIC5w....*AAJTSQACMDE.*
userdetails.attribute.name=maxsessiontime
userdetails.attribute.value=120
userdetails.attribute.name=maxidletime
userdetails.attribute.value=30
userdetails.attribute.name=idletime
userdetails.attribute.value=664
userdetails.attribute.name=timeleft
userdetails.attribute.value=6319</computeroutput>
  </screen>

  </section>
 </section>

 <section xml:id="rest-api-authz">
  <title>Authorization &amp; Policy Management</title>
  <indexterm>
   <primary>Policy</primary>
   <secondary>REST API</secondary>
  </indexterm>

  <para>
   OpenAM provides REST APIs both for requesting policy decisions,
   and also for administering policy definitions.
  </para>

  <itemizedlist>
   <listitem>
    <para>
     Under <literal>/json[/<replaceable>realm</replaceable>]/policies</literal>,
     you find the newer JSON-based APIs.
    </para>

    <para>
     Under
     <literal>/json[/<replaceable>realm</replaceable>]/applications</literal>
     and <literal>/json/applicationtypes</literal>
     you find JSON-based APIs
     for administering applications and reading application types.
    </para>

    <para>
     Under <literal>/json/conditiontypes</literal> you find a JSON-based API
     for viewing what types of conditions you can use when defining policies.
    </para>

    <para>
     Under <literal>/json/subjecttypes</literal> you find a JSON-based API
     for viewing what types of subjects you can use when defining policies.
    </para>

    <para>
     Under <literal>/json/decisioncombiners</literal> you find a JSON-based API
     for viewing implementations you can use when defining policies
     to specify how to combine results when multiple policies apply.
    </para>

    <para>
     See <xref linkend="rest-api-authz-json" /> below.
    </para>
   </listitem>

   <listitem>
    <para>
     Under <literal>/identity/authorize</literal>
     and <literal>/ws/1/entitlement/</literal>,
     you find the backwards-compatible, legacy APIs.
    </para>

    <para>
     See <xref linkend="rest-api-authz-legacy" /> below.
    </para>
   </listitem>
  </itemizedlist>

  <section xml:id="rest-api-authz-json">
   <title>Authorization</title>
   
   <itemizedlist>
    <para>
     This section covers the following topics.
    </para>

    <listitem>
     <para>
      <xref linkend="rest-api-authz-policy-decisions" />
     </para>
    </listitem>

    <listitem>
     <para>
      <xref linkend="rest-api-authz-policies" />
     </para>
    </listitem>

    <listitem>
     <para>
      <xref linkend="rest-api-authz-applications" />
     </para>
    </listitem>

    <listitem>
     <para>
      <xref linkend="rest-api-authz-application-types" />
     </para>
    </listitem>

    <listitem>
     <para>
      <xref linkend="rest-api-authz-condition-types" />
     </para>
    </listitem>

    <listitem>
     <para>
      <xref linkend="rest-api-authz-subject-types" />
     </para>
    </listitem>

    <listitem>
     <para>
      <xref linkend="rest-api-authz-decision-combiners" />
     </para>
    </listitem>
   </itemizedlist>

   <section xml:id="rest-api-authz-policy-decisions">
    <title>Requesting Policy Decisions</title>

    <para>
     You can request policy decisions from OpenAM
     by using the REST APIs described in this section.
     OpenAM evaluates the request
     based on the context and the policies configured,
     and returns decision that indicate what actions are allowed or denied,
     as well as any attributes or advice
     for the resources specified.
    </para>

    <para>
     To request a decision for specific resources,
     see <xref linkend="rest-api-authz-policy-decision-concrete" />.
    </para>

    <para>
     To request decisions for a resource and all resources beneath it,
     see <xref linkend="rest-api-authz-policy-decision-subtree" />.
    </para>

   <section xml:id="rest-api-authz-policy-decision-concrete">
    <title>Requesting Policy Decisions For Specific Resources</title>

    <para>
     This section shows how you can request a policy decision over REST
     for specific resources.
    </para>

    <para>
     To request policy decisions for specific resources,
     perform an HTTP POST using the evaluation action
     to the appropriate path under the URI where OpenAM is deployed,
     <literal>/json[/<replaceable>realm</replaceable>]/policies?_action=evaluate</literal>,
     where <replaceable>realm</replaceable> optionally specifies the realm.
     The payload for the HTTP POST is a JSON object
     that specifies at least the resources,
     and takes the following form.
    </para>

    <programlisting language="java">
{
    "resources": [
        "resource1",
        "resource2",
        ...,
        "resourceN"
    ],
    "application": "optional, defaults to iPlanetAMWebAgentService",
    "subject": "optional subject SSOToken",
    "environment": {
        "optional key1": [
            "value",
            "another value",
            ...
        ],
        "optional key2": [
            "value",
            "another value",
            ...
        ],
        ...
    }
}
    </programlisting>

    <variablelist>
     <para>
      The values for the fields shown above are explained below.
     </para>

     <varlistentry>
      <term><literal>"resources"</literal></term>
      <listitem>
       <para>
        This required field specifies the list of resources
        for which to return decisions.
       </para>

       <para>
        For example, when using the default application,
        <literal>"iPlanetAMWebAgentService"</literal>,
        you can request decisions for resource URLs.
       </para>

       <programlisting language="java">
{
    "resources": [
        "http://www.example.com/index.html",
        "http://www.example.com/do?action=run"
    ]
}
       </programlisting>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>"application"</literal></term>
      <listitem>
       <para>
        This optional field holds the name of the application,
        and defaults to <literal>"iPlanetAMWebAgentService"</literal>
        if not specified.
       </para>

       <para>
        For more on available applications,
        see <xref linkend="rest-api-authz-applications" />.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>"subject"</literal></term>
      <listitem>
       <para>
        This optional field holds the token ID of the subject,
        returned for example on successful authentication.
        See <xref linkend="rest-api-auth" />.
       </para>

       <para>
        If you do not specify the token ID,
        OpenAM uses the token ID of the subject making the request.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>"environment"</literal></term>
      <listitem>
       <para>
        This optional field holds a map of keys to lists of values.
       </para>

       <para>
        If you do not specify the environment, the default is an empty map.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>

    <para>
     The example below requests policy decisions for two URL resources.
     The <literal>iPlanetDirectoryPro</literal> header sets the SSO token
     for a user who has access to perform the operation.
    </para>

    <programlisting language="java">
$ <userinput>curl \
 --request POST \
 --header "iPlanetDirectoryPro: AQIC5..." \
 --header "Content-Type: application/json" \
 --data '{
    "resources": [
        "http://www.example.com/index.html",
        "http://www.example.com/do?action=run"
    ],
    "application": "iPlanetAMWebAgentService"
 }' \
 https://openam.example.com:8443/openam/json/realm/policies?_action=evaluate</userinput>
<computeroutput>[ {
  "resource" : "http://www.example.com:80/do?action=run",
  "actions" : {
  },
  "attributes" : {
  },
  "advices" : {
    "AuthLevelConditionAdvice" : [ "/realm:3" ]
  }
}, {
  "resource" : "http://www.example.com:80/index.html",
  "actions" : {
    "POST" : false,
    "GET" : true
  },
  "attributes" : {
    "cn" : [ "demo" ]
  },
  "advices" : {
  }
} ]</computeroutput>
    </programlisting>

    <variablelist>
     <para>
      In the JSON list of decisions returned for each resource,
      OpenAM includes a these fields.
     </para>

     <varlistentry>
      <term><literal>"resource"</literal></term>
      <listitem>
       <para>
        A resource specified in the request
       </para>

       <para>
        Notice that the resources are normalized.
        In the example, the request does not explicitly specify port 80,
        but the response does show the port number.
        Notice also that the decisions returned are not guaranteed
        to be in the same order as the resources were requested.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>"actions"</literal></term>
      <listitem>
       <para>
        A map of action name keys
        to Boolean values that indicate whether
        the action is allowed (<literal>true</literal>)
        or denied (<literal>false</literal>)
        for the specified resource
       </para>

       <para>
        In the example,
        for resource <literal>http://www.example.com:80/index.html</literal>
        HTTP GET is allowed, whereas HTTP POST is denied.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>"attributes"</literal></term>
      <listitem>
       <para>
        A map of attribute names to their values,
        if any resource attributes are returned
        according to applicable policies
       </para>

       <para>
        In the example, the policy that applies
        to <literal>http://www.example.com:80/index.html</literal>
        causes that the value of the subject's "cn" profile attribute
        to be returned.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>"advices"</literal></term>
      <listitem>
       <para>
        A map of advice names to their values,
        if any advice is returned according to applicable policies
       </para>

       <para>
        The <literal>"advices"</literal> field can provide hints
        regarding what OpenAM needs to take the authorization decision.
       </para>

       <para>
        In the example, the policy that applies
        to <literal>http://www.example.com:80/do?action=run</literal>
        requests that the subject be authenticated
        in realm <literal>/realm</literal>
        at an authentication level of at least 3.
       </para>

       <programlisting language="java">
{
    "advices": {
        "AuthLevelConditionAdvice": [
            "/realm:3"
        ]
    }
}
       </programlisting>
      </listitem>
     </varlistentry>
    </variablelist>

    <para>
     You can use the query string parameters
     <literal>_prettyPrint=true</literal> to make the output easier to read,
     and <literal>_fields=<replaceable>field-name</replaceable>[,<replaceable>field-name</replaceable>...]</literal>
     to limit the fields returned in the output.
    </para>
   </section>

   <section xml:id="rest-api-authz-policy-decision-subtree">
    <title>Requesting Policy Decisions For a Tree of Resources</title>

    <para>
     This section shows how you can request policy decisions over REST
     for a resource and all other resources in the subtree beneath it.
    </para>

    <para>
     To request policy decisions for a tree of resources,
     perform an HTTP POST using the evaluation action to the appropriate path
     under the URI where OpenAM is deployed,
     <literal>/json[/<replaceable>realm</replaceable>]/policies?_action=evaluateTree</literal>,
     where <replaceable>realm</replaceable> optionally specifies the realm.
     The payload for the HTTP POST is a JSON object that specifies
     at least the root resource, and takes the following form.
    </para>

    <programlisting language="java">
{
    "resource": "resource string",
    "application": "optional, defaults to iPlanetAMWebAgentService",
    "subject": "optional subject SSOToken",
    "environment": {
        "optional key1": [
            "value",
            "another value",
            ...
        ],
        "optional key2": [
            "value",
            "another value",
            ...
        ],
        ...
    }
}
    </programlisting>

    <variablelist>
     <para>
      The values for the fields shown above are explained below.
     </para>

     <varlistentry>
      <term><literal>"resource"</literal></term>
      <listitem>
       <para>
        This required field specifies the root resource
        for the decisions to return.
       </para>

       <para>
        For example, when using the default application,
        <literal>"iPlanetAMWebAgentService"</literal>,
        you can request decisions for resource URLs.
       </para>

       <programlisting language="java">
{
    "resource": "http://www.example.com/"
}
       </programlisting>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>"application"</literal></term>
      <listitem>
       <para>
        This optional field holds the name of the application,
        and defaults to <literal>"iPlanetAMWebAgentService"</literal>
        if not specified.
       </para>

       <para>
        For more on available applications,
        see <xref linkend="rest-api-authz-applications" />.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>"subject"</literal></term>
      <listitem>
       <para>
        This optional field holds the token ID of the subject,
        returned for example on successful authentication.
        See <xref linkend="rest-api-auth" />.
       </para>

       <para>
        If you do not specify the token ID,
        OpenAM uses the token ID of the subject making the request.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>"environment"</literal></term>
      <listitem>
       <para>
        This optional field holds a map of keys to lists of values.
       </para>

       <para>
        If you do not specify the environment, the default is an empty map.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>

    <para>
     The example below requests policy decisions
     for <literal>http://www.example.com/</literal>.
     The <literal>iPlanetDirectoryPro</literal> header sets the SSO token
     for a user who has access to perform the operation,
     and the subject takes the SSO token of the user
     who wants to access a resource.
    </para>

    <programlisting language="java">
$ <userinput>curl \
 --request POST \
 --header "iPlanetDirectoryPro: AQIC5...NDU1*" \
 --header "Content-Type: application/json" \
 --data '{
    "resource": "http://www.example.com/",
    "subject": "AQIC5...zE4*"
 }' \
 https://openam.example.com:8443/openam/json/realm/policies?_action=evaluateTree</userinput>
<computeroutput>[ {
  "resource" : "http://www.example.com:80/",
  "actions" : {
    "GET" : true,
    "OPTIONS" : true,
    "HEAD" : true
  },
  "attributes" : {
  },
  "advices" : {
  }
}, {
  "resource" : "http://www.example.com:80/*",
  "actions" : {
    "POST" : false,
    "PATCH" : false,
    "GET" : true,
    "DELETE" : true,
    "OPTIONS" : true,
    "HEAD" : true,
    "PUT" : true
  },
  "attributes" : {
    "myStaticAttr" : [ "myStaticValue" ]
  },
  "advices" : {
  }
}, {
  "resource" : "http://www.example.com:80/*?*",
  "actions" : {
    "POST" : false,
    "PATCH" : false,
    "GET" : false,
    "DELETE" : false,
    "OPTIONS" : true,
    "HEAD" : false,
    "PUT" : false
  },
  "attributes" : {
  },
  "advices" : {
    "AuthLevelConditionAdvice" : [ "/:3" ]
  }
} ]</computeroutput>
    </programlisting>

    <para>
     Notice that OpenAM returns decisions not only for the specified resource,
     but also for matching resource names
     in the tree whose root is the specified resource.
    </para>

    <variablelist>
     <para>
      In the JSON list of decisions returned for each resource,
      OpenAM includes a these fields.
     </para>

     <varlistentry>
      <term><literal>"resource"</literal></term>
      <listitem>
       <para>
        A resource name whose root is the resource specified in the request
       </para>

       <para>
        Notice that the resources are normalized.
        In the example, the request does not explicitly specify port 80,
        but the response does show the port number.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>"actions"</literal></term>
      <listitem>
       <para>
        A map of action name keys
        to Boolean values that indicate whether
        the action is allowed (<literal>true</literal>)
        or denied (<literal>false</literal>)
        for the specified resource
       </para>

       <para>
        In the example, for matching resources with a query string
        only HTTP OPTIONS is allowed according to the policies configured.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>"attributes"</literal></term>
      <listitem>
       <para>
        A map of attribute names to their values,
        if any resource attributes are returned
        according to applicable policies
       </para>

       <para>
        In the example, the policy that applies
        to <literal>http://www.example.com:80/*</literal>
        causes a static attribute to be returned.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>"advices"</literal></term>
      <listitem>
       <para>
        A map of advice names to their values,
        if any advice is returned according to applicable policies
       </para>

       <para>
        The <literal>"advices"</literal> field can provide hints
        regarding what OpenAM needs to take the authorization decision.
       </para>

       <para>
        In the example, the policy that applies
        to resources with a query string
        requests that the subject be authenticated
        at an authentication level of at least 3.
       </para>

       <programlisting language="java">
{
    "advices": {
        "AuthLevelConditionAdvice": [ "/:3" ]
    }
}
       </programlisting>
      </listitem>
     </varlistentry>
    </variablelist>

    <para>
     You can use the query string parameters
     <literal>_prettyPrint=true</literal> to make the output easier to read,
     and <literal>_fields=<replaceable>field-name</replaceable>[,<replaceable>field-name</replaceable>...]</literal>
     to limit the fields returned in the output.
    </para>
   </section>
  </section>

  <section xml:id="rest-api-authz-policies">
   <title>Managing Policies</title>

   <para>
    Policy resources are represented in JSON and take the following form.
    Policy resources are built from standard JSON objects and values
    (strings, numbers, objects, arrays, <literal>true</literal>,
    <literal>false</literal>, and <literal>null</literal>).
   </para>

   <programlisting language="java">
{
   "name": "test",
   "active": true,
   "description": "A test policy",
   "resources": {
       "included": [
           "http://www.example.com:80/*"
       ],
       "excluded": [
           "http://www.example.com:80/images/*"
       ]
   },
   "applicationName": "application name",
   "actionValues": {
       "read": true,
       "write": false
   },
   "subject": {
       "a subject or": "a composite of subjects"
   },
   "condition": {
       "a condition or": "a composite of conditions"
   },
   "resourceAttributes": [
       {
           "type": "Static",
           "propertyName": "name",
           "propertyValues": [
               "value"
           ]
       },
       {
           "type": "User",
           "propertyName": "profile attribute",
           "propertyValues": [
               "profile attribute", ...
           ]
       },
   ]
}
   </programlisting>

   <variablelist>
    <para>
     The values for the fields shown in the example are explained below.
    </para>

    <varlistentry>
     <term><literal>"name"</literal></term>
     <listitem>
      <para>
       String matching the name
       in the URL used when creating the policy by HTTP PUT
       or in the body when creating the policy by HTTP POST
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>"active"</literal></term>
     <listitem>
      <para>
       Boolean indicating whether OpenAM considers the policy active
       for evaluation purposes, defaults to <literal>false</literal>
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>"description"</literal></term>
     <listitem>
      <para>
       String describing the policy
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>"resources"</literal></term>
     <listitem>
      <para>
       List of the resource name pattern strings
       to which the policy applies (<literal>"included"</literal>)
       and does not apply (<literal>"excluded"</literal>)
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>"applicationName"</literal></term>
     <listitem>
      <para>
       String application name,
       such as <literal>"iPlanetAMWebAgentService"</literal>,
       <literal>"crestPolicyService"</literal>,
       or some other application name
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>"actionValues"</literal></term>
     <listitem>
      <para>
       Set of string action names,
       each set to a boolean indicating whether the action is allowed
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>"subject"</literal></term>
     <listitem>
      <para>
       Specifies the subjects to which the policy applies,
       where subjects can be combined by using the built-in types
       <literal>"AND"</literal>, <literal>"OR"</literal>,
       and <literal>"NOT"</literal>,
       and where subject implementations are pluggable
      </para>

      <para>
       Subjects are shown as JSON objects
       with <literal>"type"</literal> set to the name of the implementation
       (using a short name for all registered subject implementations),
       and also other fields depending on the implementation.
       The subject types registered by default include the following.
      </para>

      <itemizedlist>
       <listitem>
        <para>
         <literal>"AnyUser"</literal>, meaning any authenticated user
        </para>
       </listitem>

       <listitem>
        <para>
         <literal>"Attribute"</literal> to specify attributes
         of the subject's profile as in the following example.
        </para>

        <programlisting language="java">
{
   "subject": {
       "type": "Attribute",
       "name": "ou",
       "value": "Product Testing"
   }
}
        </programlisting>
       </listitem>

       <listitem>
        <para>
         <literal>"Group"</literal> to specify a particular group
         as in the following example.
        </para>

        <programlisting language="java">
{
   "subject": {
       "type": "Group",
       "id": "id=HR Managers,ou=group,dc=openam,dc=forgerock,dc=org"
   }
}
        </programlisting>
       </listitem>

       <listitem>
        <para>
         <literal>"NONE"</literal>, meaning no subject
        </para>
       </listitem>

       <listitem>
        <para>
         <literal>"Role"</literal> to specify a particular OpenAM role
         as in the following example.
        </para>

        <programlisting language="java">
{
   "subject": {
       "type": "Role",
       "id": "id=admins,ou=role,dc=openam,dc=forgerock,dc=org"
   }
}
        </programlisting>
       </listitem>

       <listitem>
        <para>
         <literal>"User"</literal> to specify a particular user
         as in the following example.
        </para>

        <programlisting language="java">
{
   "subject": {
       "type": "User",
       "id": "id=bob,ou=user,dc=openam,dc=forgerock,dc=org"
   }
}
        </programlisting>
       </listitem>
      </itemizedlist>

      <para>
       <literal>"Policy"</literal> subject types can be used
       to correspond to the subject configured for policies
       as in the following example.
      </para>

      <programlisting language="java">
{
   "type": "Policy",
   "name": "All authenticated users",
   "className": "com.sun.identity.policy.plugins.AuthenticatedUsers",
   "values": []
}
      </programlisting>
      <para>
       The following example defines the subject
       either as Bob Dobbs or as a member of the HR Managers group.
      </para>

      <programlisting language="java">
{
   "subject": {
       "type": "OR",
       "subjects": [
           {
               "subject": {
                   "type": "User",
                   "id": "id=bob,ou=user,dc=openam,dc=forgerock,dc=org"
               }
           },
           {
               "subject": {
                   "type": "Group",
                   "id": "id=HR Managers,ou=group,dc=openam,dc=forgerock,dc=org"
               }
           }
       ]
   }
}
      </programlisting>

      <para>
       To read a subject type description,
       or to list available subject types,
       see <xref linkend="rest-api-authz-subject-types" />.
      </para>

     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>"condition"</literal></term>
     <listitem>
      <para>
       Specifies additional conditions, where conditions can be combined
       by using the built-in types <literal>"AND"</literal>,
       <literal>"OR"</literal>, and <literal>"NOT"</literal>,
       and where condition implementations are pluggable
      </para>

      <para>
       Conditions are shown as JSON objects
       with <literal>"type"</literal> set to the name of the implementation
       (using a short name for all registered condition implementations),
       and also other fields depending on the implementation.
       The condition types registered by default include the following.
      </para>

      <itemizedlist>
       <listitem>
        <para>
         <literal>"AttributeLookup"</literal> to specify
         a value to match in the resource as in the following example.
        </para>

        <programlisting language="java">
{
   "type": "AttributeLookup",
   "key": "postaladdress",
   "value": "33 New Montgomery St."
}
        </programlisting>
       </listitem>

       <listitem>
        <para>
         <literal>"DNSName"</literal> to specify domain names
         where the request originated as in the following example.
        </para>

        <programlisting language="java">
{
   "type": "DNSName",
   "domainNameMask": "*.example.com"
}
        </programlisting>
       </listitem>

       <listitem>
        <para>
         <literal>"IP"</literal> to specify an IP address range
         as in the following example.
        </para>

        <programlisting language="java">
{
   "type": "IP",
   "startIp": "127.0.0.1",
   "endIp": "127.0.0.255"
}
        </programlisting>
       </listitem>

       <listitem>
        <para>
         <literal>"NumericAttribute"</literal> to specify a value or range
         for a numeric attribute from the subject's user profile
         as in the following example.
        </para>

        <programlisting language="java">
{
   "type": "NumericAttribute",
   "attributeName": "gidNumber",
   "caseSensitive": "&lt;=",
   "value": "1000"
}
        </programlisting>

        <para><!-- This is my reading of NumericAttributeCondition.java. Looks like a bug. -->
          <literal>"caseSensitive"</literal> is optional, but if used
          then it should be set to a comparison operator, one of:
          <literal>&lt; &lt;= = > >=</literal>.
          If not specified, then OpenAM checks for equality.
         </para>
        </listitem>

        <listitem>
         <para>
          <literal>"StringAttribute"</literal> to specify a value
          for a string-valued attribute from the subject's user profile
          as in the following example.
         </para>

         <programlisting language="java">
{
    "type": "StringAttribute",
    "attributeName": "location",
    "caseSensitive": false,
    "value": "Bristol"
}
         </programlisting>
        </listitem>

        <listitem>
         <para>
          <literal>"Time"</literal> to specify a time range,
          where type is the only required field in the following example.
         </para>

         <programlisting language="java">
{
    "type": "Time",
    "startTime": "08:30",
    "endTime": "17:30",
    "startDay": "MONDAY",
    "endDay": "FRIDAY",
    "startDate": "01/01/2014",
    "endDate": "12/31/2014",
    "enforcementTimeZone": "GMT-8"
}
         </programlisting>
        </listitem>
       </itemizedlist>

       <para>
        <literal>"Policy"</literal> condition types can be used
        to correspond to the conditions configured for policies
        as in the following example.
       </para>

       <programlisting language="java">
{
    "type": "Policy",
    "className": "org.forgerock.openam.policy.plugins.OAuth2ScopeCondition",
    "name": "oauth2scope",
    "properties": {
        "OAuth2Scope": [
            "openid profile"
        ]
    }
}
       </programlisting>

       <para>
        The following example defines the condition as
        neither Saturday or Sunday, nor certain client IP addresses.
       </para>

       <programlisting language="java">
{
    "type": "NOT",
    "condition": {
        "type": "OR",
        "conditions": [
            {
                "type": "Time",
                "startDay": "SATURDAY",
                "endDay": "SUNDAY",
                "enforcementTimeZone": "GMT"
            },
            {
                "type": "IP",
                "startIp": "192.168.0.1",
                "endIp": "192.168.0.255"
            }
        ]
    }
}
       </programlisting>

       <para>
        To read a condition type description,
        or to list available condition types,
        see <xref linkend="rest-api-authz-condition-types" />.
       </para>

      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>"resourceAttributes"</literal></term>
      <listitem>
       <para>
        List of resource attributes to return with decisions,
        where resource attribute implementations are pluggable
       </para>

       <para>The default implementations provide
        for statically defined attributes
        and for attributes retrieved from user profiles.
       </para>

       <para>
        Attributes are shown as JSON objects
        with <literal>"type"</literal> set to the name of the implementation
        (by default either
        <literal>"Static"</literal> for statically defined attributes
        or <literal>"User"</literal> for attributes from the user profile),
        <literal>"propertyName"</literal> set to the attribute names.
        In the current implementation,
        <literal>"propertyValues"</literal> also holds attribute names
        rather than attribute values.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>

    <para>
     The examples above do not show the fields added to a policy by OpenAM
     to indicate when the policy was created and last updated, and by whom.
     Those field are
     <literal>"createdBy"</literal> and <literal>"lastModifiedBy"</literal>,
     which take strings holding universal identifier DNs as their values,
     and <literal>"creationDate"</literal> and <literal>"lastModified"</literal>,
     which take strings holding ISO-8601 timestamps.
    </para>

    <section xml:id="rest-api-authz-policies-create">
     <title>Creating Policies</title>

     <para>
      To create a policy,
      either perform an HTTP PUT indicating the full path to the resource
      and the name in the resource matching the name in the path,
      or perform an HTTP POST with the name to use specified in the resource.
     </para>

     <para>
      The HTTP PUT form includes the policy definition as the JSON resource data,
      with the header <literal>Content-Type: application/json</literal>
      and uses the <literal>If-None-Match: *</literal> header.
     </para>

     <para>
      The <literal>iPlanetDirectoryPro</literal> header sets the SSO token
      for a user who has access to perform the operation.
     </para>

     <screen>
$ <userinput>curl \
 --request PUT \
 --header "iPlanetDirectoryPro: AQIC5w..." \
 --header "If-None-Match: *" \
 --header "Content-Type: application/json" \
 --data '{
    "name": "example",
    "active": true,
    "description": "Example Policy",
    "resources": {
        "included": [
            "http://www.example.com:80/*",
            "http://www.example.com:80/*?*"
        ],
        "excluded": []
    },
    "actionValues": {
        "POST": false,
        "GET": true
    },
    "subject": {
        "type": "User",
        "subjectName": "Bob Dobbs"
    }
}' \
 https://openam.example.com:8443/openam/json/realm/policies/example
</userinput>
<computeroutput>{
  "name" : "example",
  "active" : true,
  "description" : "Example Policy",
  "resources" : {
    "included" : [ "http://www.example.com:80/*",
                   "http://www.example.com:80/*?*" ],
    "excluded" : [ ]
  },
  "applicationName" : "iPlanetAMWebAgentService",
  "actionValues" : {
    "POST" : false,
    "GET" : true
  },
  "subject" : {
    "type" : "User",
    "subjectName" : "Bob Dobbs"
  },
  "lastModifiedBy" :
   "id=demo,ou=user,o=realm,ou=services,dc=openam,dc=forgerock,dc=org",
  "lastModified" : "2014-04-24T16:23:34Z",
  "createdBy" :
   "id=demo,ou=user,o=realm,ou=services,dc=openam,dc=forgerock,dc=org",
  "creationDate" : "2014-04-24T16:23:34Z"
}</computeroutput>
     </screen>

     <para>
      You can use the query string parameters
      <literal>_prettyPrint=true</literal> to make the output easier to read,
      and <literal>_fields=<replaceable>field-name</replaceable>[,<replaceable>field-name</replaceable>...]</literal>
      to limit the fields returned in the output.
     </para>

     <para>
      The HTTP POST form includes the policy definition as the JSON resource data,
      with the header <literal>Content-Type: application/json</literal>
      and uses the <literal>_action=create</literal> operation.
     </para>

     <para>
      The <literal>iPlanetDirectoryPro</literal> header sets the SSO token
      for a user who has access to perform the operation.
     </para>

     <screen>
$ <userinput>curl \
 --request POST \
 --header "iPlanetDirectoryPro: AQIC5..." \
 --header "Content-Type: application/json" \
 --data '{
    "name": "example",
    "active": true,
    "description": "Example Policy",
    "resources": {
        "included": [
            "http://www.example.com:80/*",
            "http://www.example.com:80/*?*"
        ],
        "excluded": []
    },
    "actionValues": {
        "POST": false,
        "GET": true
    },
    "subject": {
        "type": "User",
        "subjectName": "Bob Dobbs"
    }
}' \
 https://openam.example.com:8443/openam/json/realm/policies?_action=create</userinput>
<computeroutput>{
  "name" : "example",
  "active" : true,
  "description" : "Example Policy",
  "resources" : {
    "included" : [ "http://www.example.com:80/*",
                   "http://www.example.com:80/*?*" ],
    "excluded" : [ ]
  },
  "applicationName" : "iPlanetAMWebAgentService",
  "actionValues" : {
    "POST" : false,
    "GET" : true
  },
  "subject" : {
    "type" : "User",
    "subjectName" : "Bob Dobbs"
  },
  "lastModifiedBy" :
   "id=demo,ou=user,o=realm,ou=services,dc=openam,dc=forgerock,dc=org",
  "lastModified" : "2014-04-29T07:33:54Z",
  "createdBy" :
   "id=demo,ou=user,o=realm,ou=services,dc=openam,dc=forgerock,dc=org",
  "creationDate" : "2014-04-29T07:33:54Z"
}</computeroutput>
     </screen>
    </section>

    <section xml:id="rest-api-authz-policies-read">
     <title>Reading Policies</title>

     <para>
      To read a policy definition, perform an HTTP GET
      specifying the resource name.
     </para>

     <para>
      The <literal>iPlanetDirectoryPro</literal> header sets the SSO token
      for a user who has access to perform the operation.
     </para>

     <screen>
$ <userinput>curl \
 --header "iPlanetDirectoryPro: AQIC5..." \
 https://openam.example.com:8443/openam/json/realm/policies/example
</userinput>
<computeroutput>{
  "name" : "example",
  "active" : true,
  "description" : "Example Policy",
  "resources" : {
    "included" : [ "http://www.example.com:80/*",
                   "http://www.example.com:80/*?*" ],
    "excluded" : [ ]
  },
  "applicationName" : "iPlanetAMWebAgentService",
  "actionValues" : {
    "POST" : false,
    "GET" : true
  },
  "subject" : {
    "type" : "User",
    "subjectName" : "Bob Dobbs"
  },
  "lastModifiedBy" :
   "id=demo,ou=user,o=realm,ou=services,dc=openam,dc=forgerock,dc=org",
  "lastModified" : "2014-04-24T16:23:34Z",
  "createdBy" :
   "id=demo,ou=user,o=realm,ou=services,dc=openam,dc=forgerock,dc=org",
  "creationDate" : "2014-04-24T16:23:34Z"
}</computeroutput>
     </screen>

     <para>
      You can use the query string parameters
      <literal>_prettyPrint=true</literal> to make the output easier to read,
      and <literal>_fields=<replaceable>field-name</replaceable>[,<replaceable>field-name</replaceable>...]</literal>
      to limit the fields returned in the output.
     </para>
    </section>

    <section xml:id="rest-api-authz-policies-update">
     <title>Updating Policies</title>

     <para>
      To update a policy definition, perform an HTTP PUT
      specifying the resource name
      with the policy definition as the JSON resource data,
      and with the header <literal>Content-Type: application/json</literal>.
      This is essentially the same as creating a policy,
      but without the <literal>If-None-Match: *</literal> header.
     </para>

     <para>
      The <literal>iPlanetDirectoryPro</literal> header sets the SSO token
      for a user who has access to perform the operation.
     </para>

     <screen>
$ <userinput>curl \
 --request PUT \
 --header "iPlanetDirectoryPro: AQIC5w..." \
 --header "Content-Type: application/json" \
 --data '{
    "name": "example",
    "active": true,
    "description": "Updated example policy",
    "resources": {
        "included": [
            "http://www.example.com:80/*",
            "http://www.example.com:80/*?*"
        ],
        "excluded": []
    },
    "actionValues": {
        "POST": true,
        "GET": true
    },
    "subject": {
        "type": "User",
        "subjectName": "Bob Dobbs"
    }
}' \
 https://openam.example.com:8443/openam/json/realm/policies/example
</userinput>
<computeroutput>{
  "name" : "example",
  "active" : true,
  "description" : "Updated example policy",
  "resources" : {
    "included" : [ "http://www.example.com:80/*",
                   "http://www.example.com:80/*?*" ],
    "excluded" : [ ]
  },
  "applicationName" : "iPlanetAMWebAgentService",
  "actionValues" : {
    "POST" : true,
    "GET" : true
  },
  "subject" : {
    "type" : "User",
    "subjectName" : "Bob Dobbs"
  },
  "lastModifiedBy" :
   "id=demo,ou=user,o=realm,ou=services,dc=openam,dc=forgerock,dc=org",
  "lastModified" : "2014-04-24T16:44:01Z",
  "createdBy" :
   "id=demo,ou=user,o=realm,ou=services,dc=openam,dc=forgerock,dc=org",
  "creationDate" : "2014-04-24T16:23:34Z"
}</computeroutput>
     </screen>

     <para>
      You can use the query string parameters
      <literal>_prettyPrint=true</literal> to make the output easier to read,
      and <literal>_fields=<replaceable>field-name</replaceable>[,<replaceable>field-name</replaceable>...]</literal>
      to limit the fields returned in the output.
     </para>
    </section>

    <section xml:id="rest-api-authz-policies-delete">
     <title>Deleting Policies</title>

     <para>
      To delete a policy definition, perform an HTTP DELETE
      specifying the resource name.
     </para>

     <para>
      The <literal>iPlanetDirectoryPro</literal> header sets the SSO token
      for a user who has access to perform the operation.
     </para>

     <screen>
$ <userinput>curl \
 --header "iPlanetDirectoryPro: AQIC5w..." \
 --request DELETE \
 https://openam.example.com:8443/openam/json/realm/policies/example</userinput>
<computeroutput>{}</computeroutput>
     </screen>
    </section>

    <section xml:id="rest-api-authz-policies-query">
     <title>Listing Policies</title>

     <para>
      To list policy definitions, perform an HTTP GET on the endpoint, setting
      at least the <literal>_queryFilter</literal> query string parameter.
     </para>

     <screen>
$ <userinput>curl \
 --header "iPlanetDirectoryPro: AQIC5w..." \
 https://openam.example.com:8443/openam/json/realm/policies?_queryFilter=true</userinput>
<computeroutput>{
  "result" : [ ...policies... ],
  "resultCount" : 0,
  "pagedResultsCookie" : null,
  "remainingPagedResults" : -1
}</computeroutput>
     </screen>

     <para>
      The <literal>_queryFilter</literal> parameter can take
      <literal>true</literal> to match every policy,
      <literal>false</literal> to match no policies,
      or a filter of the following form to match field values:
      <literal><replaceable>field</replaceable> <replaceable>operator</replaceable> <replaceable>value</replaceable></literal>
      where <replaceable>field</replaceable> represents the field name,
      <replaceable>operator</replaceable> is the operator code,
      <replaceable>value</replaceable> is the value to match,
      and the entire filter is URL encoded.
      Supported operators are as follows.
     </para>

     <itemizedlist>
<!-- Not supported
      <listitem>
       <para>
        <literal>co</literal>: contains
       </para>
      </listitem>
-->

      <listitem>
       <para>
        <literal>eq</literal>: equals
       </para>
      </listitem>

      <listitem>
       <para>
        <literal>ge</literal>: greater than or equal to
       </para>
      </listitem>

      <listitem>
       <para>
        <literal>gt</literal>: greater than
       </para>
      </listitem>

      <listitem>
       <para>
        <literal>le</literal>: less than or equal to
       </para>
      </listitem>

      <listitem>
       <para>
        <literal>lt</literal>: less than
       </para>
      </listitem>

<!-- Not supported
      <listitem>
       <para>
        <literal>pr</literal>: exists, is present
       </para>

       <para>
        Do not set a <replaceable>value</replaceable> when using this operator.
       </para>
      </listitem>

      <listitem>
       <para>
        <literal>sw</literal>: starts with
       </para>
      </listitem>
-->
     </itemizedlist>

     <itemizedlist>
      <para>
       The <literal><replaceable>field</replaceable></literal> value
       can take the following values.
      </para>

      <listitem>
       <para>
        <literal>"name"</literal> (string equality only)
       </para>
      </listitem>

      <listitem>
       <para>
        <literal>"description"</literal> (string equality only)
       </para>
      </listitem>

      <listitem>
       <para>
        <literal>"applicationName"</literal> (string equality only)
       </para>
      </listitem>

      <listitem>
       <para>
        <literal>"createdBy"</literal> (string equality only)
       </para>
      </listitem>

      <listitem>
       <para>
        <literal>"lastModifiedBy"</literal> (string equality only)
       </para>
      </listitem>

      <listitem>
       <para>
        <literal>"creationDate"</literal> (all comparisons are supported;
        the date is either an
        <link
         xlink:show="new"
         xlink:href="http://sources.forgerock.org/action/jira-issue.do?key=ISO-8601"
        >ISO-8601</link> string,
        or a integer number of seconds from the UNIX epoch)
       </para>
      </listitem>

      <listitem>
       <para>
        <literal>"lastModified"</literal> (all comparisons are supported;
        the date is either an
        <link
         xlink:show="new"
         xlink:href="http://sources.forgerock.org/action/jira-issue.do?key=ISO-8601"
        >ISO-8601</link> string,
        or a integer number of seconds from the UNIX epoch)
       </para>
      </listitem>
     </itemizedlist>

     <para>
      Filters can be composed of multiple expressions
      by a using boolean operator <literal>AND</literal>,
      <!-- Not supported: <literal>OR</literal>, or <literal>!</literal> (NOT),-->
      and by using parentheses,
      <literal>(<replaceable>expression</replaceable>)</literal>,
      to group expressions.
      You must URL encode the filter expression
      in <literal>_queryFilter=<replaceable>filter</replaceable></literal>.
     </para>

     <para>
      You can use the query string parameters
      <literal>_prettyPrint=true</literal> to make the output easier to read,
      <literal>_fields=<replaceable>field-name</replaceable>[,<replaceable>field-name</replaceable>...]</literal>
      to limit the fields returned in the output.
     </para>

     <para>
      You can use <literal>_pageSize=<replaceable>integer</replaceable></literal>
      to limit the number of results returned, as shown in the following example
      that returns only the first of three policies.
     </para>

     <screen width="99">
$ <userinput>curl \
 --header "iPlanetDirectoryPro: AQIC5w..." \
 https://openam.example.com:8443/openam/json/policies?_queryFilter=true\&amp;_fields=name\&amp;_pageSize=1</userinput>
<computeroutput>{
  "result" : [ {
    "name" : "My Other Policy"
  } ],
  "resultCount" : 1,
  "pagedResultsCookie" : null,
  "remainingPagedResults" : 2
}</computeroutput>
     </screen>

     <para>
      You can use <literal>_sortKeys=[+-]<replaceable>field</replaceable>[,<replaceable>field</replaceable>...]</literal>
      to sort the results returned,
      where <replaceable>field</replaceable> represents a field
      in the JSON policy objects returned.
      Optionally use the <literal>+</literal> prefix to sort in ascending order
      (the default),
      or <literal>-</literal> to sort in descending order.
      The following example sorts the policy objects by their names.
     </para>

     <screen width="88">
  $ <userinput>curl \
 --header "iPlanetDirectoryPro: AQIC5w..." \
 https://openam.example.com:8443/openam/json/policies?_queryFilter=true\&amp;_sortKeys=name</userinput>
  <computeroutput>{
  "result" : [ {
    "name" : "Another Example Policy",
    ...
  }, {
    "name" : "My Other Policy",
    ...
  }, {
    "name" : "Sample Policy",
    ...
  } ],
  "resultCount" : 3,
  "pagedResultsCookie" : null,
  "remainingPagedResults" : 0
}</computeroutput>
     </screen>
    </section>
   </section>

   <section xml:id="rest-api-authz-applications">
    <title>Defining Applications</title>

    <para>
     Application definitions set constraints
     for the policies that can be defined for a particular application.
    </para>

    <para>
     Application resources are represented in JSON and take the following form.
     Application resources are built from standard JSON objects and values
     (strings, numbers, objects, arrays, <literal>true</literal>,
     <literal>false</literal>, and <literal>null</literal>).
    </para>

    <programlisting language="java">
{
  "name": "application name string",
  "resources": [
     "resource name pattern",
     ...
  ],
  "actions": {
     "action name string": true,
     "other action name string": false,
     ...
  },
  "conditions": [
     "condition type",
     ...
  ],
  "realm": "/realm",
  "applicationType": "application type name string",
  "description": "string describing application",
  "resourceComparator": "resource comparator class name",
  "subjects": [
     "subject type",
     ...
  ],
  "entitlementCombiner": "decision combiner",
  "saveIndex": "save index class name",
  "searchIndex": "search index class name",
  "attributeNames": [
     "attribute implementation class name",
     ...
  ]
}
    </programlisting>

    <variablelist>
     <para>
      The values for the fields shown in the description are explained below.
     </para>

     <varlistentry>
      <term><literal>"name"</literal></term>
      <listitem>
       <para>
        String matching the name
        in the URL used when creating the application by HTTP PUT
        or in the body when creating the application by HTTP POST
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>"resources"</literal></term>
      <listitem>
       <para>
        Strings specifying resource name patterns as in the following example
       </para>

       <programlisting language="java">
{
    "resources": [
        "http://www.example.com:8080/*",
        "http://www.example.com:8080/*?*"
    ]
}
       </programlisting>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>"actions"</literal></term>
      <listitem>
       <para>
        Set of string action names,
        each set to a boolean indicating whether the action is allowed
        in the context of this application as in the following example
       </para>

       <programlisting language="java">
{
    "actions": {
        "UPDATE": true,
        "PATCH": true,
        "QUERY": true,
        "CREATE": true,
        "DELETE": true,
        "READ": true,
        "ACTION": true
    }
}
       </programlisting>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>"conditions"</literal></term>
      <listitem>
       <para>
        Condition types allowed in the context of this application
       </para>

       <para>
        The following condition types are available.
       </para>

       <simplelist>
        <member><literal>"AND"</literal></member>
        <member><literal>"AttributeLookup"</literal></member>
        <member><literal>"DNSName"</literal></member>
        <member><literal>"IP"</literal></member>
        <member><literal>"NOT"</literal></member>
        <member><literal>"NumericAttribute"</literal></member>
        <member><literal>"OR"</literal></member>
        <member><literal>"Policy"</literal></member>
        <member><literal>"StringAttribute"</literal></member>
        <member><literal>"Time"</literal></member>
       </simplelist>

        <para>
         For more on condition types,
         see <xref linkend="rest-api-authz-condition-types" />.
        </para>
       </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>"realm"</literal></term>
      <listitem>
       <para>
        Name of the realm where this application is defined
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>"applicationType"</literal></term>
      <listitem>
       <para>
        Name of the application type used as a template for this application
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>"description"</literal></term>
      <listitem>
       <para>
        String describing the application
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>"resourceComparator"</literal></term>
      <listitem>
       <para>
        Class name of the resource comparator implementation used
        in the context of this application
       </para>

       <para>
        The following implementations are available.
       </para>

       <simplelist>
        <member><literal>"com.sun.identity.entitlement.ExactMatchResourceName"</literal></member>
        <member><literal>"com.sun.identity.entitlement.PrefixResourceName"</literal></member>
        <member><literal>"com.sun.identity.entitlement.RegExResourceName"</literal></member>
        <member><literal>"com.sun.identity.entitlement.URLResourceName"</literal></member>
       </simplelist>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>"subjects"</literal></term>
      <listitem>
       <para>
        Subject types allowed in the context of this application
       </para>

       <para>
        The following subject types are available.
       </para>

       <simplelist>
        <member><literal>"AND"</literal></member>
        <member><literal>"AnyUser"</literal></member>
        <member><literal>"Attribute"</literal></member>
        <member><literal>"Group"</literal></member>
        <member><literal>"NONE"</literal></member>
        <member><literal>"NOT"</literal></member>
        <member><literal>"OR"</literal></member>
        <member><literal>"Policy"</literal></member>
        <member><literal>"Role"</literal></member>
        <member><literal>"User"</literal></member>
       </simplelist>

       <para>
        For more on subject types,
        see <xref linkend="rest-api-authz-subject-types" />.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>"entitlementCombiner"</literal></term>
      <listitem>
       <para>
        Name of the decision combiner, such as <literal>"DenyOverride"</literal>.
       </para>

       <para>
        For more on decision combiners,
        see <xref linkend="rest-api-authz-decision-combiners" />.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>"saveIndex"</literal></term>
      <listitem>
       <para>
        Class name of the implementation for creating indexes for resource names,
        such as <literal>"com.sun.identity.entitlement.util.ResourceNameIndexGenerator"</literal>
        for URL resource names
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>"searchIndex"</literal></term>
      <listitem>
       <para>
        Class name of the implementation for searching indexes for resource names,
        such as <literal>"com.sun.identity.entitlement.util.ResourceNameSplitter"</literal>
        for URL resource names
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>"attributeNames"</literal></term>
      <listitem>
       <para>
        Class names of implementations for getting attributes such as
        <literal>"com.sun.identity.entitlement.StaticAttributes"</literal>,
        and <literal>"com.sun.identity.entitlement.UserAttributes"</literal>
       </para>
      </listitem>
     </varlistentry>
    </variablelist>

    <para>
     The examples above do not show the fields added by OpenAM
     to indicate when the application was created and last updated, and by whom.
     Those field are
     <literal>"createdBy"</literal> and <literal>"lastModifiedBy"</literal>,
     which take strings holding universal identifier DNs as their values,
     and <literal>"creationDate"</literal> and <literal>"lastModifiedDate"</literal>,
     which an integer number of seconds since the Unix epoch.
    </para>

    <section xml:id="rest-api-authz-applications-create">
     <title>Creating Applications</title>

     <para>
      To create an application definition,
      either perform an HTTP PUT indicating the full path to the resource
      and the name in the resource matching the name in the path,
      or perform an HTTP POST with the name to use specified in the resource.
     </para>

     <para>
      The HTTP PUT form includes the application definition
      as the JSON resource data,
      with the header <literal>Content-Type: application/json</literal>
      and uses the <literal>If-None-Match: *</literal> header.
     </para>

     <para>
      The <literal>iPlanetDirectoryPro</literal> header sets the SSO token
      for a user who has access to perform the operation.
     </para>

     <screen>
$ <userinput>curl \
 --request PUT \
 --header "If-None-Match: *" \
 --header "iPlanetDirectoryPro: AQIC5..." \
 --header "Content-Type: application/json" \
 --data '{
    "name": "crest",
    "resources": [
        "http://www.example.com:8080/*",
        "http://www.example.com:8080/*?*"
    ],
    "actions": {
        "UPDATE": true,
        "PATCH": true,
        "QUERY": true,
        "CREATE": true,
        "DELETE": true,
        "READ": true,
        "ACTION": true
    },
    "conditions": [
        "not",
        "dateRange",
        "timezone",
        "timeRange",
        "or",
        "dnsName",
        "ipRange",
        "daysOfWeek",
        "and"
    ],
    "realm": "/realm",
    "applicationType": "crestPolicyService",
    "description": "An example application for Common REST",
    "resourceComparator": "com.sun.identity.entitlement.URLResourceName",
    "subjects": [
        "com.sun.identity.admin.model.IdRepoUserViewSubject",
        "com.sun.identity.admin.model.NotViewSubject",
        "com.sun.identity.admin.model.IdRepoRoleViewSubject",
        "com.sun.identity.admin.model.AndViewSubject",
        "com.sun.identity.admin.model.VirtualViewSubject",
        "com.sun.identity.admin.model.OrViewSubject",
        "com.sun.identity.admin.model.IdRepoGroupViewSubject",
        "com.sun.identity.admin.model.AttributeViewSubject"
    ],
    "entitlementCombiner": "com.sun.identity.entitlement.DenyOverride",
    "saveIndex": null,
    "searchIndex": null,
    "attributeNames": []
}' \
 https://openam.example.com:8443/openam/json/applications/crest</userinput>
<computeroutput>{
  "name" : "crest",
  "resources" : [
   "http://www.example.com:8080/*",
   "http://www.example.com:8080/*?*"
  ],
  "actions" : {
    "UPDATE" : true,
    "PATCH" : true,
    "QUERY" : true,
    "CREATE" : true,
    "DELETE" : true,
    "READ" : true,
    "ACTION" : true
  },
  "conditions" : [
   "not",
   "dateRange",
   "timezone",
   "timeRange",
   "or",
   "dnsName",
   "ipRange",
   "daysOfWeek",
   "and"
  ],
  "realm" : "/",
  "creationDate" : 1398761708295,
  "lastModifiedDate" : 1398761708295,
  "createdBy" : "id=amadmin,ou=user,dc=openam,dc=forgerock,dc=org",
  "lastModifiedBy" : "id=amadmin,ou=user,dc=openam,dc=forgerock,dc=org",
  "applicationType" : "crestPolicyService",
  "description" : "An example application for Common REST",
  "resourceComparator" : "com.sun.identity.entitlement.URLResourceName",
  "subjects" : [
   "com.sun.identity.admin.model.IdRepoUserViewSubject",
   "com.sun.identity.admin.model.NotViewSubject",
   "com.sun.identity.admin.model.AndViewSubject",
   "com.sun.identity.admin.model.IdRepoRoleViewSubject",
   "com.sun.identity.admin.model.OrViewSubject",
   "com.sun.identity.admin.model.VirtualViewSubject",
   "com.sun.identity.admin.model.IdRepoGroupViewSubject",
   "com.sun.identity.admin.model.AttributeViewSubject"
  ],
  "entitlementCombiner" : "com.sun.identity.entitlement.DenyOverride",
  "saveIndex" : null,
  "searchIndex" : null,
  "attributeNames" : [ ]
}</computeroutput>
     </screen>

     <para>
      You can use the query string parameters
      <literal>_prettyPrint=true</literal> to make the output easier to read,
      and <literal>_fields=<replaceable>field-name</replaceable>[,<replaceable>field-name</replaceable>...]</literal>
      to limit the fields returned in the output.
     </para>

     <para>
      The HTTP POST form includes the application definition
      as the JSON resource data,
      with the header <literal>Content-Type: application/json</literal>
      and uses the <literal>_action=create</literal> operation.
     </para>

     <para>
      The <literal>iPlanetDirectoryPro</literal> header sets the SSO token
      for a user who has access to perform the operation.
     </para>

     <screen>
$ <userinput>curl \
 --request POST \
 --header "iPlanetDirectoryPro: AQIC5..." \
 --header "Content-Type: application/json" \
 --data '{
    "name": "crest",
    "resources": [
        "http://www.example.com:8080/*",
        "http://www.example.com:8080/*?*"
    ],
    "actions": {
        "UPDATE": true,
        "PATCH": true,
        "QUERY": true,
        "CREATE": true,
        "DELETE": true,
        "READ": true,
        "ACTION": true
    },
    "conditions": [
        "not",
        "dateRange",
        "timezone",
        "timeRange",
        "or",
        "dnsName",
        "ipRange",
        "daysOfWeek",
        "and"
    ],
    "realm": "/realm",
    "applicationType": "crestPolicyService",
    "description": "An example application for Common REST",
    "resourceComparator": "com.sun.identity.entitlement.URLResourceName",
    "subjects": [
        "com.sun.identity.admin.model.IdRepoUserViewSubject",
        "com.sun.identity.admin.model.NotViewSubject",
        "com.sun.identity.admin.model.IdRepoRoleViewSubject",
        "com.sun.identity.admin.model.AndViewSubject",
        "com.sun.identity.admin.model.VirtualViewSubject",
        "com.sun.identity.admin.model.OrViewSubject",
        "com.sun.identity.admin.model.IdRepoGroupViewSubject",
        "com.sun.identity.admin.model.AttributeViewSubject"
    ],
    "entitlementCombiner": "com.sun.identity.entitlement.DenyOverride",
    "saveIndex": null,
    "searchIndex": null,
    "attributeNames": []
}' \
 https://openam.example.com:8443/openam/json/applications/?_action=create</userinput>
<computeroutput>{
  "name" : "crest",
  "resources" : [
   "http://www.example.com:8080/*",
   "http://www.example.com:8080/*?*"
  ],
  "actions" : {
    "UPDATE" : true,
    "PATCH" : true,
    "QUERY" : true,
    "CREATE" : true,
    "DELETE" : true,
    "READ" : true,
    "ACTION" : true
  },
  "conditions" : [
   "not",
   "dateRange",
   "timezone",
   "timeRange",
   "or",
   "dnsName",
   "ipRange",
   "daysOfWeek",
   "and"
  ],
  "realm" : "/",
  "creationDate" : 1398762452667,
  "lastModifiedDate" : 1398762452667,
  "createdBy" : "id=amadmin,ou=user,dc=openam,dc=forgerock,dc=org",
  "lastModifiedBy" : "id=amadmin,ou=user,dc=openam,dc=forgerock,dc=org",
  "applicationType" : "crestPolicyService",
  "description" : "An example application for Common REST",
  "resourceComparator" : "com.sun.identity.entitlement.URLResourceName",
  "subjects" : [
   "com.sun.identity.admin.model.IdRepoUserViewSubject",
   "com.sun.identity.admin.model.NotViewSubject",
   "com.sun.identity.admin.model.AndViewSubject",
   "com.sun.identity.admin.model.IdRepoRoleViewSubject",
   "com.sun.identity.admin.model.OrViewSubject",
   "com.sun.identity.admin.model.VirtualViewSubject",
   "com.sun.identity.admin.model.IdRepoGroupViewSubject",
   "com.sun.identity.admin.model.AttributeViewSubject"
  ],
  "entitlementCombiner" : "com.sun.identity.entitlement.DenyOverride",
  "saveIndex" : null,
  "searchIndex" : null,
  "attributeNames" : [ ]
}</computeroutput>
     </screen>
    </section>

    <section xml:id="rest-api-authz-applications-read">
     <title>Reading Applications</title>

     <para>
      To read an application definition, perform an HTTP GET
      specifying the resource name.
     </para>

     <para>
      The <literal>iPlanetDirectoryPro</literal> header sets the SSO token
      for a user who has access to perform the operation.
     </para>

     <screen width="89">
$ <userinput>curl \
 --header "iPlanetDirectoryPro: AQIC5..." \
 https://openam.example.com:8443/openam/json/realm/applications/iPlanetAMWebAgentService</userinput>
<computeroutput>{
  "name" : "iPlanetAMWebAgentService",
  "resources" : [ "http://*:*/*", "http://*:*/*?*" ],
  "actions" : {
    "POST" : true,
    "PATCH" : true,
    "GET" : true,
    "DELETE" : true,
    "OPTIONS" : true,
    "PUT" : true,
    "HEAD" : true
  },
  "conditions" : [
   "not",
   "dateRange",
   "timezone",
   "timeRange",
   "or",
   "dnsName",
   "ipRange",
   "daysOfWeek",
   "and"
  ],
  "realm" : "/realm",
  "creationDate" : 1398760362341,
  "lastModifiedDate" : 1398760362341,
  "createdBy" : "id=dsameuser,ou=user,dc=openam,dc=forgerock,dc=org",
  "lastModifiedBy" : "id=dsameuser,ou=user,dc=openam,dc=forgerock,dc=org",
  "applicationType" : "iPlanetAMWebAgentService",
  "description" : null,
  "resourceComparator" : "com.sun.identity.entitlement.URLResourceName",
  "subjects" : [
   "com.sun.identity.admin.model.IdRepoUserViewSubject",
   "com.sun.identity.admin.model.NotViewSubject",
   "com.sun.identity.admin.model.AndViewSubject",
   "com.sun.identity.admin.model.IdRepoRoleViewSubject",
   "com.sun.identity.admin.model.OrViewSubject",
   "com.sun.identity.admin.model.VirtualViewSubject",
   "com.sun.identity.admin.model.IdRepoGroupViewSubject",
   "com.sun.identity.admin.model.AttributeViewSubject"
  ],
  "entitlementCombiner" : "com.sun.identity.entitlement.DenyOverride",
  "saveIndex" : null,
  "searchIndex" : null,
  "attributeNames" : [ ]
}</computeroutput>
     </screen>

     <para>
      You can use the query string parameters
      <literal>_prettyPrint=true</literal> to make the output easier to read,
      and <literal>_fields=<replaceable>field-name</replaceable>[,<replaceable>field-name</replaceable>...]</literal>
      to limit the fields returned in the output.
     </para>
    </section>

    <section xml:id="rest-api-authz-applications-update">
     <title>Updating Applications</title>

     <para>
      To update an application definition, perform an HTTP PUT
      specifying the resource name
      with the application definition as the JSON resource data,
      and with the header <literal>Content-Type: application/json</literal>.
      This is essentially the same as creating an application definition,
      but without the <literal>If-None-Match: *</literal> header.
     </para>

     <para>
      The <literal>iPlanetDirectoryPro</literal> header sets the SSO token
      for a user who has access to perform the operation.
     </para>

     <screen width="81">
$ <userinput>curl \
 --request PUT \
 --header "iPlanetDirectoryPro: AQIC5..." \
 --header "Content-Type: application/json" \
 --data '{
    "name": "crest",
    "resources": [
        "http://www.example.com:8080/*",
        "http://www.example.com:8080/*?*"
    ],
    "actions": {
        "UPDATE": false,
        "PATCH": false,
        "QUERY": true,
        "CREATE": false,
        "DELETE": false,
        "READ": true,
        "ACTION": false
    },
    "conditions": [
        "not",
        "dateRange",
        "timezone",
        "timeRange",
        "or",
        "dnsName",
        "ipRange",
        "daysOfWeek",
        "and"
    ],
    "realm": "/realm",
    "applicationType": "crestPolicyService",
    "description": "An read-only example application for Common REST",
    "resourceComparator": "com.sun.identity.entitlement.URLResourceName",
    "subjects": [
        "com.sun.identity.admin.model.IdRepoUserViewSubject",
        "com.sun.identity.admin.model.NotViewSubject",
        "com.sun.identity.admin.model.IdRepoRoleViewSubject",
        "com.sun.identity.admin.model.AndViewSubject",
        "com.sun.identity.admin.model.VirtualViewSubject",
        "com.sun.identity.admin.model.OrViewSubject",
        "com.sun.identity.admin.model.IdRepoGroupViewSubject",
        "com.sun.identity.admin.model.AttributeViewSubject"
    ],
    "entitlementCombiner": "com.sun.identity.entitlement.DenyOverride",
    "saveIndex": null,
    "searchIndex": null,
    "attributeNames": []
}' \
 https://openam.example.com:8443/openam/json/applications/crest</userinput>
<computeroutput>{
  "name" : "crest",
  "resources" : [
   "http://www.example.com:8080/*",
   "http://www.example.com:8080/*?*"
  ],
  "actions" : {
    "UPDATE" : false,
    "PATCH" : false,
    "QUERY" : true,
    "CREATE" : false,
    "DELETE" : false,
    "READ" : true,
    "ACTION" : false
  },
  "conditions" : [
   "not",
   "dateRange",
   "timezone",
   "timeRange",
   "or",
   "dnsName",
   "ipRange",
   "daysOfWeek",
   "and"
  ],
  "realm" : "/",
  "creationDate" : 1398762194628,
  "lastModifiedDate" : 1398762194628,
  "createdBy" : "id=amadmin,ou=user,dc=openam,dc=forgerock,dc=org",
  "lastModifiedBy" : "id=amadmin,ou=user,dc=openam,dc=forgerock,dc=org",
  "applicationType" : "crestPolicyService",
  "description" : "An read-only example application for Common REST",
  "resourceComparator" : "com.sun.identity.entitlement.URLResourceName",
  "subjects" : [
   "com.sun.identity.admin.model.IdRepoUserViewSubject",
   "com.sun.identity.admin.model.NotViewSubject",
   "com.sun.identity.admin.model.AndViewSubject",
   "com.sun.identity.admin.model.IdRepoRoleViewSubject",
   "com.sun.identity.admin.model.OrViewSubject",
   "com.sun.identity.admin.model.VirtualViewSubject",
   "com.sun.identity.admin.model.IdRepoGroupViewSubject",
   "com.sun.identity.admin.model.AttributeViewSubject"
  ],
  "entitlementCombiner" : "com.sun.identity.entitlement.DenyOverride",
  "saveIndex" : null,
  "searchIndex" : null,
  "attributeNames" : [ ]
}</computeroutput>
     </screen>

     <para>
      You can use the query string parameters
      <literal>_prettyPrint=true</literal> to make the output easier to read,
      and <literal>_fields=<replaceable>field-name</replaceable>[,<replaceable>field-name</replaceable>...]</literal>
      to limit the fields returned in the output.
     </para>
    </section>

    <section xml:id="rest-api-authz-applications-delete">
     <title>Deleting Applications</title>

     <para>
      To delete an application definition, perform an HTTP DELETE
      specifying the resource name.
     </para>

     <para>
      The <literal>iPlanetDirectoryPro</literal> header sets the SSO token
      for a user who has access to perform the operation.
     </para>

     <screen>
$ <userinput>curl \
 --request DELETE \
 --header "iPlanetDirectoryPro: AQIC5..." \
 https://openam.example.com:8443/openam/json/applications/crest</userinput>
<computeroutput>{}</computeroutput>
     </screen>
    </section>

    <section xml:id="rest-api-authz-applications-query">
     <title>Listing Applications</title>

     <para>
      To list application definitions, perform an HTTP GET on the endpoint,
      setting at least the <literal>_queryFilter</literal> query string parameter.
     </para>

     <screen width="81">
$ <userinput>curl \
 --header "iPlanetDirectoryPro: AQIC5..." \
 https://openam.example.com:8443/openam/json/realm/applications?_queryFilter=true</userinput>
<computeroutput>{
  "result" : [ {
    "name" : "iPlanetAMWebAgentService",
    "resources" : [ "http://*:*/*", "http://*:*/*?*" ],
    "actions" : {
      "POST" : true,
      "PATCH" : true,
      "GET" : true,
      "DELETE" : true,
      "OPTIONS" : true,
      "PUT" : true,
      "HEAD" : true
    },
    "conditions" : [
     "not",
     "dateRange",
     "timezone",
     "timeRange",
     "or",
     "dnsName",
     "ipRange",
     "daysOfWeek",
     "and"
    ],
    "realm" : "/realm",
    "creationDate" : 1398760362341,
    "lastModifiedDate" : 1398760362341,
    "createdBy" : "id=dsameuser,ou=user,dc=openam,dc=forgerock,dc=org",
    "lastModifiedBy" : "id=dsameuser,ou=user,dc=openam,dc=forgerock,dc=org",
    "applicationType" : "iPlanetAMWebAgentService",
    "description" : null,
    "resourceComparator" : "com.sun.identity.entitlement.URLResourceName",
    "subjects" : [
     "com.sun.identity.admin.model.IdRepoUserViewSubject",
     "com.sun.identity.admin.model.NotViewSubject",
     "com.sun.identity.admin.model.AndViewSubject",
     "com.sun.identity.admin.model.IdRepoRoleViewSubject",
     "com.sun.identity.admin.model.OrViewSubject",
     "com.sun.identity.admin.model.VirtualViewSubject",
     "com.sun.identity.admin.model.IdRepoGroupViewSubject",
     "com.sun.identity.admin.model.AttributeViewSubject"
    ],
    "entitlementCombiner" : "com.sun.identity.entitlement.DenyOverride",
    "saveIndex" : null,
    "searchIndex" : null,
    "attributeNames" : [ ]
  } ],
  "resultCount" : 1,
  "pagedResultsCookie" : null,
  "remainingPagedResults" : -1
}</computeroutput>
     </screen>

     <para>
      The <literal>_queryFilter</literal> parameter can take
      <literal>true</literal> to match every policy,
      <literal>false</literal> to match no policies,
      or a filter of the following form to match field values:
      <literal><replaceable>field</replaceable> <replaceable>operator</replaceable> <replaceable>value</replaceable></literal>
      where <replaceable>field</replaceable> represents the field name,
      <replaceable>operator</replaceable> is the operator code,
      <replaceable>value</replaceable> is the value to match,
      and the entire filter is URL encoded.
      Supported operators are as follows.
     </para>

     <itemizedlist>
      <listitem>
       <para>
        <literal>eq</literal>: equals (for matching strings)
       </para>
      </listitem>

      <listitem>
       <para>
        <literal>ge</literal>: greater than or equal to (for matching integers)
       </para>
      </listitem>

      <listitem>
       <para>
        <literal>gt</literal>: greater than (for matching integers)
       </para>
      </listitem>

      <listitem>
       <para>
        <literal>le</literal>: less than or equal to (for matching integers)
       </para>
      </listitem>

      <listitem>
       <para>
        <literal>lt</literal>: less than (for matching integers)
       </para>
      </listitem>
     </itemizedlist>

     <itemizedlist>
      <para>
       The <literal><replaceable>field</replaceable></literal> value
       can take the following values.
      </para>

      <listitem>
       <para>
        <literal>"name"</literal>
       </para>
      </listitem>

      <listitem>
       <para>
        <literal>"description"</literal>
       </para>
      </listitem>

      <listitem>
       <para>
        <literal>"applicationName"</literal>
       </para>
      </listitem>

      <listitem>
       <para>
        <literal>"createdBy"</literal>
       </para>
      </listitem>

      <listitem>
       <para>
        <literal>"lastModifiedBy"</literal>
       </para>
      </listitem>

      <listitem>
       <para>
        <literal>"creationDate"</literal>
       </para>
      </listitem>

      <listitem>
       <para>
        <literal>"lastModified"</literal>
       </para>
      </listitem>
     </itemizedlist>

     <para>
      Filters can be composed of multiple expressions
      by a using boolean operator <literal>AND</literal>,
      and by using parentheses,
      <literal>(<replaceable>expression</replaceable>)</literal>,
      to group expressions.
      You must URL encode the filter expression
      in <literal>_queryFilter=<replaceable>filter</replaceable></literal>.
     </para>

     <para>
      You can use the query string parameters
      <literal>_prettyPrint=true</literal> to make the output easier to read,
      <literal>_fields=<replaceable>field-name</replaceable>[,<replaceable>field-name</replaceable>...]</literal>
      to limit the fields returned in the output.
     </para>

     <para>
      You can use <literal>_pageSize=<replaceable>integer</replaceable></literal>
      to limit the number of results returned.
     </para>
    </section>
   </section>

   <section xml:id="rest-api-authz-application-types">
    <title>Viewing Application Types</title>

    <para>
     Application types act as templates for creating applications.
    </para>

    <para>
     Applications types are server-wide, and do not differ by realm.
     Hence the URI for the application types API
     does not contain a realm component,
     but is <literal>/json/applicationtypes</literal>.
    </para>

    <para>
     Application type resources are represented in JSON and take the following form.
     Application type resources are built from standard JSON objects and values
     (strings, numbers, objects, arrays, <literal>true</literal>,
     <literal>false</literal>, and <literal>null</literal>).
    </para>

    <programlisting language="java">
{
  "name": "application type name string",
  "actions": {
     "action name string": true,
     "other action name string": false,
     ...
  },
  "resourceComparator": "resource comparator class name",
  "saveIndex": "save index class name",
  "searchIndex": "search index class name",
  "applicationClassName": "com.sun.identity.entitlement.Application"
}
    </programlisting>

    <variablelist>
     <para>
      The values for the fields shown in the description are explained below.
     </para>

     <varlistentry>
      <term><literal>"name"</literal></term>
      <listitem>
       <para>
        String matching the name
        in the URL used when creating the application type by HTTP PUT
        or in the body when creating the application type by HTTP POST
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>"actions"</literal></term>
      <listitem>
       <para>
        Set of string action names,
        each set to a boolean indicating whether the action is allowed
        as in the following example
       </para>

       <programlisting language="java">
{
    "actions": {
        "UPDATE": true,
        "PATCH": true,
        "QUERY": true,
        "CREATE": true,
        "DELETE": true,
        "READ": true,
        "ACTION": true
    }
}
       </programlisting>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>"resourceComparator"</literal></term>
      <listitem>
       <para>
        Class name of the resource comparator implementation used
        in the context of this application
       </para>

       <para>
        The following implementations are available.
       </para>

       <simplelist>
        <member><literal>"com.sun.identity.entitlement.ExactMatchResourceName"</literal></member>
        <member><literal>"com.sun.identity.entitlement.PrefixResourceName"</literal></member>
        <member><literal>"com.sun.identity.entitlement.RegExResourceName"</literal></member>
        <member><literal>"com.sun.identity.entitlement.URLResourceName"</literal></member>
       </simplelist>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>"resourceComparator"</literal></term>
      <listitem>
       <para>
        Class name of the resource comparator implementation used
        in the context of this application
       </para>

       <para>
        The following implementations are available.
       </para>

       <simplelist>
        <member><literal>"com.sun.identity.entitlement.ExactMatchResourceName"</literal></member>
        <member><literal>"com.sun.identity.entitlement.PrefixResourceName"</literal></member>
        <member><literal>"com.sun.identity.entitlement.RegExResourceName"</literal></member>
        <member><literal>"com.sun.identity.entitlement.URLResourceName"</literal></member>
       </simplelist>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>"saveIndex"</literal></term>
      <listitem>
       <para>
        Class name of the implementation for creating indexes for resource names,
        such as <literal>"com.sun.identity.entitlement.util.ResourceNameIndexGenerator"</literal>
        for URL resource names
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>"searchIndex"</literal></term>
      <listitem>
       <para>
        Class name of the implementation for searching indexes for resource names,
        such as <literal>"com.sun.identity.entitlement.util.ResourceNameSplitter"</literal>
        for URL resource names
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>"applicationClassName"</literal></term>
      <listitem>
       <para>
        Class name of the application implementation,
        such as <literal>"com.sun.identity.entitlement.Application"</literal>
       </para>
      </listitem>
     </varlistentry>
    </variablelist>

    <section xml:id="rest-api-authz-application-types-read">
     <title>Reading Application Types</title>

     <para>
      To read an application type, perform an HTTP GET
      specifying the resource name.
     </para>

     <para>
      The <literal>iPlanetDirectoryPro</literal> header sets the SSO token
      for a user who has access to perform the operation.
     </para>

     <screen>
$ <userinput>curl \
 --header "iPlanetDirectoryPro: AQIC5..." \
 https://openam.example.com:8443/openam/json/applicationtypes/crestPolicyService</userinput>
<computeroutput>{
  "name" : "crestPolicyService",
  "actions" : {
    "UPDATE" : true,
    "PATCH" : true,
    "QUERY" : true,
    "CREATE" : true,
    "DELETE" : true,
    "READ" : true,
    "ACTION" : true
  },
  "resourceComparator" : "com.sun.identity.entitlement.URLResourceName",
  "saveIndex" : "org.forgerock.openam.entitlement.indextree.TreeSaveIndex",
  "searchIndex" : "org.forgerock.openam.entitlement.indextree.TreeSearchIndex",
  "applicationClassName" : "com.sun.identity.entitlement.Application"
}
</computeroutput>
     </screen>

     <para>
      You can use the query string parameters
      <literal>_prettyPrint=true</literal> to make the output easier to read,
      and <literal>_fields=<replaceable>field-name</replaceable>[,<replaceable>field-name</replaceable>...]</literal>
      to limit the fields returned in the output.
     </para>
    </section>

    <section xml:id="rest-api-authz-application-types-query">
     <title>Listing Application Types</title>

     <para>
      To list application types, perform an HTTP GET on the endpoint,
      setting at least the <literal>_queryFilter</literal> query string parameter
      as in the following example.
     </para>

     <screen>
$ <userinput>curl \
 --header "iPlanetDirectoryPro: AQIC5..." \
 https://openam.example.com:8443/openam/json/applicationtypes?_queryFilter=true</userinput>
<computeroutput>{
  "result" : [ ... application types ... ],
  "resultCount" : 8,
  "pagedResultsCookie" : null,
  "remainingPagedResults" : -1
}</computeroutput>
     </screen>
    </section>
   </section>

   <section xml:id="rest-api-authz-condition-types">
    <title>Viewing Condition Types</title>

    <para>
     Condition types describe the JSON representation
     of conditions that you can use in policy definitions.
    </para>

    <para>
     Condition types are server-wide, and do not differ by realm.
     Hence the URI for the condition types API
     does not contain a realm component,
     but is <literal>/json/conditiontypes</literal>.
    </para>

    <section xml:id="rest-api-authz-condition-types-read">
     <title>Reading Condition Types</title>

     <para>
      To read a condition type, perform an HTTP GET
      specifying the resource name.
     </para>

     <para>
      The <literal>iPlanetDirectoryPro</literal> header sets the SSO token
      for a user who has access to perform the operation.
     </para>

     <para>
      You can use the query string parameter
      <literal>_prettyPrint=true</literal> to make the output easier to read.
     </para>

     <screen>
$ <userinput>curl \
 --header "iPlanetDirectoryPro: AQIC5..." \
 https://openam.example.com:8443/openam/json/realm/conditiontypes/IP</userinput>
<computeroutput>{
  "title" : "IP",
  "logical" : false,
  "config" : {
    "type" : "object",
    "properties" : {
      "startIp" : {
        "type" : "string"
      },
      "endIp" : {
        "type" : "string"
      }
    }
  }
}</computeroutput>
     </screen>

     <para>
      Notice that the condition type has a title,
      a "logical" field
      that indicates whether the type is a logical operator or takes a predicate,
      and a configuration specification.
      The configuration specification in this case indicates
      that an IP condition has two properties, "startIp" and "endIp",
      each of which take a string value.
      In other words, a concrete IP condition specification
      is represented in a policy definition as in the following example.
     </para>

     <programlisting language="java">
{
   "type": "IP",
   "startIp": "127.0.0.1",
   "endIp": "127.0.0.255"
}
     </programlisting>

     <para>
      The configuration is what differs the most across condition types.
      The NOT condition, for example, takes a single condition object
      as the body of its configuration.
     </para>

     <screen>
$ <userinput>curl \
 --header "iPlanetDirectoryPro: AQIC5..." \
 https://openam.example.com:8443/openam/json/realm/conditiontypes/NOT</userinput>
<computeroutput>{
  "title" : "NOT",
  "logical" : true,
  "config" : {
    "type" : "object",
    "properties" : {
      "condition" : {
        "type" : "object",
        "properties" : {
        }
      }
    }
  }
}</computeroutput>
     </screen>

     <para>
      The concrete NOT condition therefore takes the following form.
     </para>

     <programlisting language="java">
{
    "type": "NOT",
    "condition": {
        ...
    }
}
     </programlisting>

     <para>
      The OR condition takes an array of conditions.
     </para>

     <screen>
$ <userinput>curl \
 --header "iPlanetDirectoryPro: AQIC5..." \
 https://openam.example.com:8443/openam/json/realm/conditiontypes/OR</userinput>
<computeroutput>{
  "title" : "OR",
  "logical" : true,
  "config" : {
    "type" : "object",
    "properties" : {
      "conditions" : {
        "type" : "array",
        "items" : {
          "type" : "any"
        }
      }
    }
  }
}</computeroutput>
     </screen>

     <para>
      A corresponding concrete OR condition thus takes the following form.
     </para>


     <programlisting language="java">
{
    "type": "OR",
    "conditions": [
        {
            ...
        },
        {
            ...
        },
        ...
    ]
}
     </programlisting>
    </section>

    <section xml:id="rest-api-authz-condition-types-query">
     <title>Listing Condition Types</title>

     <para>
      To list all condition types, perform an HTTP GET on the endpoint,
      setting the query string parameter, <literal>_queryFilter=true</literal>,
      as in the following example.
     </para>

     <screen width="83">
$ <userinput>curl \
 --header "iPlanetDirectoryPro: AQIC5..." \
 https://openam.example.com:8443/openam/json/realm/conditiontypes?_queryFilter=true</userinput>
<computeroutput>{
  "result" : [ ... condition types ... ],
  "resultCount" : 10,
  "pagedResultsCookie" : null,
  "remainingPagedResults" : -1
}</computeroutput>
     </screen>

     <para>
      You can use the query string parameter
      <literal>_prettyPrint=true</literal> to make the output easier to read.
     </para>
    </section>
   </section>

   <section xml:id="rest-api-authz-subject-types">
    <title>Viewing Subject Types</title>

    <para>
     Subject types describe the JSON representation
     of subjects that you can use in policy definitions.
    </para>

    <para>
     Subject types are server-wide, and do not differ by realm.
     Hence the URI for the subject types API
     does not contain a realm component,
     but is <literal>/json/subjecttypes</literal>.
    </para>

    <section xml:id="rest-api-authz-subject-types-read">
     <title>Reading Subject Types</title>

     <para>
      To read a subject type, perform an HTTP GET
      specifying the resource name.
     </para>

     <para>
      The <literal>iPlanetDirectoryPro</literal> header sets the SSO token
      for a user who has access to perform the operation.
     </para>

     <para>
      You can use the query string parameter
      <literal>_prettyPrint=true</literal> to make the output easier to read.
     </para>

     <screen>
$ <userinput>curl \
 --header "iPlanetDirectoryPro: AQIC5..." \
 https://openam.example.com:8443/openam/json/subjecttypes/User</userinput>
<computeroutput>{
  "title" : "User",
  "logical" : false,
  "config" : {
    "type" : "object",
    "properties" : {
      "id" : {
        "type" : "string"
      }
    }
  }
}</computeroutput>
     </screen>

     <para>
      Notice that the subject type has a title,
      a "logical" field
      that indicates whether the type is a logical operator or takes a predicate,
      and a configuration specification.
      The configuration specification in this case indicates
      that a User subject has one property,
      an "Id", which takes a string value.
      In other words, a concrete User subject specification
      is represented in a policy definition as in the following example.
     </para>

     <programlisting language="java">
{
   "type": "User",
   "id": "id=demo,ou=user,dc=openam,dc=forgerock,dc=org"
}
     </programlisting>

     <para>
      The configuration is what differs the most across subject types.
      The AND condition, for example, takes an array of subject objects
      as the body of its configuration.
     </para>

     <screen>
$ <userinput>curl \
 --header "iPlanetDirectoryPro: AQIC5..." \
 https://openam.example.com:8443/openam/json/subjecttypes/AND</userinput>
<computeroutput>{
  "title" : "AND",
  "logical" : true,
  "config" : {
    "type" : "object",
    "properties" : {
      "subjects" : {
        "type" : "array",
        "items" : {
          "type" : "any"
        }
      }
    }
  }
}</computeroutput>
     </screen>

     <para>
      The concrete AND subject therefore takes the following form.
     </para>

     <programlisting language="java">
{
    "type": "AND",
    "subject": [
      {
        ...
      },
      ...
    ]
}
     </programlisting>
    </section>

    <section xml:id="rest-api-authz-subject-types-query">
     <title>Listing Subject Types</title>

     <para>
      To list all subject types, perform an HTTP GET on the endpoint,
      setting the query string parameter, <literal>_queryFilter=true</literal>,
      as in the following example.
     </para>

     <screen>
$ <userinput>curl \
 --header "iPlanetDirectoryPro: AQIC5..." \
 https://openam.example.com:8443/openam/json/subjecttypes/?_queryFilter=true</userinput>
<computeroutput>{
  "result" : [ ... subject types ... ],
  "resultCount" : 10,
  "pagedResultsCookie" : null,
  "remainingPagedResults" : -1
}</computeroutput>
     </screen>

     <para>
      You can use the query string parameter
      <literal>_prettyPrint=true</literal> to make the output easier to read.
     </para>
    </section>
   </section>

   <section xml:id="rest-api-authz-decision-combiners">
    <title>Viewing Decision Combiners</title>

    <para>
     Decision combiners describe how to resolve policy decisions
     when multiple policies apply.
    </para>

    <para>
     Decision combiners are server-wide, and do not differ by realm.
     Hence the URI for the condition types API
     does not contain a realm component,
     but is <literal>/json/decisioncombiners</literal>.
    </para>

    <para>
     To list all decision combiners, perform an HTTP GET on the endpoint,
     setting the query string parameter, <literal>_queryFilter=true</literal>,
     as in the following example.
    </para>

    <screen>
$ <userinput>curl \
 --header "iPlanetDirectoryPro: AQIC5..." \
 https://openam.example.com:8443/openam/json/decisioncombiners/?_queryFilter=true</userinput>
<computeroutput>{
  "result" : [ {
    "title" : "DenyOverride"
  } ],
  "resultCount" : 1,
  "pagedResultsCookie" : null,
  "remainingPagedResults" : -1
}</computeroutput>
    </screen>

    <para>
     You can use the query string parameter
     <literal>_prettyPrint=true</literal> to make the output easier to read.
    </para>

    <para>
     To view an individual decision combiner, perform an HTTP GET on its resource.
    </para>

    <screen>
$ <userinput>curl \
 --header "iPlanetDirectoryPro: AQIC5..." \
 https://openam.example.com:8443/openam/json/decisioncombiners/DenyOverride</userinput>
<computeroutput>{
  "title" : "DenyOverride"
}</computeroutput>
    </screen>
   </section>
  </section>

  <section xml:id="rest-api-authz-legacy">
   <title>Authorization (Legacy API)</title>

   <para>You can call on OpenAM to decide whether to authorize access to a
   protected resource based on a valid token. Of course, you must percent
   encode the resource URI.</para>

   <para>Interface Stability:
    <link
     xlink:show="new"
     xlink:href="admin-guide#interface-stability"
     xlink:role="http://docbook.org/xlink/role/olink">Deprecated</link>
   </para>

   <screen>
$ <userinput>curl "https://openam.example.com:8443/openam/identity/authorize?\
uri=http%3A%2F%2Fwww.example.com%3A8080%2Fexamples%2Findex.html\
&amp;subjectid=AQIC5wM2LY4SfcxuxIP0VnP2lVjs7ypEM6VDx6srk56CN1Q.*AAJTSQACMDE.*"</userinput>
<computeroutput>boolean=true</computeroutput>
   </screen>

   <para>To indicate access denied, OpenAM returns
   <literal>boolean=false</literal>.</para>

   <section xml:id="rest-api-policy-decisions">
    <title>Requesting Policy Decisions (Legacy API)</title>

    <para>OpenAM provides additional REST APIs for requesting policy
    decisions.</para>

    <!-- Pending replacement
    <para>Interface Stability: <link xlink:show="new"
    xlink:href="admin-guide#interface-stability"
    xlink:role="http://docbook.org/xlink/role/olink">Deprecated</link></para>-->

    <itemizedlist>
     <para>The policy decision interfaces use the following path suffixes and
     query string parameters.</para>

     <para>Path suffixes for policy decision requests include the following.</para>
     <listitem>
      <para><literal>ws/1/entitlement/decision</literal>: request a decision
      pertaining to a single resource</para>
     </listitem>
     <listitem>
      <para><literal>ws/1/entitlement/decisions</literal>: request decisions
      pertaining to multiple resources</para>
     </listitem>
     <listitem>
      <para><literal>ws/1/entitlement/entitlement</literal>: request decisions
      for a specified resource URL</para>
     </listitem>
     <listitem>
      <para><literal>ws/1/entitlement/entitlements</literal>: request decisions
      for a specified resource URL and all resources underneath</para>
     </listitem>
    </itemizedlist>

    <itemizedlist>
     <para>Query string parameters for policy decision requests include the
     following.</para>

     <listitem>
      <para><literal>subject=<replaceable>encoded-token</replaceable></literal>,
      where the token is encoded using the method implemented in <link
      xlink:show="new"
      xlink:href="http://sources.forgerock.org/browse/~raw,r=6/openam/trunk/opensso/www/public/use/docs/fampdf/Encoder.java"
      ><filename>Encoder.java</filename></link>.</para>

      <para>In the examples for this section, the token ID obtained during
      authentication for <literal>amadmin</literal> is abbreviated as
      <literal>AQIC5...DU3*</literal> and the encoded token ID for the subject
      is <literal>MJ3QFTr4ZV2QrtlJvXlg0Q2dMRM=</literal>.</para>
     </listitem>

     <listitem>
      <para><literal>action=get</literal>, or <literal>action=post</literal>,
      which identifies the user agent action when requesting a decision.</para>
     </listitem>

     <listitem>
      <para>
       <literal>application=iPlanetAMWebAgentService</literal>
       or <literal>application=crestPolicyService</literal>
      </para>
     </listitem>

     <listitem>
      <para><literal>resource=<replaceable>resource-url</replaceable></literal>,
      or multiple <literal>resources=<replaceable>resource-url</replaceable></literal>
      parameters for multiple decisions.</para>
     </listitem>

     <listitem>
      <para><literal>env=<replaceable>requestDnsName%3Dfqdn</replaceable></literal>,
      <literal>env=<replaceable>requestIP%3Ddotted-quads</replaceable></literal>,
      <literal>env=<replaceable>requestTime%3Dseconds-since-epoch</replaceable></literal>,
      and <literal>env=<replaceable>requestDnsName%3Dtime-zone</replaceable></literal>
      where <replaceable>time-zone</replaceable> is from Java
      <literal>TimeZone.getTimeZone().getID()</literal>. The
      <literal>env</literal> parameters thus express conditions.</para>

      <para>
       In order to express a condition that specifies OAuth 2.0 scopes,
       set the value of the parameter
       to <literal>scope=<replaceable>scopes</replaceable></literal>.
       To set scopes to <literal>openid</literal> and <literal>profile</literal>,
       use <literal>env=scope%3Dopenid%20profile</literal> for example.
      </para>
     </listitem>
    </itemizedlist>

    <para>Authentication for these interfaces uses cookies, so if your
    application is not running in a browser, first authenticate as described in
    <xref linkend="rest-api-auth" />.</para>

    <para>To request a decision for a single resource, use an HTTP GET on
    <literal>/ws/1/entitlement/decision</literal> as in the following example.</para>

    <screen>
$ <userinput>curl \
 --request GET \
 --cookie "iPlanetDirectoryPro=AQIC5...DU3*" \
 "https://openam.example.com:8443/openam/ws/1/entitlement/decision\
?subject=MJ3QFTr4ZV2QrtlJvXlg0Q2dMRM=&amp;action=GET\
&amp;application=iPlanetAMWebAgentService\
&amp;resource=http%3A%2F%2Fwww.example.com%2Findex.html"</userinput>
<computeroutput>allow</computeroutput>
    </screen>

    <para>If access is denied, the result is <literal>deny</literal>.</para>

    <para>To request decisions for multiple resources, use an HTTP GET on
    <literal>/ws/1/entitlement/decisions</literal> as in the following example.</para>

    <screen>
$ <userinput>curl \
 --request GET \
 --cookie "iPlanetDirectoryPro=AQIC5...DU3*" \
 "https://openam.example.com:8443/openam/ws/1/entitlement/decisions\
?subject=MJ3QFTr4ZV2QrtlJvXlg0Q2dMRM=&amp;action=GET\
&amp;application=iPlanetAMWebAgentService\
&amp;resources=http%3A%2F%2Fwww.example.com%2Findex.html\
&amp;resources=http%3A%2F%2Fwww.example.com%2Ffavicon.ico"</userinput>
<computeroutput>{
    "statusCode": 200,
    "body": {
        "results": [
            {
                "actionsValues": {
                    "POST": true,
                    "GET": true
                },
                "attributes": {},
                "advices": {},
                "resourceName": "http://www.example.com:80/index.html"
            },
            {
                "actionsValues": {
                    "POST": true,
                    "GET": true
                },
                "attributes": {},
                "advices": {},
                "resourceName": "http://www.example.com:80/favicon.ico"
            }
        ]
    },
    "statusMessage": "OK"
}</computeroutput>
    </screen>

    <para>
     To request decisions for a given resource,
     use an HTTP GET on <literal>/ws/1/entitlement/entitlement</literal>
     as in the following example.
    </para>

    <screen>
$ <userinput>curl \
 --request GET \
 --cookie "iPlanetDirectoryPro=AQIC5...DU3*" \
 "https://openam.example.com:8443/openam/ws/1/entitlement/entitlement\
?subject=MJ3QFTr4ZV2QrtlJvXlg0Q2dMRM=\
&amp;application=iPlanetAMWebAgentService\
&amp;resource=http%3A%2F%2Fwww.example.com%2F*"</userinput>
<computeroutput>{
    "statusCode": 200,
    "body": {
        "actionsValues": {
            "POST": true,
            "GET": true
        },
        "attributes": {},
        "advices": {},
        "resourceName": "http://www.example.com:80/*"
    },
    "statusMessage": "OK"
}</computeroutput>
    </screen>

    <para>
     To request decisions for all resources underneath a given resource,
     use an HTTP GET on <literal>/ws/1/entitlement/entitlements</literal>
     as in the following example.
    </para>

    <screen>
 $ <userinput>curl \
 --request GET \
 --cookie "iPlanetDirectoryPro=AQIC5...DU3*" \
 "https://openam.example.com:8443/openam/ws/1/entitlement/entitlements\
?subject=MJ3QFTr4ZV2QrtlJvXlg0Q2dMRM=\
&amp;application=iPlanetAMWebAgentService\
&amp;resource=http%3A%2F%2Fwww.example.com%2F"</userinput>
<computeroutput>{
    "statusCode": 200,
    "body": {
        "results": [
            {
                "actionsValues": {},
                "resourceName": "http://www.example.com:80/"
            },
            {
                "actionsValues": {
                    "POST": true,
                    "GET": true
                },
                "advices": {},
                "resourceName": "http://www.example.com:80/*"
            },
            {
                "actionsValues": {
                    "POST": true,
                    "GET": true
                },
                "attributes": {},
                "advices": {},
                "resourceName": "http://www.example.com:80/*?*"
            }
        ]
    },
    "statusMessage": "OK"
}</computeroutput>
    </screen>

   </section>

   <section xml:id="rest-api-policy-management">
    <title>Managing Policies (Legacy API)</title>

    <para>OpenAM exposes a REST API through the
    <literal>/ws/1/entitlement/privilege</literal> endpoint under the
    deployment URI. The API lets you create, read, update, delete, and query
    policies.</para>

    <para>Authentication for these interfaces uses cookies, so if your
    application is not running in a browser, first authenticate as described in
    <xref linkend="rest-api-auth" />.</para>

    <section xml:id="rest-api-policy-management-create">
     <title>Creating Policies (Legacy API)</title>

     <para>You create a policy by using an HTTP POST of the JSON representation
     to the endpoint. You must URL encode the JSON before passing it to
     OpenAM.</para>

     <screen>
$ <userinput>cat entitlement.json</userinput>
<computeroutput>{
    "name": "Example HTTP",
    "eSubject": {
        "state": {
            "className": "com.sun.identity.policy.plugins.AuthenticatedUsers",
            "exclusive": false,
            "name": "All Authenticated Users",
            "values": []
        },
        "className": "com.sun.identity.entitlement.opensso.PolicySubject"
    },
    "entitlement": {
        "actionsValues": {
            "POST": true,
            "GET": true
        },
        "applicationName": "iPlanetAMWebAgentService",
        "name": "authorize",
        "resourceNames": [
            "http://www.example.com:80/*"
        ]
    }
}</computeroutput>

$ <userinput>curl \
 --request POST \
 --cookie "iPlanetDirectoryPro=AQIC5...DU3*" \
 --data-urlencode "privilege.json@entitlement.json" \
 https://openam.example.com:8443/openam/ws/1/entitlement/privilege</userinput>
<computeroutput>{"statusCode":201,"body":"Created","statusMessage":"Created"}</computeroutput>

$ <userinput>cat entitlement2.json</userinput>
<computeroutput>{
    "name": "Example HTTPS",
    "eSubject": {
        "state": {
            "className": "com.sun.identity.policy.plugins.AuthenticatedUsers",
            "exclusive": false,
            "name": "All Authenticated Users",
            "values": []
        },
        "className": "com.sun.identity.entitlement.opensso.PolicySubject"
    },
    "entitlement": {
        "actionsValues": {
            "POST": false,
            "GET": true
        },
        "applicationName": "iPlanetAMWebAgentService",
        "name": "authorize",
        "resourceNames": [
            "https://www.example.com:443/*?*"
        ]
    }
}</computeroutput>

$ <userinput>curl \
 --request POST \
 --cookie "iPlanetDirectoryPro=AQIC5...DU3*" \
 --data-urlencode "privilege.json@entitlement2.json" \
 https://openam.example.com:8443/openam/ws/1/entitlement/privilege</userinput>
<computeroutput>{"statusCode":201,"body":"Created","statusMessage":"Created"}</computeroutput>
     </screen>
    </section>

    <section xml:id="rest-api-policy-management-read">
     <title>Reading Policies (Legacy API)</title>

     <para>To read a policy, use an HTTP GET on the endpoint followed by
     the URL-encoded name of the policy.</para>

     <para>Notice that the "state" is returned as a long string, and so is not
     shown here in full.</para>

     <screen width="81">
$ <userinput>curl \
 --request GET \
 --cookie "iPlanetDirectoryPro=AQIC5...DU3*" \
 https://openam.example.com:8443/openam/ws/1/entitlement/privilege/Example%20HTTP</userinput>
<computeroutput>{
    "statusCode": 200,
    "body": {
        "results": {
            "name": "Example HTTP",
            "eSubject": {
                "state": "{\n  \"className\": \"com.sun.identity.policy...}",
                "className": "com.sun.identity.entitlement.opensso.PolicySubject"
            },
            "entitlement": {
                "actionsValues": {
                    "POST": true,
                    "GET": true
                },
                "applicationName": "iPlanetAMWebAgentService",
                "name": "authorize",
                "resourceNames": [
                    "http://www.example.com:80/*"
                ]
            }
        }
    },
    "statusMessage": "OK"
}</computeroutput>

$ <userinput>curl \
 --request GET \
 --cookie "iPlanetDirectoryPro=AQIC5...DU3*" \
 https://openam.example.com:8443/openam/ws/1/entitlement/privilege/Example%20HTTPS</userinput>
<computeroutput>{
    "statusCode": 200,
    "body": {
        "results": {
            "name": "Example HTTPS",
            "eSubject": {
                "state": "{\n  \"className\": \"com.sun.identity.policy...}",
                "className": "com.sun.identity.entitlement.opensso.PolicySubject"
            },
            "entitlement": {
                "actionsValues": {
                    "POST": false,
                    "GET": true
                },
                "applicationName": "iPlanetAMWebAgentService",
                "name": "authorize",
                "resourceNames": [
                    "https://www.example.com:443/*?*"
                ]
            }
        }
    },
    "statusMessage": "OK"
}</computeroutput>
     </screen>
    </section>

    <section xml:id="rest-api-policy-management-update">
     <title>Updating Policies (Legacy API)</title>

     <para>To update a policy, use an HTTP PUT on the endpoint followed by the
     URL-encoded name of the policy.</para>

     <screen width="81">
$ <userinput>cat update.json</userinput>
<computeroutput>{
    "name": "Example HTTP",
    "eSubject": {
        "state": {
            "className": "com.sun.identity.policy.plugins.AuthenticatedUsers",
            "exclusive": false,
            "name": "All Authenticated Users",
            "values": []
        },
        "className": "com.sun.identity.entitlement.opensso.PolicySubject"
    },
    "entitlement": {
        "actionsValues": {
            "POST": false,
            "GET": true
        },
        "applicationName": "iPlanetAMWebAgentService",
        "name": "authorize",
        "resourceNames": [
            "http://www.example.com:80/*?*"
        ]
    }
}</computeroutput>

$ <userinput>curl \
 --request PUT \
 --cookie "iPlanetDirectoryPro=AQIC5...DU3*" \
 --data-urlencode "privilege.json@update.json" \
 https://openam.example.com:8443/openam/ws/1/entitlement/privilege/Example%20HTTP</userinput>
<computeroutput>{"statusCode":200,"body":"OK","statusMessage":"OK"}</computeroutput>
     </screen>
    </section>

    <section xml:id="rest-api-policy-management-delete">
     <title>Deleting Policies</title>

     <para>To delete a policy, use an HTTP DELETE on the endpoint followed by
     the URL-encoded name of the policy.</para>

     <screen width="81">
$ <userinput>curl \
 --request DELETE \
 --cookie "iPlanetDirectoryPro=AQIC5...DU3*" \
 https://openam.example.com:8443/openam/ws/1/entitlement/privilege/Example%20HTTPS</userinput>
<computeroutput>{"statusCode":200,"body":"OK","statusMessage":"OK"}</computeroutput>
     </screen>
    </section>

    <section xml:id="rest-api-policy-management-query">
     <title>Querying Policies</title>

     <para>To get the names of policies, use an HTTP GET on the endpoint.</para>

     <screen>
$ <userinput>curl \
 --request GET \
 --cookie "iPlanetDirectoryPro=AQIC5...DU3*" \
 https://openam.example.com:8443/openam/ws/1/entitlement/privilege</userinput>
<computeroutput>{
    "statusCode": 200,
    "body": {
        "results": [
            "Example HTTPS",
            "Example HTTP"
        ]
    },
    "statusMessage": "OK"
}</computeroutput>
     </screen>

     <para>You can pass a filter query parameter to get only policies
     that match the filter. Make sure you URL encode the filter value.</para>

     <screen>
$ <userinput>curl \
 --request GET \
 --cookie "iPlanetDirectoryPro=AQIC5...DU3*" \
 "https://openam.example.com:8443/openam/ws/1/entitlement/privilege\
?subject=MJ3QFTr4ZV2QrtlJvXlg0Q2dMRM=&amp;filter=name%3D*HTTP"</userinput>
<computeroutput>{
    "statusCode": 200,
    "body": {
        "results": [
            "Example HTTP"
        ]
    },
    "statusMessage": "OK"
}</computeroutput>
     </screen>
    </section>
   </section>
  </section>
 </section>

 <section xml:id="rest-api-oauth2">
  <title>OAuth 2.0 Authorization</title>
  <indexterm>
   <primary>OAuth 2.0</primary>
   <secondary>REST API</secondary>
  </indexterm>

  <itemizedlist>
   <para>OpenAM exposes the following REST endpoints for different OAuth 2.0
   purposes.</para>

   <listitem>
    <para>Endpoints for <link linkend="rest-api-oauth2-client-endpoints">OAuth
    2.0 clients and resource servers</link>, mostly defined in RFC 6749,
    <link xlink:href="http://tools.ietf.org/html/rfc6749" xlink:show="new"
    ><citetitle>The OAuth 2.0 Authorization Framework</citetitle></link>, with
    an additional <literal>tokeninfo</literal> endpoint useful to resource
    servers.</para>
   </listitem>

   <listitem>
    <para>An endpoint for <link linkend="rest-api-oauth2-token-admin-endpoint"
    >OAuth 2.0 token administration</link>. This is specific to OpenAM.</para>
   </listitem>

   <listitem>
    <para>An endpoint for <link linkend="rest-api-oauth2-client-admin-endpoint"
    >OAuth 2.0 client administration</link>. This is specific to OpenAM.</para>
   </listitem>
  </itemizedlist>

  <para>When accessing the APIs, browser-based REST clients can rely on OpenAM
  to handle the session as usual. First authenticate with OpenAM. Then perform
  the operations in the browser session.</para>

  <para>Clients not running in a browser can authenticate as described in
  <xref linkend="rest-api-auth" />, whereby OpenAM returns a
  <literal>token.id</literal> value. Clients pass the
  <literal>token.id</literal> value in a header named after the
  authentication cookie, by default <literal>iplanetDirectoryPro</literal>.</para>

  <section xml:id="rest-api-oauth2-client-endpoints">
   <title>OAuth 2.0 Client &amp; Resource Server Endpoints</title>

   <para>As described in the <citetitle>Administration Guide</citetitle> chapter
   on <link xlink:href="admin-guide#chap-oauth2"
   xlink:role="http://docbook.org/xlink/role/olink"><citetitle>Managing OAuth
   2.0 Authorization</citetitle></link>, OpenAM exposes REST endpoints for
   making calls to OpenAM acting as an authorization server.</para>

   <xinclude:include href="../shared/variablelist-oauth2-endpoints.xml" />

   <para>The <literal>/oauth2/authorize</literal>, and
   <literal>/oauth2/access_token</literal> endpoints function as described
   in RFC 6749.</para>

   <para>The <literal>/oauth2/authorize</literal> endpoint is protected by the
   policy created during OAuth 2.0 authorization server configuration, which
   grants all authenticated users access.</para>

   <para>The <literal>/oauth2/tokeninfo</literal> endpoint takes an HTTP GET
   on <literal>/oauth2/tokeninfo?access_token=<replaceable
   >token-id</replaceable></literal>, and returns information about the
   token.</para>

   <para>Resource servers &#8212; or any party having the token ID &#8212; can
   get token information through this endpoint without authenticating. This
   means any application or user can validate the token without having to be
   registered with OpenAM.</para>

   <para>The following example shows OpenAM issuing an access token, and
   then returning token information.</para>

   <screen>
$ <userinput>curl \
 --request POST \
 --user "myClientID:password" \
 --data "grant_type=password&amp;username=demo&amp;password=changeit&amp;scope=cn%20mail" \
 https://openam.example.com:8443/openam/oauth2/access_token</userinput>
<computeroutput>{
    "expires_in": 599,
    "token_type": "Bearer",
    "refresh_token": "f6dcf133-f00b-4943-a8d4-ee939fc1bf29",
    "access_token": "f9063e26-3a29-41ec-86de-1d0d68aa85e9"
}</computeroutput>

$ <userinput>curl https://openam.example.com:8443/openam/oauth2/tokeninfo\
?access_token=f9063e26-3a29-41ec-86de-1d0d68aa85e9</userinput>
<computeroutput>{
    "mail": "demo@example.com",
    "scope": [
        "mail",
        "cn"
    ],
    "cn": "demo",
    "realm": "/",
    "token_type": "Bearer",
    "expires_in": 577,
    "access_token": "f9063e26-3a29-41ec-86de-1d0d68aa85e9"
}</computeroutput>
   </screen>

   <para>The resource server making decisions about whether the token is valid
   can thus use the <literal>/oauth2/tokeninfo</literal> endpoint to retrieve
   expiration information about the token. Depending on the scopes
   implementation, the JSON response about the token can also contain scope
   information. As described in the <citetitle>Administration Guide</citetitle>,
   the default scopes implementation in OpenAM considers scopes to be names of
   attributes in the resource owner's user profile. Notice that the JSON
   response contains the values for those attributes from the user's profile,
   as in the preceding example, with scopes set to <literal>mail</literal> and
   <literal>cn</literal>.</para>

   <para>Both the <literal>/oauth2/authorize</literal> and
   <literal>/oauth2/access_token</literal> endpoints can take additional
   parameters. In particular you must specify the realm using the
   <literal>realm=<replaceable>realm-name</replaceable></literal> parameter if
   the OpenAM OAuth 2.0 provider is configured for a subrealm rather than /
   (Top-Level Realm). For example, if the OAuth 2.0 provider is configured
   for the <literal>/customers</literal> realm, then use
   <literal>/oauth2/authorize?realm=/customers</literal> and
   <literal>/oauth2/access_token?realm=/customers</literal>.</para>

   <para>The <literal>/oauth2/authorize</literal> endpoint can also take
   <literal>module</literal> and <literal>service</literal> parameters. Use
   either as described in <link xlink:href="admin-guide#authn-from-browser"
   xlink:role="http://docbook.org/xlink/role/olink"><citetitle>Authenticating
   To OpenAM</citetitle></link>, where <literal>module</literal> specifies the
   authentication module instance to use or <literal>service</literal>
   specifies the authentication chain to use when authenticating the resource
   owner.</para>
  </section>

  <section xml:id="rest-api-oauth2-token-admin-endpoint">
   <title>OAuth 2.0 Token Administration Endpoint</title>

   <para>The OpenAM-specific OAuth 2.0 token administration endpoint lets
   administrators read, list, and delete OAuth 2.0 tokens. OAuth 2.0 clients
   can also manage their own tokens.</para>

   <!--
       Fix for AME-2414 requires recompilation of XUI sources
       so the following is no longer possible with a binary release:

   <para>Resource owners can manage OAuth 2.0 tokens that they authorized by
   using the web-based OAuth 2 Token Manager. See the <citetitle>Administration
   Guide</citetitle> section on <link
   xlink:href="admin-guide#oauth2-manage-tokens"
   xlink:role="http://docbook.org/xlink/role/olink"
   ><citetitle>Managing OAuth 2.0 Tokens</citetitle></link> for details.</para>

   -->

   <para>OpenAM exposes the token administration endpoint at
   <literal>/frrest/oauth2/token</literal>, such as
   <literal>https://openam.example.com:8443/openam/frrest/oauth2/token</literal>.</para>

   <note>
    <para>This endpoint location is likely to change in the future.</para>
   </note>

   <para>To get a token, perform an HTTP GET on
   <literal>/frrest/oauth2/token/<replaceable>token-id</replaceable></literal>,
   as in the following example.</para>

   <screen>
$ <userinput>curl \
 --request POST \
 --user "myClientID:password" \
 --data "grant_type=password&amp;username=demo&amp;password=changeit&amp;scope=cn%20mail" \
 https://openam.example.com:8443/openam/oauth2/access_token</userinput>
<computeroutput>{
    "expires_in": 599,
    "token_type": "Bearer",
    "refresh_token": "f838e7d4-7e84-4743-af7c-9a9c42c2969e",
    "access_token": "9c6a48fc-44b1-4a0c-b4f0-672fba468b0f"
}</computeroutput>

$ <userinput>curl \
 --header "iplanetDirectoryPro: AQIC5wM2LY4Sfcxs...EwNDU2NjE0*" \
 https://openam.example.com:8443/openam/frrest/oauth2/token/9c6a48fc...fba468b0f</userinput>
<computeroutput>{
    "scope": [
        "mail",
        "cn"
    ],
    "type": [
        "access_token"
    ],
    "username": [
        "demo"
    ],
    "realm": [
        "/"
    ],
    "id": [
        "9c6a48fc-44b1-4a0c-b4f0-672fba468b0f"
    ],
    "parent": [
        "f838e7d4-7e84-4743-af7c-9a9c42c2969e"
    ],
    "expiry_time": [
        "1355741494888"
    ],
    "client_id": [
        "myClientID"
    ]
}</computeroutput>
   </screen>

   <para>To list tokens, perform an HTTP GET on
   <literal>/frrest/oauth2/token/?_query_id=<replaceable>conditions</replaceable></literal>,
   where <replaceable>conditions</replaceable> is a comma-separated list of
   <literal><replaceable>field</replaceable>=<replaceable>value</replaceable></literal>
   conditions. The <replaceable>field</replaceable>s are taken from the fields
   returned in the token object through this endpoint.</para>

   <variablelist>
    <varlistentry>
     <term><literal>"expiry_time"</literal></term>
     <listitem>
      <para>Token expiration time in milliseconds since 00:00:00 UTC, January 1,
      1970.</para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>"type"</literal></term>
     <listitem>
      <para>Either <literal>"access_token"</literal> or
      <literal>"refresh_token"</literal>.</para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>"username"</literal></term>
     <listitem>
      <para>OAuth 2.0 client to whom the token was issued.</para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>"realm"</literal></term>
     <listitem>
      <para>The realm for which the token was issued.</para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>"id"</literal></term>
     <listitem>
      <para>Unique ID of the token.</para>
     </listitem>
    </varlistentry>
   </variablelist>

   <para>The following example shows a search for current access tokens that
   were issued to <literal>myClientID</literal>.</para>

   <screen>
$ <userinput>curl \
 --header "iplanetDirectoryPro: AQIC5wM2LY4Sfcxs...EwNDU2NjE0*" \
 https://openam.example.com:8443/openam/frrest/oauth2/token/?_queryID\
=username%3DmyClientID%2Ctype%3Daccess_token</userinput>
<computeroutput>{
    "result": [
        {
            "scope": [
                "mail",
                "cn"
            ],
            "id": [
                "1b836369-4fcf-4fb2-b819-ee4b1314d4f1"
            ],
            "type": [
                "access_token"
            ],
            "username": [
                "myClientID"
            ],
            "realm": [
                "/"
            ],
            "expiry_time": [
                "1355741986154"
            ]
        },
        {
            "scope": [
                "mail",
                "cn"
            ],
            "type": [
                "access_token"
            ],
            "username": [
                "myClientID"
            ],
            "realm": [
                "/"
            ],
            "id": [
                "5f1763fc-37ae-4698-9e84-d301d49e1f7e"
            ],
            "expiry_time": [
                "1355741982091"
            ]
        }
    ],
    "pagedResultsCookie": null,
    "remainingPagedResults": -1
}</computeroutput>
   </screen>

   <para>To delete a token, perform an HTTP DELETE on
   <literal>/frrest/oauth2/token/<replaceable>token-id</replaceable></literal>,
   as in the following example.</para>

   <screen>
$ <userinput>curl \
 --request POST \
 --data "grant_type=client_credentials&amp;username=demo&amp;password=changeit\
&amp;client_id=myClientID&amp;client_secret=password&amp;scope=cn%20mail" \
 https://openam.example.com:8443/openam/oauth2/access_token</userinput>
<computeroutput>{
    "expires_in": 599,
    "token_type": "Bearer",
    "access_token": "867aaab2-61d7-4b78-9b80-4f9098034540"
}</computeroutput>

$ <userinput>curl \
 --request DELETE \
 --header "iplanetDirectoryPro: AQIC5wM2LY4Sfcxs...EwNDU2NjE0*" \
 https://openam.example.com:8443/openam/frrest/oauth2/token/867aaab2..098034540</userinput>
<computeroutput>{
    "success": "true"
}</computeroutput>
   </screen>
  </section>

  <section xml:id="rest-api-oauth2-client-admin-endpoint">
   <title>OAuth 2.0 Client Administration Endpoint</title>

   <para>The OAuth 2.0 administration endpoint lets OpenAM administrators and
   agent administrators create (that is, register) and delete OAuth 2.0
   clients.</para>

   <para>OpenAM exposes this endpoint at <literal>/frrest/oauth2/client</literal>,
   such as
   <literal>https://openam.example.com:8443/openam/frrest/oauth2/client</literal>.</para>

   <note>
    <para>This endpoint location is likely to change in the future.</para>
   </note>

   <para>To create an OAuth 2.0 client, perform an HTTP POST to
   <literal>/frrest/oauth2/client/?_action=create</literal>
   with a JSON object fully specifying the client, as in the following
   example.</para>

   <screen>
$ <userinput>curl \
 --request POST \
 --header "iplanetDirectoryPro: AQIC5wM...3MTYxOA..*" \
 --header "Content-Type: application/json" \
 --data \
 '{"client_id":["testClient"],
   "realm":["/"],
   "userpassword":["secret12"],
   "com.forgerock.openam.oauth2provider.clientType":["Confidential"],
   "com.forgerock.openam.oauth2provider.redirectionURIs":
     ["www.client.com","www.example.com"],
   "com.forgerock.openam.oauth2provider.scopes":["cn","sn"],
   "com.forgerock.openam.oauth2provider.defaultScopes":["cn"],
   "com.forgerock.openam.oauth2provider.name":["My Test Client"],
   "com.forgerock.openam.oauth2provider.description":["OAuth 2.0 Client"]
  }' \
 https://openam.example.com:8443/openam/frrest/oauth2/client/?_action=create</userinput>
<computeroutput>{"success":"true"}</computeroutput>
   </screen>

   <variablelist>
    <para>When creating an OAuth 2.0 client, use the following fields in your
    JSON object.</para>

    <varlistentry>
     <term><literal>"client_id"</literal></term>
     <listitem>
      <para>(Required) This field takes an array containing the client
      identifier as defined in RFC 6749.</para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>"realm"</literal></term>
     <listitem>
      <para>(Required) This field takes an array containing the OpenAM realm
      in which to create the client as defined in RFC 6749.</para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>"userpassword"</literal></term>
     <listitem>
      <para>(Required) This field takes an array containing the client
      secret as defined in RFC 6749.</para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>"com.forgerock.openam.oauth2provider.clientType"</literal></term>
     <listitem>
      <para>(Required) This field takes an array containing the client
      type, either <literal>"Confidential"</literal> or
      <literal>"Public"</literal> as defined in RFC 6749.</para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>"com.forgerock.openam.oauth2provider.redirectionURIs"</literal></term>
     <listitem>
      <para>(Optional for confidential clients) This field takes an array of
      client redirection endpoints as defined in RFC 6749.</para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>"com.forgerock.openam.oauth2provider.scopes"</literal></term>
     <listitem>
      <para>(Optional) This field takes an array of scopes as defined in RFC
      6749. The default scopes implementation takes scopes to be names of
      attributes in the resource owner profile.</para>
      <para>Specify localized scopes in <literal><replaceable
      >scope</replaceable>|<replaceable>locale</replaceable>|<replaceable
      >localized description</replaceable></literal> format.</para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>"com.forgerock.openam.oauth2provider.defaultScopes"</literal></term>
     <listitem>
      <para>(Optional) This field takes an array of default scopes set
      automatically when tokens are issued.</para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>"com.forgerock.openam.oauth2provider.name"</literal></term>
     <listitem>
      <para>(Optional) This field takes an array containing the client name to
      display to the resource owner when the resource owner must authorize
      client access to protected resources.</para>
      <para>Specify localized names in <literal><replaceable
      >locale</replaceable>|<replaceable>localized name</replaceable></literal>
      format.</para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>"com.forgerock.openam.oauth2provider.description"</literal></term>
     <listitem>
      <para>(Optional) This field takes an array containing the description to
      display to the resource owner when the resource owner must authorize
      client access to protected resources.</para>
      <para>Specify localized descriptions in <literal><replaceable
      >locale</replaceable>|<replaceable>localized description</replaceable></literal>
      format.</para>
     </listitem>
    </varlistentry>
   </variablelist>

   <para>To delete an OAuth 2.0 client, perform an HTTP DELETE on
   <literal>/frrest/oauth2/client/<replaceable>client-id</replaceable></literal>,
   as in the following example.</para>

   <screen>
$ <userinput>curl \
 --request DELETE \
 --header "iplanetDirectoryPro: AQIC5wM...3MTYxOA..*" \
 https://openam.example.com:8443/openam/frrest/oauth2/client/testClient</userinput>
<computeroutput>{"success":"true"}</computeroutput>
   </screen>
  </section>
 </section>

 <section xml:id="rest-api-openid-connect">
  <title>OpenID Connect 1.0</title>
  <indexterm>
   <primary>OpenID Connect 1.0</primary>
   <secondary>REST API</secondary>
  </indexterm>

  <para>OpenID Connect 1.0 extends OAuth 2.0 so the client can verify claims
  about the identity of the end user, get profile information about the end
  user, and log the user out at the end of the OpenAM session.</para>

  <itemizedlist>
   <para>OpenAM exposes the following REST endpoints for <link xlink:show="new"
   xlink:href="http://openid.net/connect/">OpenID Connect 1.0</link>
   purposes.</para>

   <listitem>
    <para>Endpoints for <link linkend="rest-api-openid-connect-discovery"
    >discovering information</link>.</para>
   </listitem>

   <listitem>
    <para>An endpoint for <link linkend="rest-api-openid-connect-dynamic-registration"
    >registering client applications</link>.</para>
   </listitem>

   <listitem>
    <para>Endpoints for <link linkend="rest-api-openid-connect-authorization"
    >client authorization</link>.</para>
   </listitem>

   <listitem>
    <para>Endpoints for <link linkend="rest-api-openid-connect-session"
    >session management</link>.</para>
   </listitem>
  </itemizedlist>

  <section xml:id="rest-api-openid-connect-discovery">
   <title>Discovering OpenID Connect 1.0 Configuration</title>

   <para>OpenAM exposes endpoints for discovering information about the provider
   configuration, and about the provider for a given end user.</para>

   <itemizedlist>
    <listitem>
     <para><literal>/.well-known/openid-configuration</literal> allows clients
     to retrieve OpenID Provider configuration by HTTP GET as specified by
     OpenID Connect Discovery 1.0.</para>
    </listitem>

    <listitem>
     <para><literal>/.well-known/webfinger</literal> allows clients to retrieve
     the provider URL for an end user by HTTP GET as specified by OpenID Connect
     Discovery 1.0.</para>
    </listitem>
   </itemizedlist>

   <para>For examples, see <link xlink:show="new"
   xlink:href="admin-guide#configure-openid-connect-discovery"
   xlink:role="http://docbook.org/xlink/role/olink"><citetitle>Configuring
   OpenAM For OpenID Connect Discovery</citetitle></link>.</para>
  </section>

  <section xml:id="rest-api-openid-connect-dynamic-registration">
   <title>Registering OpenID Connect 1.0 Clients</title>

   <para>OpenAM allows both static and dynamic registration of OpenID Connect
   client applications. For dynamic registration according to the OpenID Connect
   Dynamic Client Registration 1.0 specification, the endpoint is
   <literal>/oauth2/connect/register</literal>. See <link xlink:show="new"
   xlink:href="admin-guide#register-openid-connect-client-dynamic"
   xlink:role="http://docbook.org/xlink/role/olink"><citetitle>To Register a
   Client Dynamically</citetitle></link> for details.</para>
  </section>

  <section xml:id="rest-api-openid-connect-authorization">
   <title>Performing OpenID Connect 1.0 Client Authorization</title>

   <para>Registered clients can request authorization through OpenAM.</para>

   <para>OpenID Connect 1.0 supports both a Basic Client Profile using the
   OAuth 2.0 authorization code grant, and an Implicit Client Profile using the
   OAuth 2.0 implicit grant. These client profiles rely on the OAuth 2.0
   endpoints for authorization. Those endpoints are described in
   <xref linkend="rest-api-oauth2-client-endpoints" />.</para>

   <para>In addition, authorized clients can access end user information through
   the OpenID Connect 1.0 specific endpoint
   <literal>/oauth2/userinfo</literal>.</para>

   <para>For examples, see <link xlink:show="new"
   xlink:href="admin-guide#openid-connect-examples"
   xlink:role="http://docbook.org/xlink/role/olink"><citetitle>Client
   Examples</citetitle></link>.</para>
  </section>

  <section xml:id="rest-api-openid-connect-session">
   <title>Managing OpenID Connect 1.0 Sessions</title>

   <para>Registered clients can use OpenID Connect Session Management 1.0 to
   handle end user logout actions.</para>

   <itemizedlist>
    <listitem>
     <para><literal>/oauth2/connect/checkSession</literal> allows clients
     to retrieve session status notifications.</para>
    </listitem>

    <listitem>
     <para><literal>/oauth2/connect/endSession</literal> allows clients to
     terminate end user sessions.</para>
    </listitem>
   </itemizedlist>

   <para>For an example, see <link xlink:show="new"
   xlink:href="admin-guide#manage-sessions-openid-connect"
   xlink:role="http://docbook.org/xlink/role/olink"><citetitle>Managing User
   Sessions</citetitle></link>.</para>
  </section>
 </section>

 <section xml:id="rest-api-self-registration">
  <title>User Self-Registration</title>
  <indexterm><primary>Self-registration</primary></indexterm>

  <para>
   The OpenAM REST API for users provides an action for self-registration.
   This is an alternative to the Membership module described in
   the <citetitle>Administration Guide</citetitle> section,
   <link xlink:show="new" xlink:href="admin-guide#membership-module-conf-hints"
   xlink:role="http://docbook.org/xlink/role/olink"><citetitle>Hints For
   the Membership Authentication Module</citetitle></link>.
  </para>

  <para>The feature works by sending an email to the user in response to RESTful
  HTTP POST requesting registration with an email address. When the user clicks
  the link received by mail, an application intercepts the HTTP GET,
  transforms the query string values into an HTTP POST to confirm the operation.
  OpenAM responds to the application with a JSON object that the application
  can further use to request creation of the user account to complete the
  transaction.</para>

  <orderedlist>
   <para>An example follows, showing the steps in more detail.</para>

   <listitem>
    <para>Configure the Email Service and REST Security.</para>

    <para>In particular, you must configure the Email Service to send mail
    to users who self-register, and you must enable self-registration in the
    REST Security service.</para>

    <para>You can configure these globally in OpenAM Console at Configuration >
    Global > Email Service for notifications and Configuration > Global >
    REST Security to allow self-registration.</para>

    <para>Alternatively, you can configure them for an individual realm under
    Access Control > <replaceable>Realm Name</replaceable> > Services.</para>

    <para>
     At this point users can self-register.
     The starting screen for self-registration is
     at <literal>/XUI/#register/</literal>
     under the base URL where OpenAM is installed.
     The default confirmation URI is <literal>/XUI/confirm.html</literal>.
    </para>

    <para>
     The steps that follow show how to use the REST API directly.
    </para>

   </listitem>

   <listitem>
    <para>Perform an HTTP POST on <literal>/json/users?_action=register</literal>
    with the new user's mail.</para>

    <para>
     To use a subject and message other than those configured in the Email Service,
     you can optionally set the mail subject and message content
     by including "subject" and "message" strings in the JSON data.

     For example, the following POST results in a mail with
     subject <literal>Confirm registration with OpenAM</literal>
     and content <literal>Follow this link to confirm your registration</literal>
     in addition to the confirmation link.
    </para>

    <para>
     Notice that authentication is not required.
    </para>

    <screen>
$ <userinput>curl \
 --request POST \
 --header "Content-Type: application/json" \
 --data \
 '{
   "email": "newuser@example.com",
   "subject": "Confirm registration with OpenAM",
   "message": "Follow this link to confirm your registration"
 }' \
 https://openam.example.com:8443/openam/json/users/?_action=register</userinput>
<computeroutput>{}</computeroutput>
    </screen>

    <para>On success, the response is an empty JSON object <literal>{}</literal>
    as shown in the example.</para>
   </listitem>

   <listitem>
    <para>
     The user receives an email message that includes a URL
     similar to the following example, but all on one line.
    </para>

    <literallayout class="monospaced"
    >https://openam.example.com:8443/openam/json/confirmation/register?
     confirmationId=P23PK5kyAgNdqeNJpAvq1ebcpcg=
     &amp;email=newuser@example.com
     &amp;tokenId=+8rWf5O8KG0rfz3Pa+WwDLkH9Ac=</literallayout>
   </listitem>

   <listitem>
    <para>Intercept the HTTP GET request to this URL when the user clicks the
    link.</para>

    <para>Your application must use the confirmation link to construct an HTTP
    POST to <literal>/json/users?_action=confirm</literal> from the query string
    parameters as shown in the following example.</para>

    <screen>
$ <userinput>curl \
 --request POST \
 --header "Content-Type: application/json" \
 --data \
 '{
   "email":"newuser@example.com",
   "tokenId":"+8rWf5O8KG0rfz3Pa+WwDLkH9Ac=",
   "confirmationId":"P23PK5kyAgNdqeNJpAvq1ebcpcg="
 }' \
 https://openam.example.com:8443/openam/json/users?_action=confirm</userinput>
<computeroutput>{
    "email": "newuser@example.com",
    "tokenId": "+8rWf5O8KG0rfz3Pa+WwDLkH9Ac=",
    "confirmationId": "P23PK5kyAgNdqeNJpAvq1ebcpcg="
}</computeroutput>
    </screen>

    <para>The response is a further confirmation that the account can be
    created.</para>
   </listitem>

   <listitem>
    <para>Using the confirmation, your application must make an authenticated
    HTTP POST to <literal>/json/users?_action=anonymousCreate</literal> to
    create the user as shown in the following example.</para>

    <screen>
$ <userinput>curl \
 --request POST \
 --header "Content-Type: application/json" \
 --data \
 '{
   "email":"newuser@example.com",
   "tokenId":"+8rWf5O8KG0rfz3Pa+WwDLkH9Ac=",
   "confirmationId":"P23PK5kyAgNdqeNJpAvq1ebcpcg=",
   "username":"newuser",
   "userpassword":"password"
 }' \
 https://openam.example.com:8443/openam/json/users?_action=anonymousCreate</userinput>
<computeroutput>{
    "username": "newuser",
    "realm": "/",
    "uid": [
        "newuser"
    ],
    "mail": [
        "newuser@example.com"
    ],
    "sn": [
        "newuser"
    ],
    "userPassword": [
        "{SSHA}dAiONYMxqFiNilXeLXUQoDpHlePYtiJcjYw8Dw=="
    ],
    "cn": [
        "newuser"
    ],
    "inetUserStatus": [
        "Active"
    ],
    "dn": [
        "uid=newuser,ou=people,dc=openam,dc=forgerock,dc=org"
    ],
    "objectClass": [
        "devicePrintProfilesContainer",
        "person",
        "sunIdentityServerLibertyPPService",
        "inetorgperson",
        "sunFederationManagerDataStore",
        "iPlanetPreferences",
        "iplanet-am-auth-configuration-service",
        "organizationalperson",
        "sunFMSAML2NameIdentifier",
        "inetuser",
        "forgerock-am-dashboard-service",
        "iplanet-am-managed-person",
        "iplanet-am-user-service",
        "sunAMAuthAccountLockout",
        "top"
    ],
    "universalid": [
        "id=newuser,ou=user,dc=openam,dc=forgerock,dc=org"
    ]
}</computeroutput>
    </screen>
   </listitem>
  </orderedlist>

  <para>At this point the user is registered, active, and can authenticate
  with OpenAM.</para>
 </section>

 <section xml:id="rest-api-password-reset">
  <title>Resetting Forgotten Passwords</title>
  <indexterm>
   <primary>Passwords</primary>
   <secondary>Reset</secondary>
  </indexterm>

  <para>
   The OpenAM REST API for users provides an action
   for handling forgotten passwords
   as long as the user has a valid email address in their profile.
   This is an alternative to the password reset capability described in
   the <citetitle>Administration Guide</citetitle> chapter,
   <link xlink:show="new" xlink:href="admin-guide#chap-pwd-reset"
   xlink:role="http://docbook.org/xlink/role/olink"><citetitle
   >Configuring Password Reset</citetitle></link>.
  </para>

  <para>
   If you know the current password, you can change it as described in
   <xref linkend="rest-api-change-password" />.
  </para>

  <para>The option is disabled by default. You can enable it in the OpenAM Console
  globally via Configuration > Global > REST Security.</para>

  <para>Alternatively, you can enable it for an individual realm under
  Access Control > <replaceable>Realm Name</replaceable> > Services > Add >
  REST Security.</para>

  <orderedlist>
   <para>An example follows, showing the steps in more detail.</para>

   <listitem>
    <para>Configure the Email Service.</para>

    <para>In particular, you must configure the Email Service to send mail
    allowing the user to reset the forgotten password.</para>

    <para>You can configure the service globally in the OpenAM Console via
    Configuration > Global > Email Service.</para>

    <para>Alternatively, you can configure it for an individual realm under
    Access Control > <replaceable>Realm Name</replaceable> > Services.</para>

    <para>
     At this point users with mail addresses can reset their forgotten passwords.
     The starting screen for forgotten password reset is
     at <literal>/XUI/#forgotPassword/</literal>
     under the base URL where OpenAM is installed.
     The default confirmation URI is <literal>/XUI/confirm.html</literal>.
    </para>

    <para>
     The steps that follow show how to use the REST API directly.
    </para>

   </listitem>

   <listitem>
    <para>
     Perform an HTTP POST on <literal>/json/users?_action=forgotPassword</literal>
     with the user's ID.
    </para>

    <para>
     To use a subject and message other than those configured in the Email Service,
     you can optionally set the mail subject and message content
     by including "subject" and "message" strings in the JSON data.

     For example, the following POST results in a mail with
     subject <literal>Reset your forgotten password with OpenAM</literal>
     and content <literal>Follow this link to reset your password</literal>
     in addition to the confirmation link.
    </para>

    <para>
     Notice that authentication is not required.
    </para>

    <screen>
$ <userinput>curl \
 --request POST \
 --header "Content-Type: application/json" \
 --data '{
   "username": "demo",
   "subject": "Reset your forgotten password with OpenAM",
   "message": "Follow this link to reset your password"
 }' \
 https://openam.example.com:8443/openam/json/users/?_action=forgotPassword</userinput>
<computeroutput>{}</computeroutput>
    </screen>

    <para>On success, the response is an empty JSON object <literal>{}</literal>
    as shown in the example.</para>
   </listitem>

   <listitem>
    <para>OpenAM looks up the email address in the user profile, and sends an
    email message that includes a URL as in the following example,
    but all on one line.</para>

    <literallayout class="monospaced"
    >https://openam.example.com:8443/openam/json/confirmation/forgotPassword
     ?confirmationId=jrUZ3E7CK4UQJM5jnDHGNKH1UaQ=
     &amp;tokenId=M8cVqWqbKtCtpd/UqEAr0x25fxA=
     &amp;username=demo</literallayout>
   </listitem>

   <listitem>
    <para>Intercept the HTTP GET request to this URL when the user clicks the
    link.</para>

    <para>Your application must use the confirmation link to construct an HTTP
    POST to <literal>/json/users?_action=forgotPasswordReset</literal> from the
    query string parameters as shown in the following example.</para>

    <para>Your POST includes the new password as the value of the "userpassword"
    field in the JSON payload.</para>

    <screen>
$ <userinput>curl \
 --request POST \
 --header "Content-Type: application/json" \
 --data '{
 "username":"demo",
 "userpassword":"password",
 "tokenId":"M8cVqWqbKtCtpd/UqEAr0x25fxA=",
 "confirmationId":"jrUZ3E7CK4UQJM5jnDHGNKH1UaQ="
 }' \
 https://openam.example.com:8443/openam/json/users?_action=forgotPasswordReset</userinput>
<computeroutput>{
    "name": "demo",
    "realm": "/",
    "uid": [
        "demo"
    ],
    "mail": [
        "demo@example.com"
    ],
    "sn": [
        "demo"
    ],
    "userPassword": [
        "{SSHA}zgeBu4yOAy1i9QAgnldMCzW8LWX36ViVj9leig=="
    ],
    "cn": [
        "demo"
    ],
    "inetUserStatus": [
        "Active"
    ],
    "objectClass": [
        "devicePrintProfilesContainer",
        "person",
        "sunIdentityServerLibertyPPService",
        "inetorgperson",
        "sunFederationManagerDataStore",
        "iPlanetPreferences",
        "iplanet-am-auth-configuration-service",
        "organizationalperson",
        "sunFMSAML2NameIdentifier",
        "inetuser",
        "forgerock-am-dashboard-service",
        "iplanet-am-managed-person",
        "iplanet-am-user-service",
        "sunAMAuthAccountLockout",
        "top"
    ],
    "universalid": [
        "id=demo,ou=user,dc=openam,dc=forgerock,dc=org"
    ]
}</computeroutput>
    </screen>

    <para>On success, the response is the JSON representation of the user
    profile with the new password hashed according to the password storage
    scheme for the identity repository.</para>
   </listitem>
  </orderedlist>

  <para>At this point the user can authenticate with the new password.</para>
 </section>

 <section xml:id="rest-api-logging">
  <title>Logging</title>

  <!-- Pending replacement
  <para>Interface Stability: <link xlink:show="new"
  xlink:href="admin-guide#interface-stability"
  xlink:role="http://docbook.org/xlink/role/olink">Deprecated</link></para>-->

  <para>You can send OpenAM messages to log, specifying the message content
  and the log file in which to write your message.</para>
  
  <screen>
$ <userinput>curl "https://openam.example.com:8443/openam/identity/log?\
appid=AQIC5wM2LY4SfcwyCZkk-1JXzx6q1EzgagabHfBjMidb5jI.*AAJTSQACMDE.*\
&amp;subjectid=AQIC5wM2LY4SfcxuxIP0VnP2lVjs7ypEM6VDx6srk56CN1Q.*AAJTSQACMDE.*\
&amp;logname=rest.access\
&amp;message=Hello%20World"</userinput>
  </screen>
  
  <para>Logging takes a valid <literal>appid</literal> token for the subject
  with access to log the message, and also a <literal>subjectid</literal> token
  for the user whom the message concerns. If the tokens are valid and the
  access rights correct, your message ends up in the log specified.</para>
  
  <screen>
$ <userinput>cat openam/openam/log/rest.access</userinput>
<computeroutput>#Version: 1.0
#Fields: time   Data    LoginID ContextID   IPAddr  LogLevel    Domain 
 LoggedBy    MessageID   ModuleName  NameID  HostName    
"2011-09-14 16:38:17"   /home/user/openam/openam/log/
   "cn=dsameuser,ou=DSAME Users,o=openam"  aa307b2dcb721d4201
   "Not Available" INFO    o=openam    "cn=dsameuser,ou=DSAME Users,o=openam"
   LOG-1   rest.access "Not Available"192.168.56.2 
"2011-09-14 16:38:17"   "Hello World"   id=bjensen,ou=user,o=openam
   8a4025a2b3af291d01  "Not Available" INFO    o=openam
   id=amadmin,ou=user,o=openam "Not Available" rest.access "Not Available"
   192.168.56.2</computeroutput>
  </screen>
 </section>
 
 <section xml:id="rest-api-crud-identity">
  <title>Identity Management</title>
  <indexterm>
   <primary>User data</primary>
   <secondary>REST access</secondary>
  </indexterm>
  <para>This section shows how to create, read, update, delete, and list
  identities using the RESTful APIs.</para>

  <important>
   <para>OpenAM is not primarily an identity data store, nor is it provisioning
   software. For storing identity data, consider <link xlink:show="new"
   xlink:href="http://forgerock.com/what-we-offer/open-identity-stack/opendj/">OpenDJ</link>.
   For provisioning, consider <link xlink:show="new"
   xlink:href="http://forgerock.com/what-we-offer/open-identity-stack/openidm/">OpenIDM</link>.
   Both of these products provide REST APIs as well.</para>
  </important>

  <itemizedlist>
   <para>OpenAM has two REST APIs for managing identities.</para>

   <listitem>
    <para>Under the <literal>/json/agents</literal>,
    <literal>/json/groups</literal>, and <literal>/json/users</literal>,
    you find the newer JSON-based APIs. The newer APIs follow the ForgeRock
    common REST pattern creating, reading, updating, deleting, and querying
    resources.</para>

    <para>Examples in this section do not repeat the authentication shown
    in <xref linkend="rest-api-auth" />. For browser-based clients, you
    can rely on OpenAM cookies rather than construct the header in your
    application. Managing agent profiles, groups, realms, and users with
    these APIs of course require authorization. The examples shown in this
    section were performed with the token ID gained after authenticating
    as OpenAM administrator.</para>

    <para>Although the examples here show user management, you can use
    <literal>/json/agents</literal>, <literal>/json/groups</literal>,
    <literal>/json/realms</literal> in similar fashion. See
    <xref linkend="rest-api-crud-realm" /> for examples related to realms.</para>

    <itemizedlist>
     <para>The following sections cover this JSON-based API.</para>
     <listitem><para><xref linkend="rest-api-create-identity" /></para></listitem>
     <listitem><para><xref linkend="rest-api-read-identity" /></para></listitem>
     <listitem><para><xref linkend="rest-api-update-identity" /></para></listitem>
     <listitem><para><xref linkend="rest-api-delete-identity" /></para></listitem>
     <listitem><para><xref linkend="rest-api-query-identity" /></para></listitem>
     <listitem><para><xref linkend="rest-api-change-password" /></para></listitem>
    </itemizedlist>
   </listitem>

   <listitem>
    <para>Under the <literal>/identity</literal> endpoint, you find the
    backwards-compatible, legacy API.</para>

    <itemizedlist>
     <para>The following sections cover this backwards-compatible API.</para>
     <listitem><para><xref linkend="rest-api-create-legacy" /></para></listitem>
     <listitem><para><xref linkend="rest-api-read-legacy" /></para></listitem>
     <listitem><para><xref linkend="rest-api-update-legacy" /></para></listitem>
     <listitem><para><xref linkend="rest-api-delete-legacy" /></para></listitem>
    </itemizedlist>
   </listitem>
  </itemizedlist>

  <section xml:id="rest-api-create-identity">
   <title>Creating Identities</title>

   <para>OpenAM lets administrators create a user profile by making 
   an HTTP POST of the JSON representation of the profile to
   <literal>/json/<replaceable>subrealm</replaceable>/users/?_action=create</literal>.
   To add a user to the Top Level Realm, you do not need to specify the realm.</para>

   <para>The following example shows an administrator creating a new user. The
   only required fields are <literal>username</literal> and
   <literal>userpassword</literal>. If no other name is provided, the entry
   you make for <literal>username</literal> defaults to both the user id and the
   user's last name.</para>

   <screen>
$ <userinput>curl \
 --request POST \
 --header "iplanetDirectoryPro: AQIC5w...2NzEz*" \
 --header "Content-Type: application/json" \
 --data \
 '{
   "username": "bjensen",
   "userpassword": "secret12",
   "mail": "bjensen@example.com"
 }' \
 https://openam.example.com:8443/openam/json/users/?_action=create</userinput>
<computeroutput>{
    "username": "bjensen",
    "realm": "/",
    "uid": [
        "bjensen"
    ],
    "mail": [
        "bjensen@example.com"
    ],
    "sn": [
        "bjensen"
    ],
    "userpassword": [
        "{SSHA}0pXpKLPRKCGY7g3YqZygJmKMW6IC2BLJimmlwg=="
    ],
    "cn": [
        "bjensen"
    ],
    "inetuserstatus": [
        "Active"
    ],
    "dn": [
        "uid=bjensen,ou=people,dc=openam,dc=forgerock,dc=org"
    ],
    "objectclass": [
        "person",
        "sunIdentityServerLibertyPPService",
        "sunFederationManagerDataStore",
        "inetorgperson",
        "iPlanetPreferences",
        "iplanet-am-auth-configuration-service",
        "organizationalperson",
        "sunFMSAML2NameIdentifier",
        "inetuser",
        "iplanet-am-managed-person",
        "sunAMAuthAccountLockout",
        "iplanet-am-user-service",
        "top"
    ],
    "universalid": [
        "id=bjensen,ou=user,dc=openam,dc=forgerock,dc=org"
    ]
}</computeroutput>
   </screen>

    <para>Alternatively, administrators can create user profiles with specific
    user IDs by doing an HTTP PUT of the JSON representation of the changes to
    <literal>/json/users/<replaceable>user-id</replaceable></literal>, as
    shown in the following example.</para>

    <screen>
$ <userinput>curl \
 --request PUT \
 --header "iplanetDirectoryPro: AQIC5w...2NzEz*" \
 --header "Content-Type: application/json" \
 --header "If-None-Match: *" \
 --data \
 '{
   "username": "janedoe",
   "userpassword": "secret12",
   "mail": "janedoe@example.com"
 }' \
 https://openam.example.com:8443/openam/json/users/janedoe</userinput>
<computeroutput>{
    "username": "janedoe",
    "realm": "/",
    "uid": [
        "janedoe"
    ],
    "mail": [
        "janedoe@example.com"
    ],
    "sn": [
        "janedoe"
    ],
    "userpassword": [
        "{SSHA}e4DJoxvYVW/nsp62XJf29ZADE16YQgrxK+XuKA=="
    ],
    "cn": [
        "janedoe"
    ],
    "inetuserstatus": [
        "Active"
    ],
    "dn": [
        "uid=janedoe,ou=people,dc=openam,dc=forgerock,dc=org"
    ],
    "objectclass": [
        "devicePrintProfilesContainer",
        "person",
        "sunIdentityServerLibertyPPService",
        "inetorgperson",
        "sunFederationManagerDataStore",
        "iPlanetPreferences",
        "iplanet-am-auth-configuration-service",
        "organizationalperson",
        "sunFMSAML2NameIdentifier",
        "inetuser",
        "forgerock-am-dashboard-service",
        "iplanet-am-managed-person",
        "iplanet-am-user-service",
        "sunAMAuthAccountLockout",
        "top"
    ],
    "universalid": [
        "id=janedoe,ou=user,dc=openam,dc=forgerock,dc=org"
    ]
}</computeroutput>
    </screen>

   <para>As shown in the examples, OpenAM returns the JSON representation of
   the profile on successful creation. On failure, OpenAM returns a JSON
   representation of the error including the
   <link xlink:href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html"
   xlink:show="new">HTTP status code</link>.</para>

   <para>The same HTTP POST and PUT mechanisms also work for other objects
   such as policy agent profiles and groups.</para>

   <screen width="82">
$ <userinput>curl \
 --request POST \
 --header "iPlanetDirectoryPro: AQIC5w...2NzEz*" \
 --header "Content-Type: application/json" \
 --data \
 '{
   "name":"myWebAgent","realm":"/",
   "com.sun.identity.agents.config.fqdn.default":["www.example.com"],
   "sunidentityserverdevicekeyvalue":
     ["agentRootURL=http://www.example.com:80/"],
   "com.sun.identity.agents.config.remote.logfile":
     ["amAgent_www_example_com_80.log"],
   "com.sun.identity.agents.config.repository.location":["centralized"],
   "agenttype":["WebAgent"],
    "com.sun.identity.agents.config.cdsso.cdcservlet.url":
     ["[0]=https://openam.example.com:8443/openam/cdcservlet"],
   "com.sun.identity.client.notification.url":
     ["http://www.example.com:80/UpdateAgentCacheServlet?shortcircuit=false"],
   "com.sun.identity.agents.config.agenturi.prefix":
     ["http://www.example.com:80/amagent"],
   "userpassword":["password"],
   "com.sun.identity.agents.config.login.url":
     ["[0]=https://openam.example.com:8443/openam/UI/Login"],
   "com.sun.identity.agents.config.logout.url":
     ["[0]=https://openam.example.com:8443/openam/UI/Logout"],
   "sunidentityserverdevicestatus":["Active"]
 }' \
 https://openam.example.com:8443/openam/json/agents/?_action=create</userinput>
<computeroutput>{
    "name": "myWebAgent",
    "realm": "/",
    "com.sun.identity.agents.config.cdsso.enable": [
        "false"
    ],
    "com.sun.identity.agents.config.cdsso.cookie.domain": [
        "[0]="
    ],
    "com.sun.identity.agents.config.get.client.host.name": [
        "false"
    ],
    "com.sun.identity.agents.config.profile.attribute.fetch.mode": [
        "NONE"
    ],
    "com.sun.identity.agents.config.notenforced.ip": [
        "[0]="
    ],
    "com.sun.identity.agents.config.fqdn.check.enable": [
        "true"
    ],
    "com.sun.identity.agents.config.cleanup.interval": [
        "30"
    ],
    "com.sun.identity.agents.config.notenforced.url.attributes.enable": [
        "false"
    ],
    "com.sun.identity.agents.config.ignore.preferred.naming.url": [
        "true"
    ],
    "com.sun.identity.agents.config.client.ip.header": [],
    "com.sun.identity.agents.config.session.attribute.mapping": [
        "[]="
    ],
    "com.sun.identity.agents.config.audit.accesstype": [
        "LOG_NONE"
    ],
    "com.sun.identity.agents.config.proxy.override.host.port": [
        "false"
    ],
    "com.sun.identity.agents.config.load.balancer.enable": [
        "false"
    ],
    "com.sun.identity.agents.config.encode.url.special.chars.enable": [
        "false"
    ],
    "com.sun.identity.agents.config.convert.mbyte.enable": [
        "false"
    ],
    "com.sun.identity.agents.config.domino.check.name.database": [
        "false"
    ],
    "com.sun.identity.agents.config.iis.owa.enable": [
        "false"
    ],
    "com.sun.identity.agents.config.override.port": [
        "false"
    ],
    "com.sun.identity.agents.config.policy.clock.skew": [
        "0"
    ],
    "com.sun.identity.agents.config.sso.only": [
        "false"
    ],
    "com.sun.identity.agents.config.iis.owa.enable.session.timeout.url": [],
    "com.sun.identity.agents.config.domino.ltpa.config.name": [
        "LtpaToken"
    ],
    "com.sun.identity.agents.config.cookie.reset": [
        "[0]="
    ],
    "com.sun.identity.agents.config.fqdn.default": [
        "www.example.com"
    ],
    "sunIdentityServerDeviceKeyValue": [
        "agentRootURL=http://www.example.com:80/"
    ],
    "com.sun.identity.agents.config.domino.ltpa.cookie.name": [
        "LtpaToken"
    ],
    "com.sun.identity.agents.config.iis.password.header": [
        "false"
    ],
    "com.sun.identity.agents.config.response.attribute.mapping": [
        "[]="
    ],
    "com.sun.identity.agents.config.userid.param.type": [
        "session"
    ],
    "com.sun.identity.agents.config.url.comparison.case.ignore": [
        "true"
    ],
    "com.sun.identity.agents.config.profile.attribute.cookie.maxage": [
        "300"
    ],
    "com.sun.identity.agents.config.remote.logfile": [
        "amAgent_www_example_com_80.log"
    ],
    "com.sun.identity.agents.config.domino.ltpa.enable": [
        "false"
    ],
    "com.sun.identity.agents.config.notenforced.url": [
        "[0]="
    ],
    "com.sun.identity.agents.config.notification.enable": [
        "true"
    ],
    "com.sun.identity.agents.config.profile.attribute.cookie.prefix": [
        "HTTP_"
    ],
    "com.sun.identity.agents.config.logout.cookie.reset": [
        "[0]="
    ],
    "com.sun.identity.agents.config.polling.interval": [
        "60"
    ],
    "com.sun.identity.agents.config.attribute.multi.value.separator": [
        "|"
    ],
    "com.sun.identity.agents.config.debug.file.rotate": [
        "true"
    ],
    "com.sun.identity.agents.config.debug.level": [
        "Error"
    ],
    "com.sun.identity.agents.config.local.log.rotate": [
        "false"
    ],
    "com.sun.identity.agents.config.repository.location": [
        "centralized"
    ],
    "com.sun.identity.agents.config.client.ip.validation.enable": [
        "false"
    ],
    "com.sun.identity.agents.config.override.protocol": [
        "false"
    ],
    "AgentType": [
        "WebAgent"
    ],
    "com.sun.identity.agents.config.logout.redirect.url": [],
    "com.sun.identity.agents.config.ignore.path.info": [
        "false"
    ],
    "com.sun.identity.agents.config.override.notification.url": [
        "false"
    ],
    "com.sun.identity.agents.config.session.attribute.fetch.mode": [
        "NONE"
    ],
    "com.sun.identity.agents.config.policy.cache.polling.interval": [
        "3"
    ],
    "com.sun.identity.agents.config.cdsso.cdcservlet.url": [
        "[0]=https://openam.example.com:8443/openam/cdcservlet"
    ],
    "com.sun.identity.agents.config.cookie.name": [
        "iPlanetDirectoryPro"
    ],
    "com.sun.identity.agents.config.profile.attribute.mapping": [
        "[]="
    ],
    "com.sun.identity.agents.config.iis.filter.priority": [
        "HIGH"
    ],
    "com.sun.identity.agents.config.iis.auth.type": [],
    "com.sun.identity.client.notification.url": [
        "http://www.example.com:80/UpdateAgentCacheServlet?shortcircuit=false"
    ],
    "com.sun.identity.agents.config.cookie.secure": [
        "false"
    ],
    "com.sun.identity.agents.config.ignore.path.info.for.not.enforced.list": [
        "true"
    ],
    "com.sun.identity.agents.config.remote.log.interval": [
        "5"
    ],
    "com.sun.identity.agents.config.notenforced.url.invert": [
        "false"
    ],
    "universalid": [
        "id=myWebAgent,ou=agent,dc=openam,dc=forgerock,dc=org"
    ],
    "com.sun.identity.agents.config.replaypasswd.key": [],
    "com.sun.identity.agents.config.iis.owa.enable.change.protocol": [
        "false"
    ],
    "com.sun.identity.agents.config.userid.param": [
        "UserToken"
    ],
    "userpassword": [
        "{SHA-1}W6ph5Mm5Pz8GgiULbPgzG37mj9g="
    ],
    "com.sun.identity.agents.config.response.attribute.fetch.mode": [
        "NONE"
    ],
    "com.sun.identity.agents.config.freeformproperties": [
        "sunidentityserverdevicestatus=Active",
        "sunidentityserverdevicekeyvalue=agentRootURL=http://www.example.com:80/",
        "realm=/",
        "name=myWebAgent"
    ],
    "com.sun.identity.agents.config.postdata.preserve.enable": [
        "false"
    ],
    "com.sun.identity.agents.config.log.disposition": [
        "REMOTE"
    ],
    "com.sun.identity.agents.config.agenturi.prefix": [
        "http://www.example.com:80/amagent"
    ],
    "com.sun.identity.agents.config.override.host": [
        "false"
    ],
    "com.sun.identity.agents.config.cookie.reset.enable": [
        "false"
    ],
    "com.sun.identity.agents.config.local.log.size": [
        "52428800"
    ],
    "com.sun.identity.agents.config.access.denied.url": [],
    "com.sun.identity.agents.config.debug.file.size": [
        "10000000"
    ],
    "com.sun.identity.agents.config.change.notification.enable": [
        "true"
    ],
    "com.sun.identity.agents.config.anonymous.user.enable": [
        "false"
    ],
    "com.sun.identity.agents.config.domino.ltpa.org.name": [],
    "com.sun.identity.agents.config.agent.logout.url": [
        "[0]="
    ],
    "com.sun.identity.agents.config.poll.primary.server": [
        "5"
    ],
    "com.sun.identity.agents.config.fqdn.mapping": [
        "[]="
    ],
    "com.sun.identity.agents.config.auth.connection.timeout": [
        "2"
    ],
    "com.sun.identity.agents.config.client.hostname.header": [],
    "com.sun.identity.agents.config.iis.logonuser": [
        "false"
    ],
    "com.sun.identity.agents.config.ignore.server.check": [
        "false"
    ],
    "com.sun.identity.agents.config.fetch.from.root.resource": [
        "false"
    ],
    "com.sun.identity.agents.config.login.url": [
        "[0]=https://openam.example.com:8443/openam/UI/Login"
    ],
    "com.sun.identity.agents.config.redirect.param": [
        "goto"
    ],
    "com.sun.identity.agents.config.logout.url": [
        "[0]=https://openam.example.com:8443/openam/UI/Logout"
    ],
    "sunIdentityServerDeviceStatus": [
        "Active"
    ],
    "com.sun.identity.agents.config.sso.cache.polling.interval": [
        "3"
    ],
    "com.sun.identity.agents.config.anonymous.user.id": [
        "anonymous"
    ],
    "com.sun.identity.agents.config.encode.cookie.special.chars.enable": [
        "false"
    ],
    "com.sun.identity.agents.config.locale": [
        "en_US"
    ],
    "com.sun.identity.agents.config.postcache.entry.lifetime": [
        "10"
    ]
}</computeroutput>
   </screen>

   <screen>
$ <userinput>curl \
 --request POST \
 --header "iPlanetDirectoryPro: AQIC5w...2NzEz*" \
 --header "Content-Type: application/json" \
 --data '{
   "name":"newGroup",
   "realm":"/",
   "uniquemember":["uid=demo,ou=people,dc=openam,dc=forgerock,dc=org"]
 }' \
 https://openam.example.com:8443/openam/json/groups?_action=create</userinput>
<computeroutput>{
    "name": "newGroup",
    "realm": "/",
    "uniqueMember": [
        "uid=demo,ou=people,dc=openam,dc=forgerock,dc=org"
    ],
    "cn": [
        "newGroup"
    ],
    "objectclass": [
        "groupofuniquenames",
        "top"
    ],
    "universalid": [
        "id=newGroup,ou=group,dc=openam,dc=forgerock,dc=org"
    ]
}</computeroutput>

$ <userinput>curl \
 --request PUT \
 --header "If-None-Match: *" \
 --header "iPlanetDirectoryPro: AQIC5w...2NzEz*" \
 --header "Content-Type: application/json" \
 --data '{
   "name":"anotherGroup",
   "realm":"/",
   "uniquemember":["uid=demo,ou=people,dc=openam,dc=forgerock,dc=org"]
 }' \
 https://openam.example.com:8443/openam/json/groups/anotherGroup</userinput>
<computeroutput>{
    "name": "anotherGroup",
    "realm": "/",
    "uniqueMember": [
        "uid=demo,ou=people,dc=openam,dc=forgerock,dc=org"
    ],
    "cn": [
        "anotherGroup"
    ],
    "objectclass": [
        "groupofuniquenames",
        "top"
    ],
    "universalid": [
        "id=anotherGroup,ou=group,dc=openam,dc=forgerock,dc=org"
    ]
}</computeroutput>
   </screen>
  </section>
   
  <section xml:id="rest-api-read-identity">
   <title>Reading Identities</title>

   <para>OpenAM lets users and administrators read profiles by requesting an HTTP
   GET on <literal>/json/<replaceable>subrealm</replaceable
   >/users/<replaceable>user-id</replaceable></literal>.
   This allows users and administrators to verify user data, status, and directory.
   If users or administrators see missing or incorrect information, they can write 
   down the correct information and add it using <xref linkend="rest-api-update-identity" />.
   To read a profile on the Top Level Realm, you do not need to specify the realm.</para>
   
   <para>Users can review the data associated with their accounts and administrators 
   can read other user's profiles. The following example shows an administrator 
   accessing user data. Users can view their information by changing
   <literal>username=amadmin</literal> to <literal><replaceable>user-id</replaceable></literal>.</para>

    <screen>
$ <userinput>curl \
 --header "iplanetDirectoryPro: AQIC5w...2NzEz*" \
 https://openam.example.com:8443/openam/json/users/demo</userinput>
<computeroutput>{
    "username": "demo",
    "realm": "dc=openam,dc=forgerock,dc=org",
    "uid": [
        "demo"
    ],
    "userpassword": [
        "{SSHA}BKPAKRS3QKkvQRw25MfXbVC4VEuVNUf+yCaejg=="
    ],
    "sn": [
        "demo"
    ],
    "cn": [
        "demo"
    ],
    "inetuserstatus": [
        "Active"
    ],
    "dn": [
        "uid=demo,ou=people,dc=openam,dc=forgerock,dc=org"
    ],
    "objectclass": [
        "devicePrintProfilesContainer",
        "person",
        "sunIdentityServerLibertyPPService",
        "inetorgperson",
        "sunFederationManagerDataStore",
        "iPlanetPreferences",
        "iplanet-am-auth-configuration-service",
        "organizationalperson",
        "sunFMSAML2NameIdentifier",
        "inetuser",
        "forgerock-am-dashboard-service",
        "iplanet-am-managed-person",
        "iplanet-am-user-service",
        "sunAMAuthAccountLockout",
        "top"
    ],
    "universalid": [
        "id=demo,ou=user,dc=openam,dc=forgerock,dc=org"
    ]
}</computeroutput>
    </screen>

   <para>Use the <literal>_fields</literal> query string parameter to restrict
   the list of attributes returned. This parameter takes a comma-separated list
   of JSON object fields to include in the result.</para>

   <screen>
$ <userinput>curl \
 --header "iPlanetDirectoryPro: AQIC5w...2NzEz*" \
 https://openam.example.com:8443/openam/json/users/demo?_fields=username,uid</userinput>
<computeroutput>{"username":"demo","uid":["demo"]}</computeroutput>
   </screen>

   <para>As shown in the examples, OpenAM returns the JSON representation of the
   profile on success. On failure, OpenAM returns a JSON representation of the
   error including the
   <link xlink:href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html"
   xlink:show="new">HTTP status code</link>.</para>

   <para>Using HTTP GET to read also works for other objects such as agent
   profiles and groups.</para>

   <screen>
$ <userinput>curl \
 --header "iplanetDirectoryPro: AQIC5w...2NzEz*" \
 https://openam.example.com:8443/openam/json/agents/myClientID</userinput>
<computeroutput>{
    "username": "myClientID",
    "realm": "dc=openam,dc=forgerock,dc=org",
    "com.forgerock.openam.oauth2provider.accesstoken": [],
    "com.forgerock.openam.oauth2provider.clientsessionuri": [],
    "com.forgerock.openam.oauth2provider.defaultscopes": [
        "[0]="
    ],
    "com.forgerock.openam.oauth2provider.clientname": [],
    "com.forgerock.openam.oauth2provider.clienttype": [
        "Confidential"
    ],
    "universalid": [
        "id=myClientID,ou=agent,dc=openam,dc=forgerock,dc=org"
    ],
    "com.forgerock.openam.oauth2provider.responsetypes": [
        "[6]=code token id_token",
        "[0]=code",
        "[2]=id_token",
        "[4]=token id_token",
        "[3]=code token",
        "[1]=token",
        "[5]=code id_token"
    ],
    "userpassword": [
        "{SHA-1}W6ph5Mm5Pz8GgiULbPgzG37mj9g="
    ],
    "com.forgerock.openam.oauth2provider.name": [
        "[0]="
    ],
    "com.forgerock.openam.oauth2provider.redirectionuris": [
        "[0]="
    ],
    "com.forgerock.openam.oauth2provider.idtokensignedresponsealg": [
        "HS256"
    ],
    "com.forgerock.openam.oauth2provider.scopes": [
        "[0]="
    ],
    "com.forgerock.openam.oauth2provider.postlogoutredirecturi": [],
    "sunidentityserverdevicestatus": [
        "Active"
    ],
    "agenttype": [
        "OAuth2Client"
    ],
    "com.forgerock.openam.oauth2provider.description": [
        "[0]="
    ]
}</computeroutput>
   </screen>

   <para>The <literal>_prettyPrint</literal> query string parameter can make
   the resulting JSON easier to read when you are viewing the resulting JSON
   directly.</para>

   <screen>
$ <userinput>curl \
 --header "iPlanetDirectoryPro: AQIC5w...2NzEz*" \
 https://openam.example.com:8443/openam/json/groups/myGroup?_prettyPrint=true</userinput>
<computeroutput>{
    "username": "myGroup",
    "realm": "dc=openam,dc=forgerock,dc=org",
    "uniquemember": [
        "uid=demo,ou=people,dc=openam,dc=forgerock,dc=org"
    ],
    "cn": [
        "myGroup"
    ],
    "dn": [
        "cn=myGroup,ou=groups,dc=openam,dc=forgerock,dc=org"
    ],
    "objectclass": [
        "groupofuniquenames",
        "top"
    ],
    "universalid": [
        "id=myGroup,ou=group,dc=openam,dc=forgerock,dc=org"
    ]
}</computeroutput>
   </screen>
  </section>

  <section xml:id="rest-api-update-identity">
   <title>Updating Identities</title>

   <para>OpenAM lets users update their own profiles, and lets administrators
   update other users' profiles. To update an identity do an HTTP PUT of the JSON 
   representation of the changes to <literal>/json/<replaceable
   >subrealm</replaceable>/users/<replaceable>user-id</replaceable></literal>.
   To update a profile on the Top Level Realm, you do not need to specify the realm.</para>

    <para>The following example shows how users can update their own
    profiles.</para>

    <screen>
$ <userinput>curl \
 --request PUT \
 --header "iplanetDirectoryPro: AQIC5...Y3MTAx*" \
 --header "Content-Type: application/json" \
 --data '{ "mail": "demo@example.com" }' \
 https://openam.example.com:8443/openam/json/users/demo</userinput>
<computeroutput>{
    "username": "demo",
    "realm": "/",
    "uid": [
        "demo"
    ],
    "mail": [
        "demo@example.com"
    ],
    "sn": [
        "demo"
    ],
    "userpassword": [
        "{SSHA}S14oR2gusLWtiDkAS4twj63slXNNaMKpwrOWdw=="
    ],
    "cn": [
        "demo"
    ],
    "inetuserstatus": [
        "Active"
    ],
    "dn": [
        "uid=demo,ou=people,dc=openam,dc=forgerock,dc=org"
    ],
    "objectclass": [
        "person",
        "sunIdentityServerLibertyPPService",
        "sunFederationManagerDataStore",
        "inetorgperson",
        "iPlanetPreferences",
        "iplanet-am-auth-configuration-service",
        "organizationalperson",
        "sunFMSAML2NameIdentifier",
        "inetuser",
        "iplanet-am-managed-person",
        "sunAMAuthAccountLockout",
        "iplanet-am-user-service",
        "top"
    ],
    "universalid": [
        "id=demo,ou=user,dc=openam,dc=forgerock,dc=org"
    ]
}</computeroutput>
    </screen>

   <para>As shown in the example, OpenAM returns the JSON representation of the
   profile on success. On failure, OpenAM returns a JSON representation of the
   error including the
   <link xlink:href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html"
   xlink:show="new">HTTP status code</link>.</para>

   <para>
    You can use HTTP PUT to update other objects as well,
    such as policy agent profiles and groups.
   </para>

   <para>
    The following example creates a web policy agent profile.
   </para>

   <screen>
$ <userinput>curl \
 --request PUT \
 --header "iPlanetDirectoryPro: AQIC5...Y3MTAx*" \
 --header "Content-Type: application/json" \
 --header "If-None-Match: *" \
 --data '{
  "username" : "myWebAgent",
  "realm" : "/",
  "com.sun.identity.agents.config.fqdn.default" : [ "www.example.com" ],
  "sunIdentityServerDeviceKeyValue" :
   [ "agentRootURL=http://www.example.com:80/" ],
  "com.sun.identity.agents.config.remote.logfile" :
   [ "amAgent_www_example_com_80.log" ],
  "com.sun.identity.agents.config.repository.location" : [ "centralized" ],
  "AgentType" : [ "WebAgent" ],
  "com.sun.identity.agents.config.cdsso.cdcservlet.url" :
   [ "[0]=https://openam.example.com:8443/openam/cdcservlet" ],
  "com.sun.identity.client.notification.url" :
   [ "http://www.example.com:80/UpdateAgentCacheServlet?shortcircuit=false" ],
  "universalid" : [ "id=myWebAgent,ou=agent,dc=openam,dc=forgerock,dc=org" ],
  "userpassword" : [ "changeit" ],
  "com.sun.identity.agents.config.agenturi.prefix" :
   [ "http://www.example.com:80/amagent" ],
  "com.sun.identity.agents.config.login.url" :
   [ "[0]=https://openam.example.com:8443/openam/UI/Login" ],
  "com.sun.identity.agents.config.logout.url" :
   [ "[0]=https://openam.example.com:8443/openam/UI/Logout" ],
  "sunIdentityServerDeviceStatus" : [ "Active" ]
 }' \
 https://openam.example.com:8443/openam/json/agents/myWebAgent?_prettyPrint=true</userinput>
   </screen>

   <para>
    When you create a policy agent profile,
    OpenAM returns the full profile in JSON format.
   </para>

   <para>Notice in the following example that updates <literal>myGroup</literal>
   the object class value is not included in the JSON sent to OpenAM.</para>

   <screen>
$ <userinput>curl \
 --request PUT \
 --header "iPlanetDirectoryPro: AQIC5...Y3MTAx*" \
 --header "Content-Type: application/json" \
 --data '{
   "name":"myGroup",
   "realm":"/",
   "uniquemember":["uid=demo,ou=people,dc=openam,dc=forgerock,dc=org"],
   "cn":["myGroup"],
   "description":["Updated the group"]
 }' \
 https://openam.example.com:8443/openam/json/groups/myGroup</userinput>
<computeroutput>{
    "name": "myGroup",
    "realm": "/",
    "uniqueMember": [
        "uid=demo,ou=people,dc=openam,dc=forgerock,dc=org"
    ],
    "cn": [
        "myGroup"
    ],
    "dn": [
        "cn=myGroup,ou=groups,dc=openam,dc=forgerock,dc=org"
    ],
    "objectclass": [
        "groupofuniquenames",
        "top"
    ],
    "universalid": [
        "id=myGroup,ou=group,dc=openam,dc=forgerock,dc=org"
    ]
}</computeroutput>
   </screen>
  </section>

  <section xml:id="rest-api-delete-identity">
   <title>Deleting Identities</title>

   <para>OpenAM lets administrators delete a user profile by making an HTTP DELETE 
   call to <literal>/json/<replaceable>subrealm</replaceable
   >/users/<replaceable>user-id</replaceable></literal>.
   To delete a user from the Top Level Realm, you do not need to specify the realm.</para>

   <para>The following example removes a user from the top level
   realm. Only administrators should delete users. The user id is the only
   field required to delete a user.</para>

   <screen>
$ <userinput>curl \
 --request DELETE \
 --header "iplanetDirectoryPro: AQIC5w...2NzEz*" \
 https://openam.example.com:8443/openam/json/users/bjensen</userinput>
<computeroutput>{"success":"true"}</computeroutput>
   </screen>

   <para>On success, OpenAM returns a JSON object indicating success. On
   failure, OpenAM returns a JSON representation of the error including the
   <link xlink:href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html"
   xlink:show="new">HTTP status code</link>.</para>

   <para>You can use this same logic for other resources such as performing an
   HTTP DELETE of an agent profile or of a group.</para>

   <screen>
$ <userinput>curl \
 --request DELETE \
 --header "iplanetDirectoryPro: AQIC5w...2NzEz*" \
 https://openam.example.com:8443/openam/json/agents/myOAuth2ClientAgent</userinput>
<computeroutput>{"success":"true"}</computeroutput>
   </screen>

   <screen>
$ <userinput>curl \
 --request DELETE \
 --header "iPlanetDirectoryPro: AQIC5w...2NzEz*" \
 https://openam.example.com:8443/openam/json/groups/myGroup</userinput>
<computeroutput>{"success":"true"}</computeroutput>
   </screen>

  <note>
    <para>Deleting a user does not automatically remove any of the user's sessions.
    After deleting a user, check for any sessions for the user and remove them under the Console's Sessions tab.
    </para>
  </note>
  </section>

  <section xml:id="rest-api-query-identity">
   <title>Listing Identities</title>

   <para>OpenAM lets administrators list identities by making an HTTP GET
   call to <literal>/json/<replaceable>subrealm</replaceable
   >/users/?_queryId=*</literal>. To query the Top Level Realm, you do not need
   to specify the realm.</para>

   <screen>
$ <userinput>curl \
 --header "iPlanetDirectoryPro: AQIC5w...2NzEz*" \
 "https://openam.example.com:8443/openam/json/users?_queryID=*"</userinput>
<computeroutput>{
  "result" : [ "amAdmin", "demo", "anonymous" ],
  "resultCount" : 3,
  "pagedResultsCookie" : null,
  "remainingPagedResults" : -1
}</computeroutput>
   </screen>

   <para>This also works for other types of objects, such as agent profiles and
   groups.</para>

   <screen>
$ <userinput>curl \
 --header "iPlanetDirectoryPro: AQIC5w...2NzEz*" \
 "https://openam.example.com:8443/openam/json/agents?_queryID=*"</userinput>
<computeroutput>{
  "result" : [ "wsp", "wsc", "agentAuth", "SecurityTokenService" ],
  "resultCount" : 4,
  "pagedResultsCookie" : null,
  "remainingPagedResults" : -1
}</computeroutput>
   </screen>

   <screen>
$ <userinput>curl \
 --header "iPlanetDirectoryPro: AQIC5w...2NzEz*" \
 "https://openam.example.com:8443/openam/json/groups?_queryID=*"</userinput>
<computeroutput>{
  "result" : [ "myOtherGroup", "myGroup" ],
  "resultCount" : 2,
  "pagedResultsCookie" : null,
  "remainingPagedResults" : -1
}</computeroutput>
   </screen>

   <para>As the result lists include all objects, this capability to list
   identity names is mainly useful in testing.</para>

   <para>As shown in the examples, OpenAM returns the JSON representation of
   the resource list if successful. On failure, OpenAM returns a JSON
   representation of the error including the
   <link xlink:href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html"
   xlink:show="new">HTTP status code</link>.</para>
  </section>

  <section xml:id="rest-api-change-password">
   <title>Changing Passwords</title>
   <indexterm>
    <primary>Passwords</primary>
    <secondary>Reset</secondary>
   </indexterm>
   <indexterm>
    <primary>Passwords</primary>
    <secondary>Change</secondary>
   </indexterm>

   <para>
    OpenAM administrator, by default <literal>amadmin</literal>,
    can reset a user's password or a user can change their own password
    with an HTTP PUT to <literal>/json/<replaceable>subrealm</replaceable
    >/users/<replaceable>username</replaceable></literal>
    including the new password as the value of "userpassword" in the request data.

    OpenAM administrator can reset the password without the old password.

    A user must provide the current password, which is set in the request
    as the value of the <literal>olduserpassword</literal> header.
    For the case where the user has forgotten their password, see
    <xref linkend="rest-api-password-reset" /> instead.
   </para>

   <para>
    The following example shows a successful request to change the demo user's
    password to <literal>password</literal>.
   </para>

   <screen>
$ <userinput>curl \
 --request PUT \
 --header "iPlanetDirectoryPro: AQIC5w...NTcy*" \
 --header "Content-Type: application/json" \
 --header "olduserpassword: changeit" \
 --data '{"userpassword":"newpassword"}' \
 https://openam.example.com:8443/openam/json/users/demo</userinput>
<computeroutput>{
    "username": "demo",
    "realm": "/",
    "uid": [
        "demo"
    ],
    "mail": [
        "demo@example.com"
    ],
    "sn": [
        "demo"
    ],
    "userPassword": [
        "{SSHA}OrBR9VdMLs95iMq/VKYLwJkr4fTOfGS91+9grg=="
    ],
    "cn": [
        "demo"
    ],
    "inetUserStatus": [
        "Active"
    ],
    "dn": [
        "uid=demo,ou=people,dc=openam,dc=forgerock,dc=org"
    ],
    "objectClass": [
        "devicePrintProfilesContainer",
        "person",
        "sunIdentityServerLibertyPPService",
        "inetorgperson",
        "sunFederationManagerDataStore",
        "iPlanetPreferences",
        "iplanet-am-auth-configuration-service",
        "organizationalperson",
        "sunFMSAML2NameIdentifier",
        "inetuser",
        "forgerock-am-dashboard-service",
        "iplanet-am-managed-person",
        "iplanet-am-user-service",
        "sunAMAuthAccountLockout",
        "top"
    ],
    "universalid": [
        "id=demo,ou=user,dc=openam,dc=forgerock,dc=org"
    ]
}</computeroutput>
   </screen>

   <para>
    As shown in the examples, OpenAM returns
    the JSON representation of the resource list if successful.

    On failure, OpenAM returns a JSON representation of the error including the
    <link xlink:href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html"
    xlink:show="new">HTTP status code</link>.

    See also <xref linkend="rest-api-status-codes" /> for more information.
   </para>
  </section>

  <section xml:id="rest-api-create-legacy">
   <title>Creating Identities (Legacy API)</title>

   <para>Interface Stability: <link xlink:show="new"
   xlink:href="admin-guide#interface-stability"
   xlink:role="http://docbook.org/xlink/role/olink">Deprecated</link></para>

   <para>OpenAM lets you create user profiles, and also create web and J2EE
   policy agent profiles. When you create an entry, you must provide the
   following parameters.</para>
   <variablelist>
    <varlistentry>
     <term>admin</term>
     <listitem>
      <para>Valid token for the user with permissions to add the identity</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>identity_name</term>
     <listitem>
      <para>A unique name for the identity to create</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>identity_attribute_names</term>
     <listitem>
      <para>LDAP attribute names for attributes to create</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>identity_attribute_values_<replaceable>name</replaceable></term>
     <listitem>
      <para>LDAP attribute values for the identity to create. For example,
      <literal>identity_attribute_names=sn&amp;identity_attribute_values_sn=Jensen</literal>.</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>identity_realm</term>
     <listitem>
      <para>The realm in which to create the identity</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>identity_type</term>
     <listitem>
      <para>Either <literal>user</literal> or <literal>AgentOnly</literal></para>
     </listitem>
    </varlistentry>
   </variablelist>
   
    <screen>
$ <userinput>curl "https://openam.example.com:8443/openam/identity/create?\
admin=AQIC5wM2LY4SfcxSYA8eG-vrNHb_W7nG8XkfAGyRyuaebDY.*AAJTSQACMDE.*\
&amp;identity_name=testuser\
&amp;identity_attribute_names=cn\
&amp;identity_attribute_values_cn=Test%20User\
&amp;identity_attribute_names=sn\
&amp;identity_attribute_values_sn=User\
&amp;identity_attribute_names=userpassword\
&amp;identity_attribute_values_userpassword=secret12\
&amp;identity_realm=%2F\
&amp;identity_type=user"</userinput>
    </screen>
  </section>
  
  <section xml:id="rest-api-read-legacy">
   <title>Reading &amp; Searching for Identities (Legacy API)</title>

   <para>Interface Stability: <link xlink:show="new"
   xlink:href="admin-guide#interface-stability"
   xlink:role="http://docbook.org/xlink/role/olink">Deprecated</link></para>

   <para>Reading is similar to attribute retrieval, as described in
   <xref linkend="rest-api-tokens" />, but obtained using the token of
   a user with permissions to perform the search, as shown in the following
   example.</para>
   
   <screen>
$ <userinput>curl "https://openam.example.com:8443/openam/identity/read?\
admin=AQIC5wM2LY4SfcxSYA8eG-vrNHb_W7nG8XkfAGyRyuaebDY.*AAJTSQACMDE.*\
&amp;name=testuser\
&amp;attributes_names=realm\
&amp;attributes_values_realm=%2F"</userinput>
<computeroutput>identitydetails.name=testuser
identitydetails.type=user
identitydetails.realm=o=openam
identitydetails.attribute=
identitydetails.attribute.name=uid
identitydetails.attribute.value=testuser
identitydetails.attribute=
identitydetails.attribute.name=sn
identitydetails.attribute.value=User
identitydetails.attribute=
identitydetails.attribute.name=userpassword
identitydetails.attribute.value={SSHA}AzpT+N1sjrQhL1wfX2ETWh/Aqbd+lH9LOlhDqg==
identitydetails.attribute=
identitydetails.attribute.name=cn
identitydetails.attribute.value=Test User
identitydetails.attribute=
identitydetails.attribute.name=inetuserstatus
identitydetails.attribute.value=Active
identitydetails.attribute=
identitydetails.attribute.name=dn
identitydetails.attribute.value=uid=testuser,ou=people,dc=example,dc=com
identitydetails.attribute=
identitydetails.attribute.name=objectclass
identitydetails.attribute.value=person
identitydetails.attribute.value=sunIdentityServerLibertyPPService
identitydetails.attribute.value=inetorgperson
identitydetails.attribute.value=sunFederationManagerDataStore
identitydetails.attribute.value=iPlanetPreferences
identitydetails.attribute.value=iplanet-am-auth-configuration-service
identitydetails.attribute.value=organizationalperson
identitydetails.attribute.value=sunFMSAML2NameIdentifier
identitydetails.attribute.value=inetuser
identitydetails.attribute.value=iplanet-am-managed-person
identitydetails.attribute.value=iplanet-am-user-service
identitydetails.attribute.value=sunAMAuthAccountLockout
identitydetails.attribute.value=top
identitydetails.attribute=
identitydetails.attribute.name=universalid
identitydetails.attribute.value=id=testuser,ou=user,o=openam</computeroutput>
   </screen>
   
   <para>You can search for user IDs by providing the following
   parameters.</para>
   
   <variablelist>
    <varlistentry>
     <term>admin</term>
     <listitem>
      <para>Valid token for the user with access to perform the search</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>attributes_names</term>
     <listitem>
      <para>LDAP attribute names for attributes to search</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>attributes_values_<replaceable>name</replaceable></term>
     <listitem>
      <para>LDAP attribute values for the identity to search. For example,
      <literal>attribute_names=sn&amp;attribute_values_sn=Jensen</literal>.</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>filter</term>
     <listitem>
      <para>Additional LDAP filter component to limit the search results
      returned</para>
     </listitem>
    </varlistentry>
   </variablelist>
   
   <screen>
$ <userinput>curl "https://openam.example.com:8443/openam/identity/search?\
admin=AQIC5wM2LY4SfcxSYA8eG-vrNHb_W7nG8XkfAGyRyuaebDY.*AAJTSQACMDE.*\
&amp;attributes_names=sn\
&amp;attributes_values_sn=Jensen\
&amp;attributes_names=mail\
&amp;attributes_values_mail=bjensen*\
&amp;attributes_names=realm\
&amp;attributes_values_realm=%2F"</userinput>
<computeroutput>string=bjensen</computeroutput>
   </screen>
  </section>
  
  <section xml:id="rest-api-update-legacy">
   <title>Updating Identities (Legacy API)</title>

   <para>Interface Stability: <link xlink:show="new"
   xlink:href="admin-guide#interface-stability"
   xlink:role="http://docbook.org/xlink/role/olink">Deprecated</link></para>

   <para>You can update an identity with the same parameters used to create
   identities, provided the token corresponds to a user with access to
   update the identity.</para>
   
   <screen>
$ <userinput>curl "https://openam.example.com:8443/openam/identity/update?\
admin=AQIC5wM2LY4SfcxSYA8eG-vrNHb_W7nG8XkfAGyRyuaebDY.*AAJTSQACMDE.*\
&amp;identity_name=testuser\
&amp;identity_attribute_names=mail\
&amp;identity_attribute_values_mail=testuser%40example.com\
&amp;identity_realm=%2F\
&amp;identity_type=user"</userinput>
   </screen>
  </section>
  
  <section xml:id="rest-api-delete-legacy">
   <title>Deleting Identities (Legacy API)</title>
   

   <para>Interface Stability: <link xlink:show="new"
   xlink:href="admin-guide#interface-stability"
   xlink:role="http://docbook.org/xlink/role/olink">Deprecated</link></para>

   <para>You can also delete an identity.</para>
   
   <screen>
$ <userinput>curl "https://openam.example.com:8443/openam/identity/delete?\
admin=AQIC5wM2LY4SfcxSYA8eG-vrNHb_W7nG8XkfAGyRyuaebDY.*AAJTSQACMDE.*\
&amp;identity_name=testuser\
&amp;identity_realm=%2F\
&amp;identity_type=user"</userinput>
   </screen>
  </section>
 </section>
 
 <section xml:id="rest-api-crud-realm">
  <title>Realm Management</title>
  <indexterm>
   <primary>Realm data</primary>
   <secondary>REST access</secondary>
  </indexterm>
  
    <para>This section shows how to create, read, update, and delete realms 
  using the RESTful APIs.</para>

  <itemizedlist>
   <listitem>
    <para>Under the <literal>/json/realms</literal> endpoint, you find the 
    newer JSON-based API.</para>

    <itemizedlist>
     <para>The following sections cover this JSON-based API.</para>
     <listitem><para><xref linkend="rest-api-parameters-realm" /></para></listitem>
     <listitem><para><xref linkend="rest-api-create-realm" /></para></listitem>
     <listitem><para><xref linkend="rest-api-read-realm" /></para></listitem>
     <listitem><para><xref linkend="rest-api-update-realm" /></para></listitem>
     <listitem><para><xref linkend="rest-api-delete-realm" /></para></listitem>
    </itemizedlist>
   </listitem>
  </itemizedlist>

  <section xml:id="rest-api-parameters-realm">
   <title>Default Parameters for Realms</title>
    <para>Realms have a number of fields entered with the default loading.
    The following table provides information on what the default realm settings are,
    and these settings can be updated, added, or deleted when updating
    a realm.</para>
     
     <table xml:id="realm-parameter" pgwide="1">
     <title>Realm Parameters for JSON-based API</title>
     <tgroup cols="3">
      <thead>
       <row>
        <entry>Realm Parameter</entry>
        <entry>Default</entry>
        <entry>Purpose</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry>realm</entry>
        <entry>None - the only required field to add a realm</entry>
        <entry><para>The name of the realm</para>
         <para>Example: <literal>testRealm</literal></para></entry>
       </row>
       <row>
        <entry>sunOrganizationStatus</entry>
        <entry>None</entry>
        <entry><para>The status of the realm</para>
         <para><literal>Active</literal> or <literal>Inactive</literal></para></entry>
       </row>
       <row>
        <entry>sunOrganizationAliases</entry>
        <entry>None</entry>
        <entry><para>Any applicable aliases associated with the realm. Be aware that
        an alias can only be used once. Entering an alias used by another realm
        will remove the alias from that realm and you will lose configuration.</para>
         <para>Example: <literal>opensso.example.com</literal></para></entry>
       </row>
       <row>
        <entry>serviceNames</entry>
        <entry><literal>sunAMAuthHOTPService</literal>
        <literal>iPlanetAMAuthConfiguration</literal>        
        <literal>sunAMAuthFederationService</literal>
        <literal>sunIdentityRepositoryService</literal>
        <literal>iPlanetAMPolicyConfigService</literal>
        <literal>iPlanetAMAuthService</literal>
        <literal>iPlanetAMAuthLDAPService</literal>
        <literal>sunAMAuthDataStoreService</literal>
        <literal>sunAMAuthSAEService</literal>
        <literal>sunAMDelegationService</literal>
        <literal>sunAMAuthWSSAuthModuleService</literal>
        <literal>iPlanetAMAuthOATHService</literal>
        </entry>
        <entry>Services needed for the realm, including authentication modules</entry>
       </row>
     </tbody>
     </tgroup>
    </table>
  </section>

  <section xml:id="rest-api-create-realm">
   <title>Creating Realms</title>

   <para>OpenAM lets administrators create a realm by making 
   an HTTP POST of the JSON representation of the profile to
   <literal>/json/realms/?_action=create</literal>.</para>
   
    <para>You can create realms using an HTTP POST of the JSON representation 
    of the profile to <literal>/json/realms/?_action=create</literal>, as shown in 
    the following example. The only required field is <literal>realm</literal>, 
    but the realm will not be active if the status is not set.</para>
   
     <screen>
$ <userinput>curl \
 --request POST \
 --header "iplanetDirectoryPro: AQIC5w...2NzEz*" \
 --header "Content-Type: application/json" \
 --data '{ "realm": "testRealm" }' \
 https://openam.example.com:8443/openam/json/realms/?_action=create</userinput>
<computeroutput>{"realmCreated":"/testRealm"}</computeroutput>
     </screen>

    <para>You can also set the <literal>sunOrganizationAliases</literal> parameter,
    but it can only be assigned to one realm (usually the top level realm). Before
    setting this parameter, make sure it is not already assigned elsewhere. If you 
    replace remove it from another realm, you will lose your configuration.</para>
    
    <para>Alternatively, administrators can create realms by the specific realm
    name using the HTTP PUT of the JSON representation of the changes to 
    <literal>/json/realms/<replaceable>realm-id</replaceable></literal>, as
    shown in the following example.</para>
   
     <screen>
$ <userinput>curl \
 --request PUT \
 --header "iplanetDirectoryPro: AQIC5w...2NzEz*" \
 --header "Content-Type: application/json" \
 --data '{ "sunOrganizationStatus": "Active" }' \
 https://openam.example.com:8443/openam/json/realms/testRealm</userinput>
     </screen>

    <para>
     OpenAM returns the JSON representation of the profile on success.
     On failure, OpenAM returns a JSON representation of the error including the
     <link
      xlink:href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html"
      xlink:show="new"
     >HTTP status code</link>.
    </para>
   </section>

  <section xml:id="rest-api-read-realm">
   <title>Reading Realms</title>

   <para>OpenAM lets administrators read realms by requesting an HTTP GET on 
   <literal>/json/realms/<replaceable>realm-id</replaceable></literal>. This 
   allows administrators to review all active realm services for the realm, 
   like policy configuration and modules. If users or administrators see missing 
   information (such as Active status) or incorrect information, they can write 
   down the correct information and add it using <xref linkend="rest-api-update-realm" /></para>
   
    <para>The following example shows an administrator receiving information about
    the <literal>testRealm</literal>.</para>

    <screen>
$ <userinput>curl \
 --header "iplanetDirectoryPro: AQIC5w...2NzEz*" \
 https://openam.example.com:8443/openam/json/realms/testRealm</userinput>
<computeroutput>{
    "serviceNames":[
                  "sunAMAuthHOTPService",
                  "iPlanetAMAuthConfiguration",
                  "sunAMAuthFederationService",
                  "sunIdentityRepositoryService",
                  "iPlanetAMPolicyConfigService",
                  "iPlanetAMAuthService",
                  "iPlanetAMAuthLDAPService",
                  "sunAMAuthDataStoreService",
                  "sunAMAuthSAEService",
                  "sunAMDelegationService",
                  "sunAMAuthWSSAuthModuleService",
                  "iPlanetAMAuthOATHService"
    ]
}</computeroutput>
    </screen>

    <para>As shown in the example, OpenAM returns the JSON representation of the
    profile on success. On failure, OpenAM returns a JSON representation of the
    error including the
    <link xlink:href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html"
    xlink:show="new">HTTP status code</link>.</para>
   </section>
    
  <section xml:id="rest-api-update-realm">
   <title>Updating Realms</title>

   <para>OpenAM lets administrators update realms. To update a realm, do an HTTP PUT 
   of the JSON representation of the changes to
   <literal>/json/realms/<replaceable>realm-id</replaceable></literal>.</para>

    <para>The following example shows how to update a realm.</para>
   
     <screen>
$ <userinput>curl \
 --request PUT \
 --header "iplanetDirectoryPro: AQIC5...Y3MTAx*" \
 --header "Content-Type: application/json" \
 --data '{ "sunOrganizationStatus": "Active" }' \
 https://openam.example.com:8443/openam/json/realms/testRealm</userinput>
     </screen>

    <para>OpenAM returns the JSON representation of the
    profile on success. On failure, OpenAM returns a JSON representation of the
    error including the
    <link xlink:href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html"
    xlink:show="new">HTTP status code</link>.</para>
   </section>

  <section xml:id="rest-api-delete-realm">
   <title>Deleting Realms</title>

   <para>OpenAM lets administrators delete a realm by making an HTTP DELETE call to
   <literal>/json/realms/<replaceable>realm-id</replaceable></literal>.</para>

    <para>The following example deletes a realm. The top level realm cannot
    be deleted. Only administrators should delete realms. The name of the realm
    is the only field required to delete the realm.</para>
    <para>Make sure that you do not have any information you need within a realm 
    before deleting it. Once a realm is deleted, the only way to restore it is 
    to return to a backed up deployment of OpenAM.</para>

    <screen>
$ <userinput>curl \
 --request DELETE \
 --header "iplanetDirectoryPro: AQIC5w...2NzEz*" \
 https://openam.example.com:8443/openam/json/realms/testRealm</userinput>
<computeroutput>{"success":"true"}</computeroutput>
    </screen>

    <para>On success, OpenAM returns a JSON object indicating success. On
    failure, OpenAM returns a JSON representation of the error including the
    <link xlink:href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html"
    xlink:show="new">HTTP status code</link>.</para>
   
   </section>

 </section>

 <section xml:id="rest-dashboard">
  <title>Displaying Dashboard Applications</title>
  <indexterm><primary>Dashboard services</primary></indexterm>
  
    <para>OpenAm lets administrators configure online applications to display
    applications on user Dashboards. You can used exposed REST API to display
    information about the online applications.</para>
    
    <variablelist>
     <varlistentry>
      <term><literal>/dashboard/assigned</literal></term>
      <listitem>
       <para>This endpoint retrieves the list of applications assigned to the 
       authenticated user.</para>

      <screen>
$ <userinput>curl \
 --header "iplanetDirectoryPro: AQIC5w...2NzEz*" \
 https://openam.example.com:8443/openam/json/dashboard/assigned</userinput>
<computeroutput>{
  "google": {
      "dashboardIcon": [
          "Google.gif"
      ],
      "dashboardName": [
          "Google"
      ],
      "dashboardLogin": [
          "http://www.google.com"
      ],
      "ICFIdentifier": [
          ""
      ],
      "dashboardDisplayName": [
          "Google"
      ],
      "dashboardClassName": [
          "SAML2ApplicationClass"
      ]
   }
}</computeroutput>
      </screen>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>/dashboard/available</literal></term>
      <listitem>
       <para>This endpoint retrieves the list of applications available in the
       authenticated user's realm. The example is based on two of the default 
       Dashboard applications: Google and Salesforce.</para>

      <screen>
$ <userinput>curl \
 --header "iplanetDirectoryPro: AQIC5w...2NzEz*" \
 https://openam.example.com:8443/openam/json/dashboard/available</userinput>
<computeroutput>{
  "google": {
      "dashboardIcon": [
          "Google.gif"
      ],
      "dashboardName": [
          "Google"
      ],
      "dashboardLogin": [
          "http://www.google.com"
      ],
      "ICFIdentifier": [
          ""
      ],
      "dashboardDisplayName": [
          "Google"
      ],
      "dashboardClassName": [
          "SAML2ApplicationClass"
      ]
  }
  "salesforce": {
      "dashboardIcon": [
          "salesforce.gif"
      ],
      "dashboardName": [
          "Salesforce"
      ],
      "dashboardLogin": [
          "http://salesforce.com"
      ],
      "ICFIdentifier": [
          ""
      ],
      "dashboardDisplayName": [
          "Salesforce"
      ],
      "dashboardClassName": [
          "SAML2ApplicationClass"
      ]
  }
}</computeroutput>
      </screen>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>/dashboard/defined</literal></term>
      <listitem>
       <para>This endpoint retrieves the list of all applications available defined
       for the OpenAM Dashboard service. The example is based on the three default 
       Dashboard applications: Google, Salesforce, and Zendesk.</para>

      <screen>
$ <userinput>curl \
 --header "iplanetDirectoryPro: AQIC5w...2NzEz*" \
 https://openam.example.com:8443/openam/json/dashboard/defined</userinput>
<computeroutput>{
    "google": {
        "dashboardIcon": [
            "Google.gif"
        ],
        "dashboardName": [
            "Google"
        ],
        "dashboardLogin": [
            "http://www.google.com"
        ],
        "ICFIdentifier": [
            "idm magic 34"
        ],
        "dashboardDisplayName": [
            "Google"
        ],
        "dashboardClassName": [
            "SAML2ApplicationClass"
        ]
    },
    "salesforce": {
        "dashboardIcon": [
            "salesforce.gif"
        ],
        "dashboardName": [
            "SalesForce"
        ],
        "dashboardLogin": [
            "http://www.salesforce.com"
        ],
        "ICFIdentifier": [
            "idm magic 12"
        ],
        "dashboardDisplayName": [
            "Salesforce"
        ],
        "dashboardClassName": [
            "SAML2ApplicationClass"
        ]
    },
    "zendesk": {
        "dashboardIcon": [
            "ZenDesk.gif"
        ],
        "dashboardName": [
            "ZenDesk"
        ],
        "dashboardLogin": [
            "http://www.ZenDesk.com"
        ],
        "ICFIdentifier": [
            "idm magic 56"
        ],
        "dashboardDisplayName": [
            "ZenDesk"
        ],
        "dashboardClassName": [
            "SAML2ApplicationClass"
        ]
    }
}</computeroutput>
      </screen>
      </listitem>
     </varlistentry>

    </variablelist>
    
    <para>If your application runs in a user-agent such as a browser, you can
    rely on OpenAM to handle authentication.</para>
   
  </section>

  <section xml:id="rest-api-status-codes">
   <title>REST Status Codes</title>

   <para>OpenAM REST APIs respond to successful requests with HTTP status codes
   in the 2xx range. OpenAM REST APIs respond to error conditions with HTTP
   status codes in the 4xx and 5xx range. Status codes used are described in the
   following list.</para>

   <variablelist>
    <varlistentry>
     <term>200 OK</term>
     <listitem>
      <para>The request was successful and a resource returned, depending on the
      request. For example, a successful HTTP GET on
      <literal>/users/myUser</literal> returns a user profile and status code
      200, whereas a successful HTTP DELETE returns
      <literal>{"success","true"}</literal> and status code 200.</para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>201 Created</term>
     <listitem>
      <para>The request succeeded and the resource was created.</para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>400 Bad Request</term>
     <listitem>
      <para>The request was malformed as in the following example, which is
      sending bad data in the payload for the action.</para>

      <screen>
$ <userinput>curl \
 --request POST \
 --header "Content-Type: application/json" \
 --data '{"bad":"data"}' \
 https://openam.example.com:8443/openam/json/users?_action=forgotPassword</userinput>

<computeroutput>{"code":400,"reason":"Bad Request","message":"Username not provided"}</computeroutput>
      </screen>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>401 Unauthorized</term>
     <listitem>
      <para>The request requires user authentication as in the following
      example, which is missing an SSO Token value.</para>

      <screen>
$ <userinput>curl \
 --request POST \
 https://openam.example.com:8443/openam/json/sessions?_action=logout</userinput>

<computeroutput>{ "code": 401, "reason": "Unauthorized", "message": "Access denied" }</computeroutput>
      </screen>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>403 Forbidden</term>
     <listitem>
      <para>Access was forbidden during an operation on a resource as in the
      following example, which has a regular user trying to read the OpenAM
      administrator profile.</para>

      <screen>
$ <userinput>curl \
 --request POST \
 --header "X-OpenAM-Username: demo" \
 --header "X-OpenAM-Password: changeit" \
 https://openam.example.com:8443/openam/json/authenticate</userinput>

<computeroutput>{ "tokenId": "AQIC5w...YyMA..*" }</computeroutput>

$ <userinput>curl \
 --header "iplanetDirectoryPro: AQIC5w...YyMA..*" \
 https://openam.example.com:8443/openam/json/users/amadmin</userinput>
<computeroutput>{
    "code": 403,
    "reason": "Forbidden",
    "message": "Permission to perform the read operation denied to
                id=demo,ou=user,dc=openam,dc=forgerock,dc=org"
}</computeroutput>
      </screen>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>404 Not Found</term>
     <listitem>
      <para>The specified resource could not be found as in the following
      example, which is attempting to read a nonexistent user's profile.</para>

      <screen>
$ <userinput>curl \
 --header "iplanetDirectoryPro: AQIC5w...NTcy*" \
 https://openam.example.com:8443/openam/json/users/missing</userinput>

<computeroutput>{"code":404,"reason":"Not Found","message":"Resource cannot be found."}</computeroutput>
      </screen>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>405 Method Not Allowed</term>
     <listitem>
      <para>The HTTP method is not allowed for the requested resource.</para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>409 Conflict</term>
     <listitem>
      <para>The request would have resulted in a conflict with the current
      state of the resource.</para>
     </listitem>
    </varlistentry>

    <!-- Object versioning does not seem to be used in OpenAM REST.
    <varlistentry>
     <term>412 Precondition Failed</term>
     <listitem>
      <para>The current version of the resource did not match the version
      provided.</para>
     </listitem>
    </varlistentry>
    -->

    <varlistentry>
     <term>415 Unsupported Media Type</term>
     <listitem>
      <para>The request is in a format not supported by the requested resource
      for the requested method as in the following example, which is attempting
      to pass basic authentication credentials as form-encoded data rather than
      query string parameters.</para>

      <screen>
$ <userinput>curl \
 --request POST \
 --data "username=demo&amp;password=changeit" \
 https://openam.example.com:8443/openam/json/authenticate</userinput>
<computeroutput>...
HTTP Status 415
...
The server refused this request because the request entity is in a
 format not supported by the requested resource for the requested method
...</computeroutput>
      </screen>
     </listitem>
    </varlistentry>

    <!-- Object versioning does not seem to be used in OpenAM REST.
    <varlistentry>
     <term>428 Precondition Required</term>
     <listitem>
      <para>The resource requires a version, and no version was supplied with
      the request.</para>
     </listitem>
    </varlistentry>
    -->

    <varlistentry>
     <term>500 Internal Server Error</term>
     <listitem>
      <para>The server encountered an unexpected condition which prevented it
      from fulfilling the request.</para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>501 Not Implemented</term>
     <listitem>
      <para>The resource does not support the functionality required to fulfill
      the request as in the following example, which is attempting to delete
      an entry as a delete action instead of using an HTTP DELETE request.</para>

      <screen>
$ <userinput>curl \
 --request POST \
 --header "iplanetDirectoryPro: AQIC5w...NTcy*" \
 https://openam.example.com:8443/openam/json/users/demo?_action=delete</userinput>

<computeroutput>{
    "code": 501,
    "reason": "Not Implemented",
    "message": "Actions are not supported for resource instances"
}</computeroutput>
      </screen>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>503 Service Unavailable</term>
     <listitem>
      <para>The requested resource was temporarily unavailable.</para>
     </listitem>
    </varlistentry>
   </variablelist>
  </section>
</chapter>
