<?xml version="1.0" encoding="UTF-8"?>
<!--
  ! CCPL HEADER START
  !
  ! This work is licensed under the Creative Commons
  ! Attribution-NonCommercial-NoDerivs 3.0 Unported License.
  ! To view a copy of this license, visit
  ! http://creativecommons.org/licenses/by-nc-nd/3.0/
  ! or send a letter to Creative Commons, 444 Castro Street,
  ! Suite 900, Mountain View, California, 94041, USA.
  !
  ! You can also obtain a copy of the license at
  ! trunk/opendj3/legal-notices/CC-BY-NC-ND.txt.
  ! See the License for the specific language governing permissions
  ! and limitations under the License.
  !
  ! If applicable, add the following below this CCPL HEADER, with the fields
  ! enclosed by brackets "[]" replaced with your own identifying information:
  !      Portions Copyright [yyyy] [name of copyright owner]
  !
  ! CCPL HEADER END
  !
  !      Copyright 2011-2014 ForgeRock AS
  !
-->
<section xml:id="configure-j2ee-policy-agent"
         xmlns='http://docbook.org/ns/docbook' version='5.0' xml:lang='en'
         xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
         xsi:schemaLocation='http://docbook.org/ns/docbook http://docbook.org/xml/5.0/xsd/docbook.xsd'
         xmlns:xlink='http://www.w3.org/1999/xlink'
         xmlns:xinclude='http://www.w3.org/2001/XInclude'>

 <title>Configuring Java EE Policy Agents</title>
 <indexterm>
  <primary>Policy agents</primary>
  <secondary>Configuring</secondary>
 </indexterm>
 <para>When you create a Java EE policy agent profile and install the agent,
  you can choose to store the agent configuration centrally and configure
  the agent through OpenAM console. Alternatively, you can choose to store
  the agent configuration locally and configure the agent by changing
  values in the properties file. This section covers centralized configuration,
  indicating the corresponding properties for use in a local configuration
  file where applicable.

  <footnote><para>The configuration file syntax is that
   of a standard Java properties file. See
   <link xlink:href="http://download.oracle.com/javase/6/docs/api/java/util/Properties.html#load%28java.io.Reader%29">java.util.Properties.load()</link>
   for a description of the format. The value of a property specified multiple
   times is not defined.</para></footnote></para>

 <tip>
  <para>To show the agent properties in configuration file format that
   correspond to what you see in the console, click Export Configuration
   after editing agent properties.</para>
 </tip>

 <para>After changing properties specified as "Hot swap: no" you must
  restart the application server or web server, or the agent's container.</para>

 <section xml:id="configure-j2ee-pa-global-props">
  <title>Configuring Java EE Policy Agent Global Properties</title>

  <para>This section covers global Java EE agent properties. After creating the
   agent profile, you access these properties in the OpenAM console under
   Access Control &gt; <replaceable>Realm Name</replaceable> &gt; Agents &gt;
   Java EE &gt; <replaceable>Agent Name</replaceable> &gt; Global.</para>

  <variablelist xml:id="j2ee-agent-profile-properties">
   <title>Profile properties</title>
   <varlistentry>
    <term>Group</term>
    <listitem>
     <para>For assigning the agent to a previously configured Java EE agent group
      in order to inherit selected properties from the group.</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>Password</term>
    <listitem>
     <para>Agent password used when creating the password file and when
      installing the agent.</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>Status</term>
    <listitem>
     <para>Status of the agent configuration.</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>Agent Notification URL</term>
    <listitem>
     <para>URL used by agent to register notification listeners.</para>
     <para>Property: <literal>com.sun.identity.client.notification.url</literal></para>
     <para>Hot swap: no</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>Location of Agent Configuration Repository</term>
    <listitem>
     <para>Indicates agent's configuration located either on agent's host or
      centrally on OpenAM server.</para>
     <para>If you change this to a local configuration, you can no longer
      manage the policy agent configuration through OpenAM console.</para>
     <para>Property: <literal>com.sun.identity.agents.config.repository.location</literal></para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>Configuration Reload Interval</term>
    <listitem>
     <para>Interval in seconds to fetch agent configuration from OpenAM. Used
      if notifications are disabled. Default: 0</para>
     <para>Property: <literal>com.sun.identity.agents.config.load.interval</literal></para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>Agent Configuration Change Notification</term>
    <listitem>
     <para>Enable agent to receive notification messages from OpenAM server for
      configuration changes.</para>
     <para>Property: <literal>com.sun.identity.agents.config.change.notification.enable</literal></para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>Agent Root URL for CDSSO</term>
    <listitem>
     <para>The agent root URL for CDSSO. The valid value is in the format
      <literal><replaceable>protocol</replaceable>://<replaceable>hostname</replaceable>:<replaceable>port</replaceable>/</literal>
      where <replaceable>protocol</replaceable> represents the protocol used,
      such as <literal>http</literal> or <literal>https</literal>,
      <replaceable>hostname</replaceable> represents the host name of the
      system where the agent resides, and <replaceable>port</replaceable>
      represents the port number on which the agent is installed.
      The slash following the port number is required.</para>

     <para>If your agent system also has virtual host names, add URLs with
      the virtual host names to this list as well. OpenAM checks that
      <literal>goto</literal> URLs match one of the agent root URLs for
      CDSSO.</para>
    </listitem>
   </varlistentry>
  </variablelist>

  <variablelist xml:id="j2ee-agent-general-properties">
   <title>General properties</title>
   <varlistentry>
    <term>Agent Filter Mode</term>
    <listitem>
     <para>Specifies how the agent filters requests to protected web
      applications. The global value functions as a default, and applies for
      protected applications that do not have their own filter settings.
      Valid settings include the following.</para>
     <variablelist>
      <varlistentry>
       <term><literal>ALL</literal></term>
       <listitem>
        <para>Enforce both the Java EE policy defined for the web container where
         the protected application runs, and also OpenAM policies.</para>
        <para>When setting the filter mode to <literal>ALL</literal>, set the
         Map Key, but do not set any Corresponding Map Value.</para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><literal>J2EE_POLICY</literal></term>
       <listitem>
        <para>Enforce only the J2EE policy defined for the web container where
         the protected application runs.</para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><literal>NONE</literal></term>
       <listitem>
        <para>Do not enforce policies to protect resources. In other words,
         turn off access management. Not for use in production.</para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><literal>SSO_ONLY</literal></term>
       <listitem>
        <para>Enforce only authentication, not policies.</para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><literal>URL_POLICY</literal></term>
       <listitem>
        <para>Enforce only URL resource-based policies defined in OpenAM.</para>
        <para>When setting the filter mode to <literal>URL_POLICY</literal>,
         set the Map Key to the application name and the Corresponding Map
         Value to <literal>URL_POLICY</literal>.</para>
       </listitem>
      </varlistentry>
     </variablelist>
     <para>Property: <literal>com.sun.identity.agents.config.filter.mode</literal></para>
     <para>Hot swap: no</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>HTTP Session Binding</term>
    <listitem>
     <para>When enabled the agent invalidates the HTTP session upon login
      failure, when the user has no SSO session, or when the principal user
      name does not match the SSO user name.</para>
     <para>Property: <literal>com.sun.identity.agents.config.httpsession.binding</literal></para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>Login Attempt Limit</term>
    <listitem>
     <para>When set to a value other than zero, this defines the maximum
      number of failed login attempts allowed during a single browser session,
      after which the agent blocks requests from the user.</para>
     <para>Property: <literal>com.sun.identity.agents.config.login.attempt.limit</literal></para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>Custom Response Header</term>
    <listitem>
     <para>Specifies the custom headers the agent sets for the client. The
      key is the header name. The value is the header value.</para>
     <para>Property: <literal>com.sun.identity.agents.config.response.header</literal></para>
     <para>For example,
      <literal>com.sun.identity.agents.config.response.header[Cache-Control]=no-cache</literal>.</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>Redirect Attempt Limit</term>
    <listitem>
     <para>When set to a value other than zero, this defines the maximum number
      of redirects allowed for a single browser session, after which the agent
      blocks the request.</para>
     <para>Property: <literal>com.sun.identity.agents.config.redirect.attempt.limit</literal></para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>Agent Debug Level</term>
    <listitem>
     <para>Default is <literal>Error</literal>. Increase to
      <literal>Message</literal> for fine-grained detail.</para>
     <para>Property: <literal>com.iplanet.services.debug.level</literal></para>
    </listitem>
   </varlistentry>
  </variablelist>

  <variablelist xml:id="j2ee-user-mapping-properties">
   <title>User Mapping properties</title>
   <varlistentry>
    <term>User Mapping Mode</term>
    <listitem>
     <para>Specifies the mechanism used to determine the user ID.</para>
     <para>Property: <literal>com.sun.identity.agents.config.user.mapping.mode</literal></para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>User Attribute Name</term>
    <listitem>
     <para>Specifies the data store attribute that contains the user ID.</para>
     <para>Property: <literal>com.sun.identity.agents.config.user.attribute.name</literal></para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>User Principal Flag</term>
    <listitem>
     <para>When enabled, OpenAM uses both the principal user name and also the
      user ID for authentication.</para>
     <para>Property: <literal>com.sun.identity.agents.config.user.principal</literal></para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>User Token Name</term>
    <listitem>
     <para>Specifies the session property name for the authenticated user's
      ID. Default: <literal>UserToken</literal>.</para>
     <para>Property: <literal>com.sun.identity.agents.config.user.token</literal></para>
    </listitem>
   </varlistentry>
  </variablelist>

  <variablelist xml:id="j2ee-agent-audit-properties">
   <title>Audit properties</title>
   <varlistentry>
    <term>Audit Access Types</term>
    <listitem>
     <para>Types of messages to log based on user URL access attempts.</para>
     <para>Property: <literal>com.sun.identity.agents.config.audit.accesstype</literal></para>
     <para>Valid values for the configuration file property include
      <literal>LOG_NONE</literal>, <literal>LOG_ALLOW</literal>,
      <literal>LOG_DENY</literal>, and <literal>LOG_BOTH</literal>.</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Audit Log Location</term>
    <listitem>
     <para>Specifies where audit messages are logged. By default, audit
      messages are logged remotely.</para>
     <para>Property: <literal>com.sun.identity.agents.config.log.disposition</literal></para>
     <para>Valid values for the configuration file property include
      <literal>REMOTE</literal>, <literal>LOCAL</literal>, and
      <literal>ALL</literal>.</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Remote Log Filename</term>
    <listitem>
     <para>Name of file stored on OpenAM server that contains agent audit
      messages if log location is remote or all.</para>
     <para>Property: <literal>com.sun.identity.agents.config.remote.logfile</literal></para>
     <para>Hot swap: no</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Rotate Local Audit Log</term>
    <listitem>
     <para>When enabled, audit log files are rotated when reaching the
      specified size.</para>
     <para>Property: <literal>com.sun.identity.agents.config.local.log.rotate</literal></para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Local Audit Log Rotation Size</term>
    <listitem>
     <para>Beyond this size limit in bytes the agent rotates the local audit
      log file if rotation is enabled.</para>
     <para>Property: <literal>com.sun.identity.agents.config.local.log.size</literal></para>
     <para>Default: 50 MB</para>
    </listitem>
   </varlistentry>
  </variablelist>

  <variablelist xml:id="j2ee-agent-fqdn-properties">
   <title>Fully Qualified Domain Name Checking properties</title>
   <varlistentry>
    <term>FQDN Check</term>
    <listitem>
     <para>Enables checking of FQDN default value and FQDN map values.</para>
     <para>Property: <literal>com.sun.identity.agents.config.fqdn.check.enable</literal></para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>FQDN Default</term>
    <listitem>
     <para>Fully qualified domain name that the users should use in order to
      access resources.</para>
     <para>This property ensures that when users access protected resources
      on the web server without specifying the FQDN, the agent can redirect
      the users to URLs containing the correct FQDN.</para>
     <para>Property: <literal>com.sun.identity.agents.config.fqdn.default</literal></para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>FQDN Virtual Host Map</term>
    <listitem>
     <para>Enables virtual hosts, partial hostname and IP address to access
      protected resources. Maps invalid or virtual name keys to valid FQDN
      values so the agent can properly redirect users and the agents receive
      cookies belonging to the domain.</para>
     <para>To map <literal>myserver</literal> to
      <literal>myserver.mydomain.example</literal>, enter
      <literal>myserver</literal> in the Map Key field, and enter
      <literal>myserver.mydomain.example</literal> in the Corresponding Map Value
      field. This corresponds to
      <literal>com.sun.identity.agents.config.fqdn.mapping[myserver]= myserver.mydomain.example</literal>.</para>
     <para>Property: <literal>com.sun.identity.agents.config.fqdn.mapping</literal></para>
    </listitem>
   </varlistentry>
  </variablelist>
 </section>

 <section xml:id="configure-j2ee-pa-application-props">
  <title>Configuring Java EE policy agent Application Properties</title>

  <para>This section covers application J2EE agent properties. After creating
   the agent profile, you access these properties in the OpenAM console under
   Access Control &gt; <replaceable>Realm Name</replaceable> &gt; Agents &gt;
   J2EE &gt; <replaceable>Agent Name</replaceable> &gt; Application.</para>

  <variablelist xml:id="j2ee-agent-login-processing-properties">
   <title>Login Processing properties</title>
   <varlistentry>
    <term>Login Form URI</term>
    <listitem>
     <para>Specifies the list of absolute URIs corresponding to a protected
      application's <filename>web.xml</filename>
      <literal>form-login-page</literal> element, such as
      <literal>/myApp/jsp/login.jsp</literal>.</para>
     <para>Property: <literal>com.sun.identity.agents.config.login.form</literal></para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Login Error URI</term>
    <listitem>
     <para>Specifies the list of absolute URIs corresponding to a protected
      application's <filename>web.xml</filename>
      <literal>form-error-page</literal> element, such as
      <literal>/myApp/jsp/error.jsp</literal>.</para>
     <para>Property: <literal>com.sun.identity.agents.config.login.error.uri</literal></para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Use Internal Login</term>
    <listitem>
     <para>When enabled, the agent uses the internal default content file
      for the login.</para>
     <para>Property: <literal>com.sun.identity.agents.config.login.use.internal</literal></para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Login Content File Name</term>
    <listitem>
     <para>Full path name to the file containing custom login content when
      Use Internal Login is enabled.</para>
     <para>Property: <literal>com.sun.identity.agents.config.login.content.file</literal></para>
    </listitem>
   </varlistentry>
  </variablelist>

  <variablelist xml:id="j2ee-agent-logout-processing-properties">
   <title>Logout Processing properties</title>
   <varlistentry>
    <term>Application Logout Handler</term>
    <listitem>
     <para>Specifies how logout handlers map to specific applications. The key
      is the web application name. The value is the logout handler class.</para>
     <para>To set a global logout handler for applications without other
      logout handlers defined, leave the key empty and set the value to the
      global logout handler class name,
      <literal>GlobalApplicationLogoutHandler</literal>.</para>
     <para>To set a logout handler for a specific application, set the key
      to the name of the application, and the value to the logout handler class
      name.</para>
     <para>Property: <literal>com.sun.identity.agents.config.logout.application.handler</literal></para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Application Logout URI</term>
    <listitem>
     <para>Specifies request URIs that indicate logout events. The key is the
      web application name. The value is the application logout URI.</para>
     <para>To set a global logout URI for applications without other logout
      URIs defined, leave the key empty and set the value to the global logout
      URI, <literal>/logout.jsp</literal>.</para>
     <para>To set a logout URI for a specific application, set the key to the
      name of the application, and the value to the application logout
      page.</para>
     <para>Property: <literal>com.sun.identity.agents.config.logout.uri</literal></para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Logout Request Parameter</term>
    <listitem>
     <para>Specifies parameters in the HTTP request that indicate logout
      events. The key is the web application name. The value is the logout
      request parameter.</para>
     <para>To set a global logout request parameter for applications without
      other logout request parameters defined, leave the key empty and set the
      value to the global logout request parameter,
      <literal>logoutparam</literal>.</para>
     <para>To set a logout request parameter for a specific application, set
      the key to the name of the application, and the value to the application
      logout request parameter, such as <literal>logoutparam</literal>.</para>
     <para>Property: <literal>com.sun.identity.agents.config.logout.request.param</literal></para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Logout Introspect Enabled</term>
    <listitem>
     <para>When enabled, the agent checks the HTTP request body to locate the
      Logout Request Parameter you set.</para>
     <para>Property: <literal>com.sun.identity.agents.config.logout.introspect.enabled</literal></para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Logout Entry URI</term>
    <listitem>
     <para>Specifies the URIs to return after successful logout and subsequent
      authentication. The key is the web application name. The value is the
      URI to return.</para>
     <para>To set a global logout entry URI for applications without other
      logout entry URIs defined, leave the key empty and set the value to the
      global logout entry URI, <literal>/welcome.html</literal>.</para>
     <para>To set a logout entry URI for a specific application, set the key
      to the name of the application, and the value to the application
      logout entry URI, such as <literal>/myApp/welcome.html</literal>.</para>
     <para>Property: <literal>com.sun.identity.agents.config.logout.entry.uri</literal></para>
    </listitem>
   </varlistentry>
  </variablelist>

  <variablelist xml:id="j2ee-agent-access-denied-uri-processing-properties">
   <title>Access Denied URI Processing properties</title>
   <varlistentry>
    <term>Resource Access Denied URI</term>
    <listitem>
     <para>Specifies the URIs of custom pages to return when access is denied.
      The key is the web application name. The value is the custom URI.</para>
     <para>To set a global custom access denied URI for applications without
      other custom access denied URIs defined, leave the key empty and set the
      value to the global custom access denied URI,
      <literal>/sample/accessdenied.html</literal>.</para>
     <para>To set a custom access denied URI for a specific application, set
      the key to the name of the application, and the value to the application
      access denied URI, such as <literal>/myApp/accessdenied.html</literal>.</para>
     <para>Property: <literal>com.sun.identity.agents.config.access.denied.uri</literal></para>
    </listitem>
   </varlistentry>
  </variablelist>

  <variablelist xml:id="j2ee-agent-not-enforced-uri-properties">
   <title>Not Enforced URI Processing properties</title>
   <varlistentry>
    <term>Not Enforced URIs</term>
    <listitem>
     <para>List of URIs for which no authentication is required, and the agent
      does not protect access. You can use wildcards to define a pattern for a
      URI.</para>
     <para>The <literal>*</literal> wildcard matches all characters except
      question mark (<literal>?</literal>), cannot be escaped, and spans
      multiple levels in a URI. Multiple forward slashes do not match a
      single forward slash, so <literal>*</literal> matches
      <literal>mult/iple/dirs</literal>, yet <literal>mult/*/dirs</literal>
      does not match <literal>mult/dirs</literal>.</para>
     <para>The <literal>-*-</literal> wildcard matches all characters except
      forward slash (<literal>/</literal>) or question mark
      (<literal>?</literal>), and cannot be escaped. As it does not match
      <literal>/</literal>, <literal>-*-</literal> does not span multiple
      levels in a URI.</para>
     <para>OpenAM does not let you mix <literal>*</literal> and
      <literal>-*-</literal> in the same URI.</para>
     <para>Examples include <literal>/logout.html</literal>,
      <literal>/images/*</literal>, <literal>/css/-*-</literal>, and
      <literal>/*.jsp?locale=*</literal>.</para>
     <para>Trailing forward slashes are not recognized as part of a resource
      name. Therefore <literal>/images//</literal> and
      <literal>/images</literal> are equivalent.</para>
     <para>Property: <literal>com.sun.identity.agents.config.notenforced.uri</literal></para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Invert Not Enforced URIs</term>
    <listitem>
     <para>Only enforce not enforced list of URIs. In other words, enforce
      policy only for those URIs and patterns specified in the list.</para>
     <para>Property: <literal>com.sun.identity.agents.config.notenforced.uri.invert</literal></para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Not Enforced URIs Cache Enabled</term>
    <listitem>
     <para>When enabled, the agent caches evaluation of the not enforced URI
      list.</para>
     <para>Property: <literal>com.sun.identity.agents.config.notenforced.uri.cache.enable</literal></para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Not Enforced URIs Cache Size</term>
    <listitem>
     <para>When caching is enabled, this limits the number of not enforced
      URIs cached.</para>
     <para>Property: <literal>com.sun.identity.agents.config.notenforced.uri.cache.size</literal></para>
     <para>Default: 1000</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Refresh Session Idle Time</term>
    <listitem>
     <para>When enabled, the agent reset the session idle time when granting
      access to a not enforced URI, prolonging the time before the user must
      authenticate again.</para>
     <para>Property: <literal>com.sun.identity.agents.config.notenforced.refresh.session.idletime</literal></para>
    </listitem>
   </varlistentry>
  </variablelist>

  <variablelist xml:id="j2ee-agent-not-enforced-ip-properties">
   <title>Not Enforced IP Processing properties</title>
   <varlistentry>
    <term>Not Enforced Client IP List</term>
    <listitem>
     <para>No authentication and authorization are required for the requests
      coming from these client IP addresses.</para>
     <para>Property: <literal>com.sun.identity.agents.config.notenforced.ip</literal></para>
     <note>
      <para>
       Loopback addresses are not considered valid IPs on the Not Enforced IP list.
       If specified, the policy agent ignores the loopback address.
      </para>
     </note>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Not Enforced IP Invert List</term>
    <listitem>
     <para>Only enforce the not enforced list of IP addresses. In other words,
      enforce policy only for those client addresses and patterns specified in
      the list.</para>
     <para>Property: <literal>com.sun.identity.agents.config.notenforced.ip.invert</literal></para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Not Enforced IP Cache Flag</term>
    <listitem>
     <para>When enabled, the agent caches evaluation of the not enforced IP
      list.</para>
     <para>Property: <literal>com.sun.identity.agents.config.notenforced.ip.cache.enable</literal></para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Not Enforced IP Cache Size</term>
    <listitem>
     <para>When caching is enabled, this limits the number of not enforced
      addresses cached.</para>
     <para>Property: <literal>com.sun.identity.agents.config.notenforced.ip.cache.size</literal></para>
     <para>Default: 1000</para>
    </listitem>
   </varlistentry>
  </variablelist>

  <variablelist xml:id="j2ee-agent-profile-attributes-processing-properties">
   <title>Profile Attributes Processing properties</title>
   <varlistentry>
    <term>Profile Attribute Fetch Mode</term>
    <listitem>
     <para>When set to <literal>HTTP_COOKIE</literal> or
      <literal>HTTP_HEADER</literal>, profile attributes are introduced into
      the cookie or the headers, respectively. When set to
      <literal>REQUEST_ATTRIBUTE</literal>, profile attributes are part
      of the HTTP request.</para>
     <para>Property: <literal>com.sun.identity.agents.config.profile.attribute.fetch.mode</literal></para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Profile Attribute Map</term>
    <listitem>
     <para>Maps the profile attributes to HTTP headers for the currently
      authenticated user. Map Keys are attribute names, and Map Values
      are HTTP header names. The user profile can be stored in LDAP or any
      other arbitrary data store.
     </para>
     <para>To populate the value of profile attribute CN under
      <literal>CUSTOM-Common-Name</literal>: enter CN in the Map Key field,
      and enter <literal>CUSTOM-Common-Name</literal> in the Corresponding
      Map Value field. This corresponds to
      <literal>com.sun.identity.agents.config.profile.attribute.mapping[cn]=CUSTOM-Common-Name</literal>.</para>
     <para>In most cases, in a destination application where an HTTP header
      name shows up as a request header, it is prefixed by
      <literal>HTTP_</literal>, lower case letters become upper case, and
      hyphens (<literal>-</literal>) become underscores (<literal>_</literal>).
      For example, <literal>common-name</literal> becomes
      <literal>HTTP_COMMON_NAME</literal>.</para>
     <para>Property: <literal>com.sun.identity.agents.config.profile.attribute.mapping</literal></para>
    </listitem>
   </varlistentry>
  </variablelist>

  <variablelist xml:id="j2ee-agent-response-attributes-processing-properties">
   <title>Response Attributes Processing properties</title>
   <varlistentry>
    <term>Response Attribute Fetch Mode</term>
    <listitem>
     <para>When set to <literal>HTTP_COOKIE</literal> or
      <literal>HTTP_HEADER</literal>, response attributes are introduced into
      the cookie or the headers, respectively. When set to
      <literal>REQUEST_ATTRIBUTE</literal>, response attributes are part
      of the HTTP request.</para>
     <para>Property: <literal>com.sun.identity.agents.config.response.attribute.fetch.mode</literal></para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Response Attribute Map</term>
    <listitem>
     <para>Maps the policy response attributes to HTTP headers for the
      currently authenticated user. The response attribute is
      the attribute in the policy response to be fetched.</para>
     <para>To populate the value of response attribute <literal>uid</literal>
      under <literal>CUSTOM-User-Name</literal>: enter <literal>uid</literal>
      in the Map Key field, and enter <literal>CUSTOM-User-Name</literal> in
      the Corresponding Map Value field. This corresponds to
      <literal>com.sun.identity.agents.config.response.attribute.mapping[uid]=Custom-User-Name</literal>.</para>
     <para>In most cases, in a destination application where an HTTP header
      name shows up as a request header, it is prefixed by
      <literal>HTTP_</literal>, lower case letters become upper case, and
      hyphens (<literal>-</literal>) become underscores (<literal>_</literal>).
      For example, <literal>response-attr-one</literal> becomes
      <literal>HTTP_RESPONSE_ATTR_ONE</literal>.</para>
     <para>Property: <literal>com.sun.identity.agents.config.response.attribute.mapping</literal></para>
    </listitem>
   </varlistentry>
  </variablelist>

  <variablelist xml:id="j2ee-agent-common-attributes-fetching-properties">
   <title>Common Attributes Fetching Processing properties</title>
   <varlistentry>
    <term>Cookie Separator Character</term>
    <listitem>
     <para>Specifies the separator for multiple values of the same attribute
      when it is set as a cookie. Default: <literal>|</literal> (also known as the vertical bar character).</para>
     <para>Property: <literal>com.sun.identity.agents.config.attribute.cookie.separator</literal></para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Fetch Attribute Date Format</term>
    <listitem>
     <para>Specifies the <literal>java.text.SimpleDateFormat</literal> of date
      attribute values used when an attribute is set in an HTTP header. Default:
      <literal>EEE, d MMM yyyy hh:mm:ss z</literal>.</para>
     <para>Property: <literal>com.sun.identity.agents.config.attribute.date.format</literal></para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Attribute Cookie Encode</term>
    <listitem>
     <para>When enabled, attribute values are URL encoded before being set as
      a cookie.</para>
     <para>Property: <literal>com.sun.identity.agents.config.attribute.cookie.encode</literal></para>
    </listitem>
   </varlistentry>
  </variablelist>

  <variablelist xml:id="j2ee-agent-session-attributes-processing-properties">
   <title>Session Attributes Processing properties</title>
   <varlistentry>
    <term>Session Attribute Fetch Mode</term>
    <listitem>
     <para>When set to <literal>HTTP_COOKIE</literal> or
      <literal>HTTP_HEADER</literal>, session attributes are introduced into the
      cookie or the headers, respectively. When set to
      <literal>REQUEST_ATTRIBUTE</literal>, session attributes are part
      of the HTTP request.</para>
     <para>Property: <literal>com.sun.identity.agents.config.session.attribute.fetch.mode</literal></para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Session Attribute Map</term>
    <listitem>
     <para>Maps session attributes to HTTP headers for the currently
      authenticated user. The session attribute is the attribute in the session
      to be fetched.</para>
     <para>To populate the value of session attribute
      <literal>UserToken</literal> under <literal>CUSTOM-userid</literal>:
      enter <literal>UserToken</literal> in the Map Key field, and enter
      <literal>CUSTOM-userid</literal> in
      the Corresponding Map Value field. This corresponds to
      <literal>com.sun.identity.agents.config.session.attribute.mapping[UserToken]=CUSTOM-userid</literal>.</para>
     <para>In most cases, in a destination application where an HTTP header
      name shows up as a request header, it is prefixed by
      <literal>HTTP_</literal>, lower case letters become upper case, and
      hyphens (<literal>-</literal>) become underscores (<literal>_</literal>).
      For example, <literal>success-url</literal> becomes
      <literal>HTTP_SUCCESS_URL</literal>.</para>
     <para>Property: <literal>com.sun.identity.agents.config.session.attribute.mapping</literal></para>
    </listitem>
   </varlistentry>
  </variablelist>

  <variablelist xml:id="j2ee-agent-privilege-attributes-properties">
   <title>Privilege Attributes Processing properties</title>
   <para>Privileged attributes are sued when the agent is running in
    <literal>ALL</literal> or <literal>J2EE_POLICY</literal> filter mode.
    Privileged attributes contain the list of declarative Java EE roles that the
    user can have.
   </para>

   <varlistentry>
    <term>Default Privileged Attribute</term>
    <listitem>
     <para>Specifies that every authenticated user
      with a valid OpenAM session will have the
      <literal>AUTHENTICATED_USERS</literal> role.</para>
     <para>Property: <literal>com.sun.identity.agents.config.default.privileged.attribute</literal></para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>Privileged Attribute Type</term>
    <listitem>
     <para>Specifies the group and role memberships that will be turned into roles for each
      user.</para>
     <para>Property: <literal>com.sun.identity.agents.config.privileged.attribute.type</literal></para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>Privileged Attributes To Lower Case</term>
    <listitem>
     <para>Specifies how privileged attribute types should be converted to
      lower case.</para>
     <para>Property: <literal>com.sun.identity.agents.config.privileged.attribute.tolowercase</literal></para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>Privileged Session Attribute</term>
    <listitem>
     <para>Specifies the list of session property names when an authenticated
      user's roles are store within a session property.
     </para>
     <para>Property: <literal>com.sun.identity.agents.config.privileged.session.attribute</literal></para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Enable Privileged Attribute Mapping</term>
    <listitem>
     <para>When enabled, lets you use Privileged Attribute Mapping.</para>
     <para>Property: <literal>com.sun.identity.agents.config.privileged.attribute.mapping.enable</literal></para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Privileged Attribute Mapping</term>
    <listitem>
     <para>OpenAM allows original attribute values to be mapped to other
      values. For example, you can map UUIDs to principal names in roles
      specified in a web application's deployment descriptor. For example, to
      map the UUID <literal>id=employee,ou=group,o=openam</literal> to the
      principal name <literal>am_employee_role</literal> in the deployment
      descriptor, set the key to
      <literal>id=employee,ou=group,o=openam</literal>, and the value to
      <literal>am_employee_role</literal>.</para>
     <para>Property: <literal>com.sun.identity.agents.config.privileged.attribute.mapping</literal></para>
    </listitem>
   </varlistentry>
  </variablelist>

  <variablelist xml:id="j2ee-agent-custom-authentication-properties">
   <title>Custom Authentication Processing properties</title>
   <varlistentry>
    <term>Custom Authentication Handler</term>
    <listitem>
     <para>Specifies custom authentication handler classes for users
      authenticated with the application server. The key is the web application
      name and the value is the authentication handler class name.</para>
     <para>Property: <literal>com.sun.identity.agents.config.auth.handler</literal></para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Custom Logout Handler</term>
    <listitem>
     <para>Specifies custom logout handler classes to log users out of the
      application server. The key is the web application name and the value is
      the logout handler class name.</para>
     <para>Property: <literal>com.sun.identity.agents.config.logout.handler</literal></para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Custom Verification Handler</term>
    <listitem>
     <para>Specifies custom verification classes to validate user credentials
      with the local user repository. The key is the web application name and
      the value is the validation handler class name.</para>
     <para>Property: <literal>com.sun.identity.agents.config.verification.handler</literal></para>
    </listitem>
   </varlistentry>
  </variablelist>
 </section>

 <section xml:id="configure-j2ee-pa-sso-props">
  <title>Configuring Java EE policy agent SSO Properties</title>

  <para>This section covers SSO J2EE agent properties. After creating the
   agent profile, you access these properties in the OpenAM console under
   Access Control &gt; <replaceable>Realm Name</replaceable> &gt; Agents &gt;
   J2EE &gt; <replaceable>Agent Name</replaceable> &gt; SSO</para>

  <variablelist xml:id="j2ee-agent-cookie-properties">
   <title>Cookie properties</title>
   <varlistentry>
    <term>Cookie Name</term>
    <listitem>
     <para>Name of the SSO Token cookie used between the OpenAM server and
      the agent. Default: <literal>iPlanetDirectoryPro</literal>.</para>
     <para>Property: <literal>com.iplanet.am.cookie.name</literal></para>
     <para>Hot swap: no</para>
    </listitem>
   </varlistentry>
  </variablelist>

  <variablelist xml:id="j2ee-agent-caching-properties">
   <title>Caching properties</title>
   <varlistentry>
    <term>SSO Cache Enable</term>
    <listitem>
     <para>When enabled, the agent exposes SSO Cache through the agent SDK
      APIs.</para>
     <para>Property: <literal>com.sun.identity.agents.config.amsso.cache.enable</literal></para>
    </listitem>
   </varlistentry>
  </variablelist>

  <variablelist xml:id="j2ee-agent-cdsso-properties">
   <title>Cross Domain SSO properties</title>
   <varlistentry>
    <term>Cross Domain SSO</term>
    <listitem>
     <para>Enables Cross Domain Single Sign On.</para>
     <para>Property: <literal>com.sun.identity.agents.config.cdsso.enable</literal></para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>CDSSO Redirect URI</term>
    <listitem>
     <para>Specifies a URI the agent uses to process CDSSO requests.</para>
     <para>Property: <literal>com.sun.identity.agents.config.cdsso.redirect.uri</literal></para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>CDSSO Servlet URL</term>
    <listitem>
     <para>List of URLs of the available CDSSO controllers that the agent can
      use for CDSSO processing. For example,
      <literal>http://openam.example.com:8080/openam/cdcservlet</literal>.</para>
     <para>Property: <literal>com.sun.identity.agents.config.cdsso.cdcservlet.url</literal></para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>CDSSO Clock Skew</term>
    <listitem>
     <para>When set to a value other than zero, specifies the clock skew in
      seconds that the agent accepts when determining the validity of the CDSSO
      authentication response assertion.</para>
     <para>Property: <literal>com.sun.identity.agents.config.cdsso.clock.skew</literal></para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>CDSSO Trusted ID Provider</term>
    <listitem>
     <para>Specifies the list of OpenAM servers or identity providers the
      agent trusts when evaluating CDC Liberty Responses.</para>
     <para>Property: <literal>com.sun.identity.agents.config.cdsso.trusted.id.provider</literal></para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>CDSSO Secure Enable</term>
    <listitem>
     <para>When enabled, the agent marks the SSO Token cookie as secure, thus
      the cookie is only transmitted over secure connections.</para>
     <para>Property: <literal>com.sun.identity.agents.config.cdsso.secure.enable</literal></para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>CDSSO Domain List</term>
    <listitem>
     <para>List of domains, such as <literal>.example.com</literal>, in which
      cookies have to be set in CDSSO.</para>
     <para>Property: <literal>com.sun.identity.agents.config.cdsso.domain</literal></para>
    </listitem>
   </varlistentry>
  </variablelist>

  <variablelist xml:id="j2ee-agent-cookie-reset-properties">
   <title>Cookie Reset properties</title>
   <varlistentry>
    <term>Cookie Reset</term>
    <listitem>
     <para>When enabled, agent resets cookies in the response before
      redirecting to authentication.</para>
     <para>Property: <literal>com.sun.identity.agents.config.cookie.reset.enable</literal></para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Cookie Reset Name List</term>
    <listitem>
     <para>List of cookies to reset if Cookie Reset is enabled.</para>
     <para>Property: <literal>com.sun.identity.agents.config.cookie.reset.name</literal></para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Cookie Reset Domain Map</term>
    <listitem>
     <para>Specifies how names from the Cookie Reset Name List correspond to
      cookie domain values when the cookie is reset.</para>
     <para>Property: <literal>com.sun.identity.agents.config.cookie.reset.domain</literal></para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Cookie Reset Path Map</term>
    <listitem>
     <para>Specifies how names from the Cookie Reset Name List correspond to
      cookie paths when the cookie is reset.</para>
     <para>Property: <literal>com.sun.identity.agents.config.cookie.reset.path</literal></para>
    </listitem>
   </varlistentry>
  </variablelist>
 </section>

 <section xml:id="configure-j2ee-pa-services-props">
  <title>Configuring Java EE policy agent OpenAM Services Properties</title>

  <para>This section covers OpenAM services J2EE agent properties. After
   creating the agent profile, you access these properties in the OpenAM console
   under Access Control &gt; <replaceable>Realm Name</replaceable> &gt;
   Agents &gt; J2EE &gt; <replaceable>Agent Name</replaceable> &gt; OpenAM
   Services.</para>

  <variablelist xml:id="j2ee-agent-login-url-properties">
   <title>Login URL properties</title>
   <varlistentry>
    <term>OpenAM Login URL</term>
    <listitem>
     <para>OpenAM login page URL, such as
      <literal>http://openam.example.com:8080/openam/UI/Login</literal>, to
      which the agent redirects incoming users without sufficient credentials
      so that they can authenticate.
      If CDSSO is enabled, this property is not used, instead the CDCServlet URL
      will be used.
     </para>
     <para>Property: <literal>com.sun.identity.agents.config.login.url</literal></para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>OpenAM Conditional Login URL (Not yet in OpenAM console)</term>

    <xinclude:include href="../shared/listitem-conditional-login-url-jee.xml" />

   </varlistentry>
   <varlistentry>
    <term>Login URL Prioritized</term>
    <listitem>
     <para>When enabled, OpenAM uses the priority defined in the OpenAM Login
      URL list as the priority for Login and CDSSO URLs when handling
      failover.</para>
     <para>Property: <literal>com.sun.identity.agents.config.login.url.prioritized</literal></para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Login URL Probe</term>
    <listitem>
     <para>When enabled, OpenAM checks the availability of OpenAM Login URLs
      before redirecting to them.</para>
     <para>Property: <literal>com.sun.identity.agents.config.login.url.probe.enabled</literal></para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Login URL Probe Timeout</term>
    <listitem>
     <para>Timeout period in milliseconds for OpenAM to determine whether
      to failover between Login URLs when Login URL Probe is enabled.</para>
     <para>Property: <literal>com.sun.identity.agents.config.login.url.probe.timeout</literal></para>
     <para>Default: 2000</para>
    </listitem>
   </varlistentry>
  </variablelist>

  <variablelist xml:id="j2ee-agent-logout-url-properties">
   <title>Logout URL properties</title>
   <varlistentry>
    <term>OpenAM Logout URL</term>
    <listitem>
     <para>OpenAM logout page URLs, such as
      <literal>http://openam.example.com:8080/openam/UI/Logout</literal>. The
      user is logged out of the OpenAM session when accessing these URLs.</para>
     <para>Property: <literal>com.sun.identity.agents.config.logout.url</literal></para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>OpenAM Conditional Logout URL (Not yet in OpenAM console)</term>
    <listitem>
     <para>The values take the incoming request URL to match and a
      comma-separated list of URLs to which to redirect users logging
      out.</para>
     <para>Property: <literal>com.sun.identity.agents.config.conditional.logout.url</literal></para>
     <para>Example: <literal>com.sun.identity.agents.config.conditional.logout.url[0]=
      logout.example.com|http://openam1.example.com/openam/UI/Logout,
      http://openam2.example.com/openam/UI/Logout</literal></para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Logout URL Prioritized</term>
    <listitem>
     <para>When enabled, OpenAM uses the priority defined in the OpenAM Logout
      URL list as the priority for Logout URLs when handling failover.</para>
     <para>Property: <literal>com.sun.identity.agents.config.logout.url.prioritized</literal></para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Logout URL Probe</term>
    <listitem>
     <para>When enabled, OpenAM checks the availability of OpenAM Logout URLs
      before redirecting to them.</para>
     <para>Property: <literal>com.sun.identity.agents.config.logout.url.probe.enabled</literal></para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Logout URL Probe Timeout</term>
    <listitem>
     <para>Timeout period in milliseconds for OpenAM to determine whether
      to failover between Logout URLs when Logout URL Probe is enabled.</para>
     <para>Property: <literal>com.sun.identity.agents.config.logout.url.probe.timeout</literal></para>
     <para>Default: 2000</para>
    </listitem>
   </varlistentry>
  </variablelist>

  <variablelist xml:id="j2ee-agent-agent-authn-service-properties">
   <title>Authentication Service properties</title>
   <varlistentry>
    <term>OpenAM Authentication Service Protocol</term>
    <listitem>
     <para>Specifies the protocol used by the OpenAM authentication
      service.</para>
     <para>Property: <literal>com.iplanet.am.server.protocol</literal></para>
     <para>Hot swap: no</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>OpenAM Authentication Service Host Name</term>
    <listitem>
     <para>Specifies the OpenAM authentication service host name.</para>
     <para>Property: <literal>com.iplanet.am.server.host</literal></para>
     <para>Hot swap: no</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>OpenAM Authentication Service Port</term>
    <listitem>
     <para>Specifies the OpenAM authentication service port number.</para>
     <para>Property: <literal>com.iplanet.am.server.port</literal></para>
     <para>Hot swap: no</para>
    </listitem>
   </varlistentry>
  </variablelist>

  <variablelist xml:id="j2ee-agent-policy-client-service-properties">
   <title>Policy Client Service properties</title>
   <varlistentry>
    <term>Enable Policy Notifications</term>
    <listitem>
     <para>When enabled, OpenAM sends notification about changes to policy.</para>
     <para>Property: <literal>com.sun.identity.agents.notification.enabled</literal></para>
     <para>Hot swap: no</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Policy Client Polling Interval</term>
    <listitem>
     <para>Specifies the time in minutes after which the policy cache is
      refreshed.</para>
     <para>Property: <literal>com.sun.identity.agents.polling.interval</literal></para>
     <para>Default: 3</para>
     <para>Hot swap: no</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Policy Client Cache Mode</term>
    <listitem>
     <para>Set to cache mode subtree when only a small number of policy rules
      are defined. For large numbers of policy rules, set to self.</para>
     <para>Property: <literal>com.sun.identity.policy.client.cacheMode</literal></para>
     <para>Default: self</para>
     <para>Hot swap: no</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Policy Client Boolean Action Values</term>
    <listitem>
     <para>Specifies the values, such as <literal>allow</literal> and
      <literal>deny</literal>, that are associated with boolean policy
      decisions. The string is presented below in multiple lines for readability
      purposes.
     </para>
     <para>Default: <literal>iPlanetAMWebAgentService|GET|allow|deny:
      iPlanetAMWebAgentService|POST|allow|deny:
      iPlanetAMWebAgentService|PUT|allow|deny:
      iPlanetAMWebAgentService|DELETE|allow|deny:
      iPlanetAMWebAgentService|HEAD|allow|deny:
      iPlanetAMWebAgentService|OPTIONS|allow|deny:
      iPlanetAMWebAgentService|PATCH|allow|deny</literal></para>
     <para>Property: <literal>com.sun.identity.policy.client.booleanActionValues</literal></para>
     <para>Hot swap: no</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Policy Client Resource Comparators</term>
    <listitem>
     <para>Specifies the comparators used for service names in policy.</para>
     <para>Default: <literal>serviceType=iPlanetAMWebAgentService|
      class=com.sun.identity.policy.plugins.HttpURLResourceName|wildcard=*|
      delimiter=/|caseSensitive=false</literal></para>
     <para>Property: <literal>com.sun.identity.policy.client.resourceComparators</literal></para>
     <para>Hot swap: no</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Policy Client Clock Skew</term>
    <listitem>
     <para>Time in seconds used to adjust time difference between agent system
      and OpenAM. Clock skew in seconds = AgentTime - OpenAMServerTime.</para>
     <para>Default: 10.</para>
     <para>Property: <literal>com.sun.identity.policy.client.clockSkew</literal></para>
     <para>Hot swap: no</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>URL Policy Env GET Parameters</term>
    <listitem>
     <para>Specifies the list of HTTP GET request parameters whose names and
      values the agents sets in the environment map for URL policy evaluation
      by the OpenAM server.</para>
     <para>Property: <literal>com.sun.identity.agents.config.policy.env.get.param</literal></para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>URL Policy Env POST Parameters</term>
    <listitem>
     <para>Specifies the list of HTTP POST request parameters whose names and
      values the agents sets in the environment map for URL policy evaluation
      by the OpenAM server.</para>
     <para>Property: <literal>com.sun.identity.agents.config.policy.env.post.param</literal></para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>URL Policy Env jsession Parameters</term>
    <listitem>
     <para>Specifies the list of HTTP session attributes whose names and
      values the agents sets in the environment map for URL policy evaluation
      by the OpenAM server.</para>
     <para>Property: <literal>com.sun.identity.agents.config.policy.env.jsession.param</literal></para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Use HTTP-Redirect for composite advice</term>
    <listitem>
     <para>When enabled, the remote policy client is configured to use
      HTTP-Redirect instead of HTTP-POST for composite advice.</para>
     <para>Property: <literal>com.sun.identity.agents.config.policy.advice.use.redirect</literal></para>
    </listitem>
   </varlistentry>
  </variablelist>

  <variablelist xml:id="j2ee-agent-user-data-cache-service-properties">
   <title>User Data Cache Service properties</title>
   <varlistentry>
    <term>Enable Notification of User Data Caches</term>
    <listitem>
     <para>When enabled, receive notification from OpenAM to update user
      management data caches.</para>
     <para>Property: <literal>com.sun.identity.idm.remote.notification.enabled</literal></para>
     <para>Hot swap: no</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>User Data Cache Polling Time</term>
    <listitem>
     <para>If notifications are not enabled and set to a value other than zero,
      specifies the time in minutes after which the agent polls to update
      cached user management data.</para>
     <para>Property: <literal>com.iplanet.am.sdk.remote.pollingTime</literal></para>
     <para>Default: 1</para>
     <para>Hot swap: no</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Enable Notification of Service Data Caches</term>
    <listitem>
     <para>When enabled, receive notification from OpenAM to update service
      configuration data caches.</para>
     <para>Property: <literal>com.sun.identity.sm.notification.enabled</literal></para>
     <para>Hot swap: no</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Service Data Cache Time</term>
    <listitem>
     <para>If notifications are not enabled and set to a value other than zero,
      specifies the time in minutes after which the agent polls to update
      cached service configuration data.</para>
     <para>Property: <literal>com.sun.identity.sm.cacheTime</literal></para>
     <para>Default: 1</para>
     <para>Hot swap: no</para>
    </listitem>
   </varlistentry>
  </variablelist>

  <variablelist xml:id="j2ee-agent-session-client-service-properties">
   <title>Session Client Service properties</title>
   <varlistentry>
    <term>Enable Client Polling</term>
    <listitem>
     <para>When enabled, the session client polls to update the session cache
      rather than relying on notifications from OpenAM.</para>
     <para>Property: <literal>com.iplanet.am.session.client.polling.enable</literal></para>
     <para>Hot swap: no</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Client Polling Period</term>
    <listitem>
     <para>Specifies the time in seconds after which the session client
      requests an update from OpenAM for cached session information.</para>
     <para>Property: <literal>com.iplanet.am.session.client.polling.period</literal></para>
     <para>Default: 180</para>
     <para>Hot swap: no</para>
    </listitem>
   </varlistentry>
  </variablelist>
 </section>

 <section xml:id="configure-j2ee-pa-misc-props">
  <title>Configuring Java EE policy agent Miscellaneous Properties</title>

  <para>This section covers miscellaneous J2EE agent properties. After creating
   the agent profile, you access these properties in the OpenAM console under
   Access Control &gt; <replaceable>Realm Name</replaceable> &gt; Agents &gt;
   J2EE &gt; <replaceable>Agent Name</replaceable> &gt; Miscellaneous.</para>

  <variablelist xml:id="j2ee-agent-locale-properties">
   <title>Locale properties</title>
   <varlistentry>
    <term>Locale Language</term>
    <listitem>
     <para>The default language for the agent.</para>
     <para>Property: <literal>com.sun.identity.agents.config.locale.language</literal></para>
     <para>Hot swap: no</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Locale Country</term>
    <listitem>
     <para>The default country for the agent.</para>
     <para>Property: <literal>com.sun.identity.agents.config.locale.country</literal></para>
     <para>Hot swap: no</para>
    </listitem>
   </varlistentry>
  </variablelist>

  <variablelist xml:id="j2ee-agent-port-check-properties">
   <title>Port Check Processing properties</title>
   <varlistentry>
    <term>Port Check Enable</term>
    <listitem>
     <para>When enabled, activate port checking, correcting requests on the
      wrong port.</para>
     <para>Property: <literal>com.sun.identity.agents.config.port.check.enable</literal></para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Port Check File</term>
    <listitem>
     <para>Specifies the name of the file containing the content to handle
      requests on the wrong port when port checking is enabled.</para>
     <para>Property: <literal>com.sun.identity.agents.config.port.check.file</literal></para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Port Check Setting</term>
    <listitem>
     <para>Specifies which ports correspond to which protocols. The agent uses
      the map when handling requests with invalid port numbers during port
      checking.</para>
     <para>Property: <literal>com.sun.identity.agents.config.port.check.setting</literal></para>
    </listitem>
   </varlistentry>
  </variablelist>

  <variablelist xml:id="j2ee-agent-bypass-principal-list-properties">
   <title>Bypass Principal List properties</title>
   <varlistentry>
    <term>Bypass Principal List</term>
    <listitem>
     <para>Specifies a list of principals the agent bypasses for
      authentication and search purposes, such as <literal>guest</literal>
      or <literal>testuser</literal>.</para>
     <para>Property: <literal>com.sun.identity.agents.config.bypass.principal</literal></para>
    </listitem>
   </varlistentry>
  </variablelist>

  <variablelist xml:id="j2ee-agent-password-encryptor-properties">
   <title>Agent Password Encryptor properties</title>
   <varlistentry>
    <term>Encryption Provider</term>
    <listitem>
     <para>Specifies the agent's encryption provider class.</para>
     <para>Default: <literal>com.iplanet.services.util.JCEEncryption</literal></para>
     <para>Property: <literal>com.iplanet.security.encryptor</literal></para>
     <para>Hot swap: no</para>
    </listitem>
   </varlistentry>
  </variablelist>

  <variablelist xml:id="j2ee-agent-ignore-path-info-properties">
   <title>Ignore Path Info properties</title>
   <varlistentry>
    <term>Ignore Path Info in Request URL</term>
    <listitem>
     <para>When enabled, strip path info from the request URL while doing the
      Not Enforced List check, and URL policy evaluation. This is designed
      to prevent a user from accessing a URI by appending the matching pattern
      in the policy or not enforced list.</para>
     <para>For example, if the not enforced list includes
      <literal>/*.gif</literal>, then stripping path info from the request URL
      prevents access to <literal>http://host/index.html</literal> by using
      <literal>http://host/index.html?hack.gif</literal>.</para>
     <para>Property: <literal>com.sun.identity.agents.config.ignore.path.info</literal></para>
    </listitem>
   </varlistentry>
  </variablelist>

  <variablelist xml:id="j2ee-agent-deprecated-properties">
   <title>Deprecated Client Browser User Agent Properties</title>
   <varlistentry>
    <term>Goto Parameter Name</term>
    <listitem>
     <para>Property used only when CDSSO is enabled. Only change the default
      value, <literal>goto</literal> when the login URL has a landing page
      specified such as,
      <literal>com.sun.identity.agents.config.cdsso.cdcservlet.url
       = http://openam.example.com:8080/openam/cdcservlet?goto=
       http://www.example.com/landing.jsp</literal>.
      The agent uses this parameter to append the original request URL
      to this cdcservlet URL. The landing page consumes this parameter to
      redirect to the original URL.</para>
     <para>As an example, if you set this value to <literal>goto2</literal>,
      then the complete URL sent for authentication is
      <literal>http://openam.example.com:8080/openam/cdcservlet?goto=
       http://www.example.com/landing.jsp?goto2=http://www.example.com/original.jsp</literal>.</para>
     <para>Property: <literal>com.sun.identity.agents.config.redirect.param</literal></para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Legacy User Agent Support Enable</term>
    <listitem>
     <para>When enabled, provide support for legacy browsers.</para>
     <para>Property: <literal>com.sun.identity.agents.config.legacy.support.enable</literal></para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Legacy User Agent List</term>
    <listitem>
     <para>List of header values that identify legacy browsers. Entries can
      use the wildcard character, <literal>*</literal>.</para>
     <para>Property: <literal>com.sun.identity.agents.config.legacy.user.agent</literal></para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Legacy User Agent Redirect URI</term>
    <listitem>
     <para>Specifies a URI the agent uses to redirect legacy user agent
      requests.</para>
     <para>Property: <literal>com.sun.identity.agents.config.legacy.redirect.uri</literal></para>
    </listitem>
   </varlistentry>
  </variablelist>
 </section>

 <section xml:id="configure-j2ee-pa-advanced-props">
  <title>Configuring Java EE policy agent Advanced Properties</title>

  <para>This section covers advanced J2EE agent properties. After creating the
   agent profile, you access these properties in the OpenAM console under
   Access Control &gt; <replaceable>Realm Name</replaceable> &gt; Agents &gt;
   J2EE &gt; <replaceable>Agent Name</replaceable> &gt; Advanced.</para>

  <variablelist xml:id="j2ee-agent-client-identification-properties">
   <title>Client Identification properties</title>
   <para>If the agent is behind a proxy or load balancer, then the agent can
    get client IP and host name values from the proxy or load balancer. For
    proxies and load balancer that support providing the client IP and host
    name in HTTP headers, you can use the following properties.</para>
   <para>When multiple proxies or load balancers sit in the request path,
    the header values can include a comma-separated list of values with the
    first value representing the client, as in
    <literal>client,next-proxy,first-proxy</literal>.</para>
   <varlistentry>
    <term>Client IP Address Header</term>
    <listitem>
     <para>HTTP header name that holds the IP address of the client.</para>
     <para>Property: <literal>com.sun.identity.agents.config.client.ip.header</literal></para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Client Hostname Header</term>
    <listitem>
     <para>HTTP header name that holds the hostname of the client.</para>
     <para>Property: <literal>com.sun.identity.agents.config.client.hostname.header</literal></para>
    </listitem>
   </varlistentry>
  </variablelist>

  <variablelist xml:id="j2ee-agent-web-service-processing-properties">
   <title>Web Service Processing properties</title>
   <varlistentry>
    <term>Web Service Enable</term>
    <listitem>
     <para>Enable web service processing.</para>
     <para>Property: <literal>com.sun.identity.agents.config.webservice.enable</literal></para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Web Service End Points</term>
    <listitem>
     <para>Specifies a list of web application end points that represent web
      services.</para>
     <para>Property: <literal>com.sun.identity.agents.config.webservice.endpoint</literal></para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Web Service Process GET Enable</term>
    <listitem>
     <para>When enabled, the agent processes HTTP GET requests for web service
      endpoints.</para>
     <para>Property: <literal>com.sun.identity.agents.config.webservice.process.get.enable</literal></para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Web Service Authenticator</term>
    <listitem>
     <para>Specifies a class implementing
      <literal>com.sun.identity.agents.filter.IWebServiceAuthenticator</literal>,
      used to authenticate web service requests.</para>
     <para>Property: <literal>com.sun.identity.agents.config.webservice.authenticator</literal></para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Web Service Response Processor</term>
    <listitem>
     <para>Specifies a class implementing
      <literal>com.sun.identity.agents.filter.IWebServiceResponseProcessor</literal>,
      used to process web service responses.</para>
     <para>Property: <literal>com.sun.identity.agents.config.webservice.responseprocessor</literal></para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Web Service Internal Error Content File</term>
    <listitem>
     <para>Specifies a file the agent uses to generate an internal error fault
      for the client application.</para>
     <para>Property: <literal>com.sun.identity.agents.config.webservice.internalerror.content</literal></para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Web Service Authorization Error Content File</term>
    <listitem>
     <para>Specifies a file the agent uses to generate an authorization error
      fault for the client application.</para>
     <para>Property: <literal>com.sun.identity.agents.config.webservice.autherror.content</literal></para>
    </listitem>
   </varlistentry>
  </variablelist>

  <variablelist xml:id="j2ee-agent-alternate-url-properties">
   <title>Alternate Agent URL properties</title>
   <varlistentry>
    <term>Alternative Agent Host Name</term>
    <listitem>
     <para>Specifies the host name of the agent protected server to show to
      client browsers, rather than the actual host name.</para>
     <para>Property: <literal>com.sun.identity.agents.config.agent.host</literal></para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Alternative Agent Port Name</term>
    <listitem>
     <para>Specifies the port number of the agent protected server to show to
      client browsers, rather than the actual port number.</para>
     <para>Property: <literal>com.sun.identity.agents.config.agent.port</literal></para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Alternative Agent Protocol</term>
    <listitem>
     <para>Specifies the protocol used to contact the agent from the browser
      client browsers, rather than the actual protocol used by the server.
      Either <literal>http</literal> or <literal>https</literal>.</para>
     <para>Property: <literal>com.sun.identity.agents.config.agent.protocol</literal></para>
    </listitem>
   </varlistentry>
  </variablelist>

  <variablelist xml:id="j2ee-agent-jboss-properties">
   <title>JBoss Application Server properties</title>
   <varlistentry>
    <term>WebAuthentication Available</term>
    <listitem>
     <para>When enabled, allow programmatic authentication with the JBoss
      container using the WebAuthentication feature. This feature works only with
      certain versions of JBoss when the <literal>J2EE_POLICY</literal> or
      <literal>ALL</literal> filter mode is in use.</para>
     <para>Property: <literal>com.sun.identity.agents.config.jboss.webauth.available</literal></para>
     <note><para>This setting is not necessary for the JBoss v7 agent.</para></note>
    </listitem>
   </varlistentry>
  </variablelist>

  <variablelist xml:id="j2ee-agent-xss-detection-properties">
   <title>Cross Site Scripting Detection properties</title>
   <varlistentry>
    <term>Possible XSS code elements</term>
    <listitem>
     <para>Specifies strings that, when found in the request, cause the agent
      to redirect the client to an error page.</para>
     <para>Property: <literal>com.sun.identity.agents.config.xss.code.elements</literal></para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>XSS detection redirect URI</term>
    <listitem>
     <para>Maps applications to URIs of customized pages to which to redirect
      clients upon detection of XSS code elements.</para>
     <para>For example, to redirect clients of MyApp to
      <literal>/myapp/error.html</literal>, enter MyApp as the Map Key and
      <literal>/myapp/error.html</literal> as the Corresponding Map
      Value.</para>
     <para>Property: <literal>com.sun.identity.agents.config.xss.redirect.uri</literal></para>
    </listitem>
   </varlistentry>
  </variablelist>

  <variablelist xml:id="j2ee-agent-post-data-preservation-properties">
   <title>Post Data Preservation properties</title>
   <varlistentry>
    <term>POST Data Preservation</term>
    <listitem>
     <para>Enables HTTP POST data preservation, storing POST data before
      redirecting the browser to the login screen, and then autosubmitting
      the same POST after successful authentication to the original URL.</para>
     <para>Property: <literal>com.sun.identity.agents.config.postdata.preserve.enable</literal></para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Missing PDP entry URI</term>
    <listitem>
     <para>Specifies a list of application-specific URIs if the referenced
      Post Data Preservation entry cannot be found in the local cache because
      it has exceeded its POST entry TTL. Either the agent redirects to a
      URI in this list, or it shows an HTTP 403 Forbidden error.</para>
     <para>Property: <literal>com.sun.identity.agents.config.postdata.preserve.cache.noentry.url</literal></para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>POST entry TTL</term>
    <listitem>
     <para>POST data storage lifetime in milliseconds. Default: 300000.</para>
     <para>Property: <literal>com.sun.identity.agents.config.postdata.preserve.cache.entry.ttl</literal></para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>PDP Stickysession mode</term>
    <listitem>
     <para>Specifies whether to create a cookie, or to append a query string to
      the URL to assist with sticky load balancing.</para>
     <para>Property: <literal>com.sun.identity.agents.config.postdata.preserve.stickysession.mode</literal></para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>PDP Stickysession key-value</term>
    <listitem>
     <para>Specifies the key-value pair for stickysession mode. For example,
      a setting of <literal>lb=myserver</literal> either sets an
      <literal>lb</literal> cookie with <literal>myserver</literal> value, or
      adds <literal>lb=myserver</literal> to the URL query string.</para>
     <para>Property: <literal>com.sun.identity.agents.config.postdata.preserve.stickysession.value</literal></para>
    </listitem>
   </varlistentry>
  </variablelist>

  <variablelist xml:id="j2ee-agent-custom-properties">
   <title>Custom properties</title>
   <varlistentry>
    <term>Custom Properties</term>
    <listitem>
     <para>Additional properties to augment the set of properties supported
      by agent. Such properties take the following forms.</para>
     <itemizedlist>
      <listitem><para><literal>customproperty=custom-value1</literal></para></listitem>
      <listitem><para><literal>customlist[0]=customlist-value-0</literal></para></listitem>
      <listitem><para><literal>customlist[1]=customlist-value-1</literal></para></listitem>
      <listitem><para><literal>custommap[key1]=custommap-value-1</literal></para></listitem>
      <listitem><para><literal>custommap[key2]=custommap-value-2</literal></para></listitem>
     </itemizedlist>
     <para>Property: <literal>com.sun.identity.agents.config.freeformproperties</literal></para>
    </listitem>
   </varlistentry>
  </variablelist>
 </section>
</section>