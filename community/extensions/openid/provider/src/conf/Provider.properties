#  The contents of this file are subject to the terms
#  of the Common Development and Distribution License
#  (the License). You may not use this file except in
#  compliance with the License.
#
#  You can obtain a copy of the License at
#  https://opensso.dev.java.net/public/CDDLv1.0.html or
#  opensso/legal/CDDLv1.0.txt
#  See the License for the specific language governing
#  permission and limitations under the License.
#
#  When distributing Covered Code, include this CDDL
#  Header Notice in each file and include the License file
#  at opensso/legal/CDDLv1.0.txt.
#  If applicable, add the following below the CDDL Header,
#  with the fields enclosed by brackets [] replaced by
#  your own identifying information:
#  "Portions Copyrighted [year] [name of copyright owner]"
#
#  $Id: Provider.properties,v 1.2 2009/09/08 06:21:19 hubertlvg Exp $
#
#  Copyright 2007 Sun Microsystems Inc. All Rights Reserved
#  Portions Copyrighted 2007 Paul C. Bryan and Robert Nguyen

# Specifies the external-facing URL for the OpenID provider service. 
# This provider does not construct this URL from the servlet request
# For example if your host name is openid.example.com and port is 8080
# and the provider is deplored in the context /openid the the URL will be
# http://openid.example.com:8080/openid/service
 openid.provider.service_url=http://openid.example.com:8080/openid/service
 
 
 
# Specifies the external-facing URL for the OpenID provider where the user
# is redirected post Authentication. This is
# necessary when the provider cannot construct its own URL from the incoming
# request (e.g. it is running behind a reverse proxy or SSL accelerator). If
# not specified, the URL will be constructed from the incoming request.
# if the provider deploy on http://example.com with context path "openid"
# then the value should be: http://example.com /openid/setup.jsf
 openid.provider.setup_url=http://openid.example.com:8080/openid/setup.jsf

# Local authentication to check the sso token and get attributes of the user's
# profile from opensso server.
# if the provider is deployed on http://example.com with context path "openid"
# then the value should be: http://example.com/openid/authentication
openid.provider.local-auth-url=http://openid.example.com:8080/openid/authentication

# URL to redirect to in order to perform user authentication. The URL to
# redirect back to is encoded and appended to this URL to eventually redirect
# back to the OpenID provider.
openid.provider.login_url=http://sso.example.com/opensso/UI/Login?realm=openid



# Set this property to false to disable the OpenID simple registration
# extension user interface. If disabled, all simple registration extension
# requests are ignored.
openid.provider.simple_registration=true

# Set this property to false to disable the OpenID attribute exchange
# extension user interface. If disabled, all attribute exchnage extension
# requests are ignored.
openid.provider.attribute_exchange=true

# Regular expression pattern of OpenID identity in this realm. The
# regular expression must contain one capture group, which indicates what
# portion of the OpenID identifier maps to the principal name.
openid.provider.identity_pattern=http://openid.example.com:8080/openid/(.+)

# Regular expression pattern of user principal name in this realm. The
# regular expression must contain one capture group, which indicates what
# portion of the principal name maps to the OpenID identity.
openid.provider.principal_pattern=id=(.+),ou=user,dc=example,dc=com

# Target for external links. Allows a policy URL from the consumer to be
# clicked by user, with resulting page showing up in a new browser window.
# It not specified, no external target is set in the anchor tag.
openid.provider.external_target=_blank

# Set this property to true to enable strict enforcement of OpenID protocol.
# Many OpenID consumers do not strictly conform to the protocol, so enabling
# strict enforcement of the protocol will likely result in incompatibilities.
openid.provider.strict_protocol=false



# The OpenSSO OpenID provider can fetch attributes from a users profile, these 
# attributes should be added to the data store so that they are available to 
# the IDRepo interface. The provider puts these in the containers http session 
# during authentication so that they can be used during attribure exchange.
#
# This list should be of the format am-attribute-name|openid-attribute-name and
# seperated by a comma (no spaces). Note that it must include a search
# attribue such as uid which is the same as "openid.provider.am-search-attribute"

openid.provider.am-profile-attributes=uid|uid,givenName|firstname,sn|lastname,cn|fullname,postalcode|postcode,c|country,mail|email


# Specifies the attribute of the user's profile that is used to search for the user's
# DN.
openid.provider.am-search-attribute=uid

# Attribute type mapping.  The types define how each attribute is displayed in the registration UI.
# The Types are: "text","date","select", this must correspond to the type of each attribute in setup.xhtml.
# Mapping fomart: exchange-attribute|type.  Each seperated by a comma.
# Note you must specify a type for all attributes, if a type is not specified it will be not be
# persisted, 
openid.provider.attribute_types_map=uid|text,email|text,firstname|text,lastname|text,fullname|text,nickname|text,dob|date,gender|text,postcode|text,country|select,language|select,timezone|select


# Set this property to have the OP perform RP/realm validation.
openid.provider.enforcerpid=true


# Set this property to false to disable the OpenID attribute persistence to the backend.
# if this property is enabled (true), and no custom Attribute Persistor is used by specifying
# openid.provider.pesistence.class.name, then ldap.properties must configured correctly
openid.provider.pesistence.enabled=true


# The class that implements the the com.sun.identity.openid.persistence.AttributePersistor 
# interface.
# By default the class com.sun.identity.openid.persistence.LDAPPersistor will be used.
openid.provider.pesistence.class.name=

